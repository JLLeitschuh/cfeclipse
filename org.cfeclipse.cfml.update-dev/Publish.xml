<project name="Publish  CFEclipse Plugin" default="update-dev" basedir=".">
	<property name="buildtype" value="update-dev"/>

	<taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="lib/ant-classloadertask.jar" />
	<classloader loader="project">
		<classpath>
			<fileset dir="lib/" includes="*.jar" excludes="ant-classloadertask.jar" />
		</classpath>
	</classloader>
	<path id="build.lib.path">
		<fileset dir="${basedir}/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<taskdef name="twitter" classname="den.ant.twitter.AntTwitterTask" classpathref="build.lib.path" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="build.lib.path" />


	<target name="cleanup">
		<delete>
			<fileset dir="${basedir}/plugins">
				<exclude name="org.cfeclipse.cfml.docshare*.jar" />
			</fileset>
			<fileset dir="${basedir}/features">
				<exclude name="org.cfeclipse.cfml.docshare*.jar" />
			</fileset>
			<fileset dir="${basedir}/">
				<include name="*.jar" />
				<include name="*.zip" />
			</fileset>
		</delete>
	</target>

	<target name="clean-site">
		<tstamp>
			<format pattern="MM/dd/yyyy hh:mm aa" offset="-1" unit="day" property="daybefore" />
		</tstamp>
		<property file="publish.properties" />
		<scp port="${site.ssh.port}" file="removePreviousBuilds.sh" todir="${site.username}:${site.password}@${site.url}:${site.htmlroot}/${buildtype}" trust="true" verbose="true" />
		<sshexec host="${site.url}"
			username="${site.username}"
		 	port="${site.ssh.port}"
			password="${site.password}"
			command="/bin/sh ${site.htmlroot}/${buildtype}/removePreviousBuilds.sh"/>
	</target>


	<target name="init">
		<!-- publish.properties must live in this directory, and it must contain
		ftp.username, ftp.password, and ftp.site properties -->
		<property file="publish.properties" />
		<copy todir="./web">
			<fileset dir="../org.cfeclipse.cfml">
				<include name="doc/**" />
			</fileset>
		</copy>
	</target>

	<target name="createArchivedUpdateSite">
		<property file="publish.properties" />
		<delete file="cfeupdatesite.zip" />
		<zip destfile="cfeupdatesite.zip">
			<zipfileset dir="./features" prefix="features" />
			<zipfileset dir="./plugins" prefix="plugins" />
			<zipfileset dir="." includes="site.xml" />
		</zip>
	</target>

	<target name="update-dev" depends="init,createArchivedUpdateSite">
		<input message="Do you want to tweet that this build is available?" validargs="y,n" addproperty="do.delete" />
		<antcall target="clean-site" />
		<condition property="do.tweet">
			<equals arg1="y" arg2="${do.delete}" />
		</condition>
		<push remotedir="${buildtype}" />
		<!--
		<antcall target="cleanup" />
		--> 
	</target>

	<target name="twitter-test" depends="init">
		<twitter message="${info.smaller}" 
			consumerKey="${twitter.consumer.key}" 
			consumerSecret="${twitter.consumer.secret}" 
			token="${twitter.token}" 
			tokenSecret="${twitter.token.secret}" 
			bitlyUsername="bitly-username" 
			bitlyApiKey="bitly-key" 
			enableBitly="false" />
	</target>

	<target name="twitter-head-info" depends="init" if="do.tweet">
	    <property name="repository.URL" value="http://svn.cfeclipse.org"/>
	    <java classname="org.tmatesoft.svn.cli.SVN" classpathref="build.lib.path"
	        fork="true" outputproperty="last.revision.info">
		      <arg value="log"/>
		      <arg value="-rHEAD"/>
	      <arg value="${repository.URL}/"/>
	    </java>
		<propertyregex property="info.smaller"
			input="${last.revision.info}"
			regexp="(?s)-+.(r\d+ \| \w+)\s?\|\s?.+(\(.*?).\|\s\d+\slines?(.*?).-{3}"
			select=" #CFML \2 \1 > \3"
			casesensitive="false" />
		<input message="Tweet:" defaultvalue="${info.smaller} [${buildtype}]" addproperty="tweet" />		
		<twitter message="${tweet}" 
			consumerKey="${twitter.consumer.key}" 
			consumerSecret="${twitter.consumer.secret}" 
			token="${twitter.token}" 
			tokenSecret="${twitter.token.secret}" 
			bitlyUsername="bitly-username" 
			bitlyApiKey="bitly-key" 
			enableBitly="false" />
	</target>
	
	<!-- squish update site files -->

	  <target name="optimize" description="Site Optimizer">
	    <!-- CUSTOM -->
	    <property name="ECLIPSE_HOME" location="/Users/valliant/programs/eclipse-inst/eclipse3.6.64B/" />
	    <property name="jar.name" value="org.ucdetector_1.9.0.jar" />
	    <!-- LAUNCHER -->
	    <pathconvert property="LAUNCHER">
	      <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.equinox.launcher_*.jar" />
	    </pathconvert>
	    <echo>LAUNCHER = '${LAUNCHER}' - when LAUNCHER is empty, create new property 'LAUNCHER'</echo>

	    <echo>Running build</echo>
	    <java jar="${LAUNCHER}" fork="true" failonerror="true">
	      <arg line="-debug -consolelog" />
	      <arg line="-application org.eclipse.equinox.p2.publisher.UpdateSitePublisher" />
	      <arg line="-source ./" />
	      <arg line="-metadataRepository file://tmp/repository" />
	      <arg line="-artifactRepository file://tmp/repository" />
	      <arg line="-compress" />
	      <arg line="-publishArtifacts" />
	    </java>
	  	
	  	<!-- Step 4 and 5 -->

	    <!-- 1. Part -->
	    <echo>1. For each JAR file in question, "condition" or "repack" the JAR file to prepare it for the second part.</echo>
	    <java jar="${LAUNCHER}" fork="true" failonerror="true">
	      <arg line="-debug -consolelog" />
	      <arg line="-application org.eclipse.update.core.siteOptimizer" />
	      <arg line="-jarProcessor -verbose -processAll -repack -outputDir ${basedir}/plugins" />
		      <arg line="${basedir}/plugins/${jar.name}" />
	      <arg line="file://tmp/repository/plugins/org.cfeclipse.cfml_1.4.5.201202261042.jar" />
	    </java>

	    <!-- 2. Part -->
	    <echo>2. Generate .jar.pack.gz files from a set of conditioned JAR files. Also generate digest.zip</echo>
	    <java jar="${LAUNCHER}" fork="true" failonerror="true">
	      <arg line="-debug -consolelog" />
	      <arg line="-application org.eclipse.update.core.siteOptimizer" />
	      <arg line="-digestBuilder" />
	      <arg line="-digestOutputDir=${basedir}" />
	      <arg line="-siteXML=${basedir}/site.xml" />
	      <arg line="-jarProcessor -verbose -pack -outputDir ${basedir} ${basedir}" />
	    </java>
	  </target>	

	
	<macrodef name="push">
		<attribute name="remotedir" />
		<sequential>
			<tstamp>
				<format pattern="MM/dd/yyyy hh:mm aa" offset="-1" unit="day" property="filefilter" />
			</tstamp>
			<echo>${filefilter} ${site.htmlroot}/@{remotedir}</echo>
			<!-- I have no idea why i needed to do this. when i had all of them 
			in a single scp call, it kept hanging.-->
			<scp port="${site.ssh.port}" todir="${site.username}:${site.password}@${site.url}:${site.htmlroot}/@{remotedir}" trust="true" verbose="true">
				<fileset dir="." includes="site.xml,cfeupdatesite.zip,associateSites.xml,index.html,artifacts.jar,content.jar,content.xml,category.xml,changelog.xml,logs.zip,removePreviousBuilds.sh" />
			</scp>
			<scp port="${site.ssh.port}" todir="${site.username}:${site.password}@${site.url}:${site.htmlroot}/@{remotedir}/web" trust="true" verbose="true">
				<fileset dir="web">
					<date datetime="${filefilter}" when="after" />
				</fileset>
			</scp>
			<scp port="${site.ssh.port}" todir="${site.username}:${site.password}@${site.url}:${site.htmlroot}/@{remotedir}/cfeclipsecall" trust="true" verbose="true">
				<fileset dir="cfeclipsecall">
					<!--
					<date datetime="${filefilter}" when="after" />
					-->
				</fileset>
			</scp>
			<scp port="${site.ssh.port}" todir="${site.username}:${site.password}@${site.url}:${site.htmlroot}/@{remotedir}/plugins/" trust="true" verbose="true">
				<fileset dir="plugins" includes="*.jar">
					<!--
					<date datetime="${filefilter}" when="after" />
					-->
				</fileset>
			</scp>
			<scp port="${site.ssh.port}" todir="${site.username}:${site.password}@${site.url}:${site.htmlroot}/@{remotedir}/features" trust="true" verbose="true">
				<fileset dir="features" includes="*.jar">
					<!--
					<date datetime="${filefilter}" when="after" />
					-->
				</fileset>
			</scp>
			<antcall target="twitter-head-info"/>
			<echoproperties prefix="site" />
		</sequential>
	</macrodef>
</project>