<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dictionary [
	
	<!ENTITY value_boolean         SYSTEM "inc/value_boolean.xml">
	<!ENTITY node                  SYSTEM "inc/parameter_node.xml">
	<!ENTITY view                  SYSTEM "inc/parameter_view.xml">
	<!ENTITY basecomponent         SYSTEM "inc/parameter_basecomponent.xml">
	<!ENTITY basevaluecomponent    SYSTEM "inc/parameter_basecomponent.xml">
	<!ENTITY baseformitem          SYSTEM "inc/parameter_baseformitem.xml">
	<!ENTITY baselist              SYSTEM "inc/parameter_baselist.xml">
	<!ENTITY animatorgroup         SYSTEM "inc/parameter_animatorgroup.xml">
	<!ENTITY basebutton            SYSTEM "inc/parameter_basebutton.xml">
	<!ENTITY basecombobox          SYSTEM "inc/parameter_basecombobox.xml">
	<!ENTITY basedatepicker        SYSTEM "inc/parameter_basedatepicker.xml">
	<!ENTITY basefocusview         SYSTEM "inc/parameter_basefocusview.xml">
	<!ENTITY baseform              SYSTEM "inc/parameter_baseform.xml">
	<!ENTITY basegrid              SYSTEM "inc/parameter_basegrid.xml">
	<!ENTITY basegridcolumn        SYSTEM "inc/parameter_basegridcolumn.xml">
	<!ENTITY baselistitem          SYSTEM "inc/parameter_baselistitem.xml">
	<!ENTITY basescrollarrow       SYSTEM "inc/parameter_basescrollarrow.xml">
	<!ENTITY basescrollbar         SYSTEM "inc/parameter_basescrollbar.xml">
	<!ENTITY baseslider            SYSTEM "inc/parameter_baseslider.xml">
	<!ENTITY basetab               SYSTEM "inc/parameter_basetab.xml">
	<!ENTITY basetabelement        SYSTEM "inc/parameter_basetabelement.xml">
	<!ENTITY basetabpane           SYSTEM "inc/parameter_basetabpane.xml">
	<!ENTITY basetabs              SYSTEM "inc/parameter_basetabs.xml">
	<!ENTITY basetabslider         SYSTEM "inc/parameter_basetabslider.xml">
	<!ENTITY basetree              SYSTEM "inc/parameter_basetree.xml">
	<!ENTITY basewindow            SYSTEM "inc/parameter_basewindow.xml">
	<!-- //////////////////////////////////////////////////////////////////////// -->
	<!-- base window -->
	<!ENTITY windowpanel           SYSTEM "inc/parameter_windowpanel.xml">
	<!ENTITY modaldialog           SYSTEM "inc/parameter_modaldialog.xml">
	<!ENTITY layout                SYSTEM "inc/parameter_layout.xml">
	<!ENTITY datapointer           SYSTEM "inc/parameter_datapointer.xml">
	<!ENTITY selectionmanager      SYSTEM "inc/parameter_selectionmanager.xml">
	<!ENTITY state                 SYSTEM "inc/parameter_state.xml">
	<!ENTITY list                  SYSTEM "inc/parameter_list.xml">
	<!ENTITY gridcolumn            SYSTEM "inc/parameter_gridcolumn.xml">
	<!ENTITY rpc                   SYSTEM "inc/parameter_rpc.xml">
	<!ENTITY textlistitem          SYSTEM "inc/parameter_textlistitem.xml">
	<!ENTITY text                  SYSTEM "inc/parameter_text.xml">
	
	<!-- you can use these to mark colors if you wish -->
	<!ENTITY color_norm   '4' >
	<!ENTITY color_form  '16'>
	<!ENTITY color_table '32'>
]>

<dictionary xmlns="http://www.cfeclipse.org/version1/dictionary" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:ns1="http://www.laszlosystems.com/2003/05/lzx" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.cfeclipse.org/version1/dictionary http://www.cfeclipse.org/version1/dictionary/dictionary.xsd"
>
	<tags>
		<!-- == A == -->
		<tag name="a" creator="&color_norm;" single="false" xmlstyle="true">
         	<help>HTML hypertext link. This tag can only occur inside XHTML text 
				containers such as "text".</help>
			 <parameter name="href" type="URL" required="true">
				<help>The link target.</help>
				<values/>
			 </parameter>
			 <parameter name="target" type="String" required="false">
				<help>The value of this attribute determines where the link target will 
					be displayed. The interpretation is the same as in HTML, where the 
					"current frame" is the frame containing the LZX application. The 
					value must be a name beginning with an alphabetic character.
				</help>
				<values>
					<value option="_blank" />
					<value option="_parent"/>
					<value option="_self"/>
					<value option="_top"/>
				</values>
			</parameter>
		</tag>
		
		<!-- windowpanel -->
		<tag name="windowpanel" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A draggable panel that provides common behavior for various window classes.
				JavaScript: windowpanel Extends Basewindow
				The windowpanel tag creates a floating view that has a title area 
				and can be moved by the user. It provides common behavior for 
				window, modaldialog, and alert.</help>
			&windowpanel;
		</tag>
		
		<!-- modaldialog -->
		<tag name="modaldialog" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A modal dialog.
				JavaScript: modaldialog Extends Windowpanel
				The modaldialog tag creates a moveable floating view. When opened, 
				the user cannot interact with any other part of the application 
				until the dialog is closed. A modal dialog is typically declared 
				on the canvas. It is automatically centered horizontally and appears 
				vertically at the top third of the screen. The position can be 
				altered by setting an explicit x and y position in the tag.</help>
			&modaldialog;
		</tag>
		
		
		<!-- == ALERT == -->
		<tag name="alert" creator="&color_norm;" single="false" xmlstyle="true">
			 <help>A simple subclass of modaldialog, alert provides a modal alert box 
				that displays its text attribute (or content) and an OK button. (If you 
				need to display more than text in an alert, use modaldialog itself).
				</help>
			 <parameter name="button1" type="String" required="false">
				<help>Alert shows only this button, if button2 isn't set. Default: "OK". 
					You may specify a different string to change the text of the button.
					</help>
				<values/>
			 </parameter>
			 <parameter name="button2" type="String" required="false">
				<help>If a string is set for this attribute, a second button will be 
					shown to the left of the first with this text.</help>
				<values />
			 </parameter>
			 <parameter name="maxtextwidth" type="Any" required="false">
				<help>The max length of a line of text before it wraps. Default: 1/3 of 
					the parent's width - width of window dressing and margin.</help>
				<values />
			 </parameter>
			 <parameter name="onresult" type="Any" required="false">
				<help>This event is sent when a button is pressed. Use this to check the 
					result value.</help>
				<values />
			 </parameter>
			 <parameter name="text_x" type="Numeric" required="false">
				<help>The x position of the button text. Default: 0 (left).</help>
				<values />
			 </parameter>
			 <parameter name="text_y" type="Numeric" required="false">
				<help>The y position of the button text. Default: 0 (top).</help>
				<values />
			</parameter>
			&modaldialog;
		</tag>
		
		<!-- == ATTRIBUTE == -->
		<tag name="attribute" creator="&color_norm;" single="false" xmlstyle="true">
         	<help>Sets an attribute of the object that contains it.</help>
			 <parameter name="name" type="String" required="true">
				<help>The name of the attribute.</help>
				<values/>
			 </parameter>
			 <parameter name="value" type="String" required="false">
				<help>The initial value of the attribute. The type of this value is 
					specified by the value of the type attribute; if that attribute is 
					not present, it's the type of this attribute in this element's tag. 
					The attribute is given this value when the element is created.</help>
				<values/>
			 </parameter>
         	<parameter name="when" type="String" required="false">
				<help>When the initial value expression is to be evaluated. One of:
					* immediately 
					evaluate when the enclosing element is defined  (must be a constant)
					* once
					evaluate when the enclosing element is  initialized
					* always 
					update whenever the value of the expression changes
					
					The default is when="immediately.
				</help>
				<values>
				   <value option="immediately"/>
				   <value option="once"/>
				   <value option="always"/>
				</values>
			 </parameter>
			 <parameter name="init" type="Function" required="false">
				<help>As an alternative to the value attribute, an expression may be 
					supplied in the init attribute. The attribute is given the value of 
					the expression when the element is initialized.</help>
				<values/>
			 </parameter>
         	<parameter name="constraint" type="Function" required="false">
				<help>** Deprecated since 1.1 Use value with when='always' instead. **
					As an alternative to the value attribute, an expression may be 
					supplied in the constraint attribute. The attribute will be 
					constrained to the value of the expression at all times.</help>
				<values/>
			 </parameter>
			 <parameter name="type" type="String" required="false">
				<help>The type of the attribute. This determines how the value is parsed. 
					Attributes of type string are automatically quoted if 
					when="immediate", for any other value of when, a literal string 
					would have to be quoted to be used as a value.</help>
				<values>
				   <value option="boolean"/>
				   <value option="color"/>
				   <value option="expression"/>
				   <value option="number"/>
				   <value option="size"/>
				   <value option="string"/>
				   <value option="text"/>
				   <value option="html"/>
				</values>
			 </parameter>
			 <parameter name="required" type="boolean" required="false">
				<help>True if this is a required attribute.</help>
				<values>
					<value option="true"/>
					<value option="false"/>
				</values>
			 </parameter>
			 <parameter name="setter" type="Function" required="false">
				<help>Code that is executed when setAttribute is used to set the value 
					of this attribute. This code is executed within a context in which 
					the variable with this attribute's name is bound to the value 
					passed to setAttribute.</help>
				<values/>
			 </parameter>
         	<parameter name="onset" type="Function" required="false">
				<help>** Deprecated since 1.1 Use setter instead. **
					Code that is executed when setAttribute is used to set the value of 
					this attribute. This code is executed within a context in which the 
					variable with this attribute's name is bound to the value passed to 
					setAttribute.</help>
				<values/>
			</parameter>
		</tag>
		
		<!-- == AUDIO == -->
		<tag name="audio" creator="&color_norm;" single="false" xmlstyle="true">
			<help>** Warning: This tag is obsolete. **
				Imports an audio file. Its functionality has been replaced by the 
				"resource" tag.</help>
			<parameter name="id" type="String" required="false">
				<help>A unique identifier for this element. Can be used as a global 
					variable name in JavaScript code.</help>
				<values/>
			</parameter>
			<parameter name="name" type="String" required="false">
				<help>The name of a variable that will be set to this object when the 
					application is started. If this element is directly within a 
					"canvas" or "library" element, the global variable and the canvas 
					property with this name will be set to this object. If this element 
					is within another object, that object's property with this name 
					will be set to this object.</help>
				<values/>
			</parameter>
			<parameter name="src" type="URL" required="false">
				<help>The path of a file that contains the source for this object.</help>
				<values/>
			</parameter>
		</tag>
		
		<!-- == B == -->
		<tag name="b" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Bold Text. HTML bold character markup. This tag can only occur 
				inside XHTML text containers such as "text" and "button".</help>
		</tag>
		
		<!-- == BR == -->
		<tag name="br" creator="&color_norm;" single="true" xmlstyle="true">
			<help>Line break. HTML line break. This tag can only occur inside 
				XHTML text containers such as "text".</help>
		</tag>
		
		<!-- == BUTTON == -->
		<tag name="button" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The button class provides a simple pushbutton.
				JavaScript: button Extends Basebutton 
				The button tag provides a simple button. The button is rectangular 
				and typically displays a text label describing its action. The 
				button adjusts to fit the label.</help>
			<parameter name="text_padding_x" type="Numeric" required="false">
				<help>the amount of space to add horizontally when sizing button to 
					its text. default: 11</help>
				<values/>
			</parameter>
			<parameter name="text_padding_y" type="Numeric" required="false">
				<help>the amount of space to add vertically when sizing button to 
					its text. default: 4</help>
				<values/>
			</parameter>
			<parameter name="text_x" type="Numeric" required="false">
				<help>the x position of the button text. default: centered</help>
				<values/>
			</parameter>
			<parameter name="text_y" type="Numeric" required="false">
				<help>the y position of the button text. default: centered</help>
				<values/>
			</parameter>
			<!-- base button -->
			&basebutton;
		</tag>
		
		<!-- == CANVAS == -->
		<tag name="canvas" creator="&color_norm;" single="false" xmlstyle="true">
         	<help>The top-most view in a Laszlo application.
				JavaScript: LzCanvas Extends View 
				The canvas is the container for all views within an application.
				The LzCanvas class represents the viewable area of the application. 
				There is one instance of LzCanvas, named canvas. The canvas contains 
				all views within an application.</help>
			 <parameter name="debug" type="boolean" required="false">
				<help>If true, the application is compiled with debugging enabled. 
					See the Debugging chapter of the Guide for more information 
					about debugging.</help>
				<values>
					<value option="true"/>
					<value option="false"/>
				</values>
			</parameter>
			<parameter name="libraries" type="String" required="false">
				<help>A list of names for libraries that are included in the 
					application.</help>
				<values/>
			</parameter>
			<parameter name="maxtextwidth" type="String" required="false">
				<help>If present, specifies the maximum width in pixels of any 
					output text field. Text which extends beyond this width will be 
					clipped. If this attribute is omitted, it defaults to the canvas 
					width.</help>
				<values/>
			</parameter>
			<parameter name="maxtextheight" type="String" required="false">
				<help>If present, specifies the maximum height in pixels of any 
					output text field. Text which extends beyond this height will 
					be clipped. If this attribute is omitted, it defaults to the 
					canvas height.</help>
				<values/>
			</parameter>
			<parameter name="title" type="String" required="false">
				<help>The string that is used in the browser window.</help>
				<values/>
			</parameter>	
			<parameter name="validate" type="boolean" required="false">
				<help>If false, disables validation against the schema during 
					compilation</help>
				<values>
					<value option="true"/>
					<value option="false"/>
				</values>
			</parameter>
			<parameter name="version" type="String" required="false">
				<help>The version for this lzx app. If set below the current 
					version, may enable backwards compatible behaviors.</help>
				<values/>
			</parameter>
			<!-- VIEW -->
			&view;
		</tag>
		
		<!-- CHECKBOX -->
		<tag name="checkbox" creator="&color_norm;" single="true" xmlstyle="true">
			<help>The checkbox tag provides a simple toggle button.
				JavaScript: checkbox Extends Baseformitem 
				The checkbox tag provides a simple toggle  button that represents a 
				value of true or  false. It has a disabled state where it does not 
				respond to mouse events when enabled=false.</help>
			<!-- BBASE FORM ITEM -->
			&baseformitem;
		</tag>	
		
		<!-- == CLASS == -->
		<tag name="class" creator="&color_norm;" single="false" xmlstyle="true">
         	<help>Defining your own tags.
				The class tag defines a new tag, which be used anywhere in the 
				source file where a built-in tag such as view or layout can be used.
				Defines a new XML tag name, that can be used in the remainder of  
				the application source. An element whose name is this tag name 
				will inherit the attributes and content of this definition.</help>
			<parameter name="name" type="String" required="true">
				<help>The name of a new tag that this element defines.</help>
				<values/>
			</parameter>
			<parameter name="extends" type="String" required="false">
				<help>The name of the tag that this tag extends.</help>
				<values/>
			</parameter>
		</tag>
		
		<!-- == COMBOBOX == -->
		<tag name="combobox" creator="&color_norm;" single="false" xmlstyle="true">
			<help>combobox displays a dropdown list of selectable items.
				JavaScript: combobox Extends Basecombobox 
				A combobox is a common UI element for displaying a pop-up list 
				associated with a text field. The selected text of the combobox is 
				displayed within the text field. This field is an LzInputText field 
				if the editable of the combobox is true (the default), or a static 
				LzText field if it is false.</help>
			<parameter name="text" type="String" required="false">
				<help></help>
				<values/>
			</parameter>
			<!-- base combo box -->
			&basecombobox;
		</tag>
		
		<!-- == COMMAND == -->
		<tag name="command" creator="&color_norm;" single="false" xmlstyle="true">
			<help>An element that sends events in response to keyboard input.
				JavaScript: LzCommand Extends Node </help>
			<parameter name="active" type="boolean" required="false">
				<help>true if the command is currently active. The default is true.</help>
				<values>
					<value option="true" />
					<value option="false" />
				</values>
			</parameter>
			<parameter name="key" type="Function" required="false">
				<help>Use setAttribute or setKeys to set the group  of keys 
					associated with this command from JavaScript. 
					For example: setAttribute('key', ['a', 'shift']) or 
					setKeys(['j', 'control'])</help>
				<values/>
			</parameter>
			<parameter name="onselect" type="Function" required="false">
				<help />
				<values/>
			</parameter>
			<!-- NODE -->
			&node;
		</tag>
		
		<!-- CONNECTION -->
		<tag name="connection" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A connection manager to create a persistent connection and an 
				authenticated session.
				JavaScript: LzConnection Extends Datasource 
				The connection tag instantiates a connection manager object that 
				handles asynchronous messages sent from the Laszlo Presentation 
				Server. Use the the LzConnection.connect method to establish a 
				persistent connection and disconnect to close it down.
			</help>
			<parameter name="authenticator" type="String" required="false">
				<help>Class name of server-side java authenticator</help>
				<values/>
			</parameter>
			<parameter name="authparam" type="String" required="false">
				<help>Authenticator parameters.</help>
				<values/>
			</parameter>
			<parameter name="group" type="String" required="false">
				<help>Connection group name.</help>
				<values/>
			</parameter>
			<parameter name="heartbeat" type="Numeric" required="false">
				<help>The interval value in milliseconds that the server will send 
					a message to the application to ensure the connection is kept 
					alive by the client. The default value of a heartbeat is 5000 
					milliseconds.</help>
				<values/>
			</parameter>
			<parameter name="onconnect" type="Function" required="false">
				<help>The onconnect script is executed when the application is 
					connected.</help>
				<values/>
			</parameter>
			<parameter name="ondata" type="Function" required="false">
				<help>The ondata script is executed when the application receives a 
					persistent connection message.</help>
				<values/>
			</parameter>
			<parameter name="ondisconnect" type="Function" required="false">
				<help>The ondisconnect script is executed whenever the application 
					disconnects.</help>
				<values/>
			</parameter>
			<parameter name="onerror" type="Function" required="false">
				<help>The onerror script is executed whenever there's a connection 
					failure.</help>
				<values/>
			</parameter>
			<parameter name="ontimeout" type="Function" required="false">
				<help>The ontimeout script is executed whenever a timeout is 
					encountered with the persistent connection.</help>
				<values/>
			</parameter>
			<parameter name="onuserdisconnect" type="Function" required="false">
				<help>The onuserdisconnect script is executed whenever a user 
					disconnects. See the receiveuserdisconnect attribute.</help>
				<values/>
			</parameter>
			<parameter name="receiveuserdisconnect" type="boolean" required="false">
				<help>Tells server to send an onuserdisconnect event every time a 
					user disconnects. Default is false.</help>
				<values/>
			</parameter>
			<parameter name="secure" type="boolean" required="false">
				<help>If true, creates a secure persistent connection through https. 
					Otherwise the connection uses http.</help>
				<values/>
			</parameter>
			<parameter name="secureport" type="Numeric" required="false">
				<help>If true, creates a secure persistent connection through https. 
					Otherwise the connection uses http.</help>
				<values/>
			</parameter>
			<!-- NODE -->
			&node;
		</tag>
		
		<!-- connectiondatasource -->
		<tag name="connectiondatasource" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The connection datasource to receive and send messages through the  persistent connection.
				JavaScript: LzConnectionDatasource Extends Datasource 
				Use the connectiondatasource tag to declare the datasets that 
				handle will handle the incoming data from a connection. Unlike the 
				connection tag, the connectiondatasource tag can be declared in 
				libraries.
			</help>
			<parameter name="onconnect" type="Function" required="false">
				<help>The onconnect script is executed when the application is 
					connected.</help>
				<values/>
			</parameter>
			<parameter name="ondata" type="Function" required="false">
				<help>The ondata script is executed when the application receives a 
					persistent connection message.</help>
				<values/>
			</parameter>
			<parameter name="ondisconnect" type="Function" required="false">
				<help>The ondisconnect script is executed whenever the application 
					disconnects.</help>
				<values/>
			</parameter>
			<parameter name="onerror" type="Function" required="false">
				<help>The onerror script is executed whenever there's a connection
					failure.</help>
				<values/>
			</parameter>
			<parameter name="ontimeout" type="Function" required="false">
				<help>The ontimeout script is executed whenever a timeout is 
					encountered with the persistent connection.</help>
				<values/>
			</parameter>
			<parameter name="onuserdisconnect" type="Function" required="false">
				<help>The onuserdisconnect script is executed whenever a user 
					disconnects. See the receiveuserdisconnect attribute.</help>
				<values/>
			</parameter>
			<!-- NODE -->
			&node;
		</tag>
		
		<!-- == LAYOUT == -->
		<tag name="layout" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Abstract layout base class.
				JavaScript: LzLayout Extends Node 
				This layout class is the base class that all other layouts — such 
				as, for example simplelayout and resizelayout — extend.
				A layout arranges the views within the element that it is attached 
				to. simplelayout is one example of a basic extension of this layout 
				object</help>
			&layout;
		</tag>
		
		<!-- == constantboundslayout == -->
		<tag name="constantboundslayout" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Arranges a set of views to a constant 'x' or 'y' value with a 
				bounding rect
				JavaScript: constantboundslayout Extends Layout 
				A view can have an xoffset and a yoffset. These offsets allow the 
				view to be placed relative to the point (xoffset, yoffset). 
				(Otherwise the view is placed using the view's top left corner as a 
				reference point.) If a view has an offset, then this will effect how 
				layouts position it relative to other views.</help>
			<parameter name="axis" type="String" required="false">
				<help>The axis in which this layout operates either 'x' or 'y'.</help>
				<values/>
			</parameter>
			<parameter name="value" type="Any" required="false">
				<help>The constant value that is applied to the attribute ( defined 
					in 'axis' as 'x' or 'y' ) of each subview in the layout.</help>
				<values/>
			</parameter>
			<!-- LAYOUT -->
			&layout;
		</tag>
		
		<!-- == constantlayout == -->
		<tag name="constantlayout" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Arranges a set of views to a constant 'x' or 'y' value.
				JavaScript: constantlayout Extends Layout 
				constantlayout extends LzLayout, and therefore it is responsible 
				for arranging all of the subviews for the view that it is attached 
				to. The attributes of a view that constantlayout effects are the x 
				and y values, and as its name implies constantlayout sets all of 
				the subviews to the same value.</help>
			<parameter name="axis" type="String" required="false">
				<help>The axis in which this layout operates either 'x' or 'y'.</help>
				<values/>
			</parameter>
			<parameter name="value" type="Any" required="false">
				<help>The constant value that is applied to the attribute ( defined 
					in 'axis' as 'x' or 'y' ) of each subview in the layout.</help>
				<values/>
			</parameter>
			<!-- LAYOUT -->
			&layout;
		</tag>
		
		<!-- == datapointer == -->
		<tag name="datapointer" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A cursor in a dataset.
				JavaScript: LzDatapointer Extends Node 
				A datapointer is an object that represents a pointer to a node in a 
				LzDataset. The datapointer can be repositioned using either cursor 
				movements calls such as selectNext, or by running an XPath request 
				via setXPath.</help>
			&datapointer;
		</tag>		
		
		<!-- == datapath == -->
		<tag name="datapath" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The binder between data and nodes.
				JavaScript: LzDatapath Extends Datapointer 
				Datapaths are used to merge data hierarchies with the hierarchy of 
				a Laszlo application. This is done using the the XPath syntax 
				supported by LzDatapointer. When a node is given a datapath 
				attribute, a datapath with the given value as its XPath is created. 
				If the datapath retrieves a node (i.e. it doesn't terminate in an 
				attribute getter or a () operator) then the node is mapped to that 
				data context and all child nodes will implicitly share the 
				datacontext, but no further action is taken.</help>
			<parameter name="pooling" type="boolean" required="false">
				<help>This attribute applies to datapaths which match multiple 
					nodes and force replication. See the  section on Pooling in the 
					Guide for information about the use of this attribute.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="pooling" type="String" required="false">
				<help>Determines whether to use normal or lazy replication, if the 
					datapath matches more than one node.  See the section on 
					Replication  in the Guide for information about the use of 
					this attribute.</help>
				<values>
					<value option="normal"/>
					<value option="lazy"/>
					<value option="resize"/>
				</values>
			</parameter>
			<parameter name="sortorder" type="String" required="false">
				<help>The order to use to sort the dataset if replication occurs. 
					One of ascending or descending to use built in dictionary sort, 
					or a function which compares two strings and returns 1 if the 
					strings  are in order, 0 if they are the same, and  -1 if they 
					are out of order.</help>
				<values>
					<value option="ascending"/>
					<value option="descending"/>
				</values>
			</parameter>
			<parameter name="sortpath" type="String" required="false">
				<help>An XPath to use to obtain the sort key for  sorting if 
					replication occurs.</help>
				<values />
			</parameter>
			<!-- == datapointer == -->
			&datapointer;
		</tag>
		
		<!-- == selectionmanager == -->
		<tag name="selectionmanager" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Manages selection among a series of objects.
				JavaScript: LzSelectionManager Extends Node 
				Selection managers manage selection among a series of objects. They 
				enable standard control and shift click modifiers to aid range 
				selection. Selection managers provide methods to manipulate, add to 
				and clear the selection.</help>
			&selectionmanager;
		</tag>
		
		<!-- == dataselectionmanager == -->
		<tag name="dataselectionmanager" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A selection manager for views generated by a lazily-replicated 
				datapath
				JavaScript: LzDataSelectionManager Extends Selectionmanager 
				If a datapath's datapath.replication attribute is set to "lazy", 
				then a match to multiple nodes will create an 
				LzLazyReplicationManager instead of an LzReplicationManager. The 
				lazy replication manager creates only enough replicated views in 
				order to display the data, so there is not a view for each data 
				node. This enables the display of very large datasets.</help>
			&selectionmanager;
		</tag>
		
		<!-- == dataset == -->
		<tag name="dataset" creator="&color_norm;" single="false" xmlstyle="true">
			<help>An in-memory xml-style data hierarchy.
				JavaScript: LzDataset Extends LzDataElement 
				A dataset tag within a canvas or library element defines a local 
				dataset. The name of the dataset is used in the datapath attribute 
				of a view.
				The src attribute of the dataset element specifies whether the data 
				is compiled into the application or fetched at runtime</help>
			<parameter name="acceptencodings" type="boolean" required="false">
				<help>When true, the server will accept  encoded responses for this 
					request. Encoded responses require more work for the LPS 
					(encoding the  response) and client (decoding the response) in 
					trade for lower network bandwidth usage.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="autorequest" type="boolean" required="false">
				<help>** Deprecated since 1.1 Use the request attribute instead. **</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="getresponseheaders" type="boolean" required="false">
				<help>When true, the server will encode and  send the HTTP response 
					headers along with the data (defaults to false).</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="ondata" type="Function" required="false">
				<help>Sent when new data arrives for this dataset</help>
				<values />
			</parameter>
			<parameter name="onerror" type="Function" required="false">
				<help>Sent when an error occurs for this dataset</help>
				<values />
			</parameter>
			<parameter name="ontimeout" type="Function" required="false">
				<help>Sent when a request times out</help>
				<values />
			</parameter>
			<parameter name="port" type="Numeric" required="false">
				<help>** Deprecated since 1.1 Use the secureport attribute instead. **
					Sets the port number to use to connect to the LPS for a secure 
					connection.</help>
				<values />
			</parameter>
			<parameter name="querystring" type="String" required="false">
				<help>A string to be appended to the request that the dataset makes.</help>
				<values />
			</parameter>
			<parameter name="queuerequests" type="boolean" required="false">
				<help>If true, the client should ensure that each request is made, 
					rather than just making and reporting the last request.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="request" type="boolean" required="false">
				<help>If true, the datset will make a request when it  inits. The 
					default for this is false.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="secure" type="boolean" required="false">
				<help>specifies whether or not the app-LPS connection is secure</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="secureport" type="Numeric" required="false">
				<help>Sets the port number to use to connect to the LPS for a secure 
					connection.</help>
				<values />
			</parameter>
			<parameter name="src" type="String" required="false">
				<help>The source for requests made by this dataset.</help>
				<values />
			</parameter>
			<parameter name="type" type="String" required="false">
				<help>If set to "http", then the dataset will interpret its src 
					attribute as an url from which to load its content, rather than 
					as a static xml file to inline.</help>
				<values />
			</parameter>
			<!-- NODE -->
			&node;
		</tag>
		
		<!-- == datasource == -->
		<tag name="datasource" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A way of representing a server-side HTTP datasource.
				JavaScript: LzHTTPDatasource Extends Datasource 
				The datasource tag is an optional way of representing a server side 
				datasource. The datasource's parameters can specify ways in which 
				the client is will make backend requests. Also, more than one 
				dataset can share a datasource, and the datasource can be used to 
				control session related information.</help>
			<parameter name="port" type="Numeric" required="false">
				<help>** Deprecated since 1.1 ** Use the dataset secureport 
					attribute instead.</help>
				<values />
			</parameter>
			<!-- NODE -->
			&node;
		</tag>
		
		<!-- === DATEPICKER === -->
		<tag name="datepicker" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A simple date picker
				JavaScript: datepicker Extends Basedatepicker 
				Datepicker is a simple component that makes it easy for users to 
				select dates.
			</help>
			<parameter name="startAsIcon" type="boolean" required="false">
				<help>Set to true to initially show the datepicker as an icon, 
					otherwise set to false.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			&basedatepicker;
		</tag>
		
		<!-- debug -->
		<tag name="debug" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Enable debugging for the application
				JavaScript: Debug 
				The debug tag controls the initial appearance and options of the 
				debugger when debugging is enabled. Debugging is enabled either by 
				including the debug="true" option on the canvas tag, or adding the 
				?debug=true query argument to the application's URL.</help>
			<parameter name="font" type="String" required="false">
				<help>The debugger window font</help>
				<values/>
			</parameter>
			<parameter name="fontsize" type="Numeric" required="false">
				<help>The point size of the font</help>
				<values/>
			</parameter>
			<parameter name="height" type="Numeric" required="false">
				<help>The height of the debugger window.</help>
				<values/>
			</parameter>
			<parameter name="width" type="Numeric" required="false">
				<help>The width of the debugger window.</help>
				<values/>
			</parameter>
			<parameter name="x" type="Numeric" required="false">
				<help>The x position of the debugger window.</help>
				<values/>
			</parameter>
			<parameter name="y" type="Numeric" required="false">
				<help>The y position of the debugger window.</help>
				<values/>
			</parameter>
		</tag>
		
		<!-- == STATE == -->
		<tag name="state" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A description of an instance hierarchy that can be applied and 
				removed at runtime.
				JavaScript: LzState Extends Node 
				A state is an object that holds its children and attributes for 
				creation or application at a later time — when the state's apply 
				method is called. In addition to representing visual state by 
				adding and removing children from a view, states are often used to 
				control constraints which are applied and removed at different 
				times during the run of an application.</help>
			&state;
		</tag>
		
		<!-- == DRAGSTATE == -->
		<tag name="dragstate" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A standard dragging behavior.
				JavaScript: dragstate Extends State 
				The dragstate is a class which can be used to make any view 
				draggable. When the dragstate is applied, the view with the 
				dragstate will follow the mouse.</help>
			<parameter name="drag_axis" type="String" required="false">
				<help>'x', 'y' or 'both' , default: both</help>
				<values>
					<value option="x"/>
					<value option="y"/>
					<value option="both"/>
				</values>
			</parameter>
			<parameter name="drag_max_x" type="Numeric" required="false">
				<help>the maximum value for the x attribute. Default : null, 
					no maximum</help>
				<values />
			</parameter>
			<parameter name="drag_max_y" type="Numeric" required="false">
				<help>the maximum value for the y attribute. Default : null, 
					no maximum</help>
				<values />
			</parameter>
			<parameter name="drag_min_x" type="Numeric" required="false">
				<help>the minimum value for the x attribute. Default : null, 
					no minimum</help>
				<values />
			</parameter>
			<parameter name="drag_min_y" type="Numeric" required="false">
				<help>the minimum value for the y attribute. Default : null, 
					no minimum</help>
				<values />
			</parameter>
			<!-- state -->	
			&state;
		</tag>
		
		<!-- === EDITTEXT === -->
		<tag name="edittext" creator="&color_norm;" single="false" xmlstyle="true">
			<help>text input component with lz components look and feel
				JavaScript: edittext Extends Baseformitem 
				The edittext tag provides a text input field which has a look and 
				feel to match the lz component set. It can accept any inputtext
				attribute.
			</help>
			<parameter name="multiline" type="boolean" required="false">
				<help>Set to true for multiple lines, default: false.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="password" type="boolean" required="false">
				<help>Set to true for a password field. Text will appear as ****, 
					default: false.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="resizable" type="boolean" required="false">
				<help>Set to true if you plan to change the width or height of the 
					component at run-time, default: false.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<!-- BASE VALUE COMPONENT -->
			&basevaluecomponent;
		</tag>
		
		<!-- == FACE == -->
		<tag name="face" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Defines a font face or style within the font family that the outer 
				element defines.</help>
			<parameter name="src" type="URL" required="false">
				<help>The path of a file that contains the source for this object.</help>
				<values/>
			</parameter>
			<parameter name="style" type="String" required="false">
				<help>The path of a file that contains the source for this object.</help>
				<values>
					<value option="bold"/>
					<value option="italic"/>
					<value option="bold italic"/>
					<value option="italic bold"/>
					<value option="plain"/>
				</values>
			</parameter>
		</tag>
		
		<!-- === LIST === -->
		<tag name="list" creator="&color_norm;" single="false" xmlstyle="true">
			<help>contains listitems and provides selection capabilities.
				JavaScript: list Extends Baselist 
				The list tag creates a list which may contain listitems. Subclasses 
				of listitem, such as textlistitem, may be used as well. list 
				provides basic layout and a selection API . If there are more items 
				than specified in the shownitems attribute, a scrollbar will be 
				provided.</help>
			&list;
		</tag>
		
		<!-- === FLOATING LIST === -->
		<tag name="floatinglist" creator="&color_norm;" single="false" xmlstyle="true">
			<help>a floatinglist appears above other components
				JavaScript: floatinglist Extends List 
				The floatinglist tag provides a list that floats on top of the 
				canvas. It includes an attachment API for popping-up relative to a 
				target. This attachment API guarantees visibility on the canvas, 
				such that if the floatinglist intersects the canvas bounds, the 
				attach location will change to a more visible location.</help>
			<parameter name="attach" type="String" required="false">
				<help>Where this floatinglist should attach to its owner. Possible 
					values: bottom, top, left, right. In the event of a canvas 
					out-of-bounds, the floating list will attach in a visible 
					location.</help>
				<values />
			</parameter>
			<parameter name="attachoffset" type="String" required="false">
				<help>The distance from the attachtarget.</help>
				<values />
			</parameter>
			<parameter name="attachoffset" type="String" required="false">
				<help>The distance from the attachtarget.</help>
				<values />
			</parameter>
			<parameter name="attachtarget" type="String" required="false">
				<help>The view to which this floatinglist will attach. By default, 
					this will be the lexical parent. The style of the attachtarget 
					will be inherited.</help>
				<values />
			</parameter>
			<parameter name="shadowoffsety" type="String" required="false">
				<help>The shadow offset in the y coordinate space.</help>
				<values />
			</parameter>
			<!-- LIST -->
			&list;
		</tag>
		
		<!-- == FONT == -->
		<tag name="font" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Inline font markup.
				A font tag controls the font face, size, and color for its textual 
				content. This tag can only occur inside XHTML text containers such 
				as text and button.</help>
			<parameter name="color" type="String" required="false">
				<help/>
				<values/>
			</parameter>
			<parameter name="face" type="String" required="false">
				<help/>
				<values/>
			</parameter>
			<parameter name="size" type="String" required="false">
				<help/>
				<values/>
			</parameter>
		</tag>
		
		<!-- === FORM === -->
		<tag name="form" creator="&color_norm;" single="false" xmlstyle="true">
			<help>web form with standard layout
				JavaScript: form Extends Baseform 
				The form tag allows you to create a web form and provides automatic 
				layout. Most components are laid out vertically with buttons at the 
				lower right. The data represented by components that are enclosed 
				in the form tag can be sent to the server using the submit tag. 
				Each form component, such as checkbox, combobox or radiogroup must 
				have a name. The data is submitted as name-value pairs, using the 
				name and value of the component.
			</help>
			<parameter name="inset_bottom" type="Any" required="false">
				<help>The bottom inset for content appearing within form.</help>
				<values />
			</parameter>
			<parameter name="inset_left" type="Any" required="false">
				<help>The left inset for content appearing within form.</help>
				<values />
			</parameter>
			<parameter name="inset_right" type="Any" required="false">
				<help>The right inset for content appearing within form.</help>
				<values />
			</parameter>
			<parameter name="inset_top" type="Any" required="false">
				<help>The top inset for content appearing within form.</help>
				<values />
			</parameter>
			<parameter name="spacing" type="Any" required="false">
				<help>Vertical space between content and button area. If forms 
					height is specified, the button area will be flush against the 
					form's bottom right corner (adjusted by any layout that the 
					form has).</help>
				<values />
			</parameter>
			<!-- base form -->
			&baseform;
		</tag>
		
		<!-- FRAME -->
		<tag name="frame" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A frame of a multi-frame resource.
				The fram> tag is used to define a single frame of a multi-frame 
				resource. A multi-frame resource contains several images which can 
				be toggled among by script commands.</help>
			<parameter name="name" type="String" required="false">
				<help>The name of a variable that will be set to this object when 
					the application is started. If this element is directly 
					within a canvas or library element, the global variable and 
					the canvas property with this name will be set to this object. 
					If this element is within another object, that object's 
					property with this name will be set to this object.</help>
				<values/>
			</parameter>
			<parameter name="src" type="String" required="false">
				<help>The path of a file that contains the source for this 
					object.</help>
				<values/>
			</parameter>
		</tag>
		
		<!-- === GRID === -->
		<tag name="grid" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Presents a grid backed by a datasource.
				JavaScript: grid Extends Basegrid 
				A grid is be used to present data in a dataset. Although it can be 
				configured using gridcolumn and gridtext, by default it will 
				present an editable field either for each attribute in the first 
				data node in the grid.</help>
			<parameter name="showhscroll" type="boolean" required="false">
				<help>If false, the grid will never show a horizontal scrollbar, 
					even if the rows are wider than the grid.</help>
				<values>
					<value option="true"/>
					<value option="false"/>
				</values>
			</parameter>
			<!-- === BASE GRID === -->
			&basegrid;
		</tag>
		
		<!-- === GRID COLUMN === -->
		<tag name="gridcolumn" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Declares a column in a grid.
				JavaScript: gridcolumn Extends Basegridcolumn 
				The gridcolumn class can be used to declare a column in a grid with 
				the standard column header look without specifying exactly what goes 
				inside the column. This can be useful for embedding other components 
				within a grid.
			</help>
			&gridcolumn;
		</tag>
		
		<!-- === GRID TEXT === -->
		<tag name="gridtext" creator="&color_norm;" single="false" xmlstyle="true">
			<help>An abstract column in a grid.
				JavaScript: basegridcolumn Extends Basecomponent 
				basegridcolumn can be used in basegrids or grids to customize the 
				look of both the column header and the row contents for that column. 
				In cases where a standard column header look is desired, but the 
				contents may vary, use gridcolumn.
			</help>
			<parameter name="editable" type="boolean" required="false">
				<help>If set to false, the field will not be editable.</help>
				<values>
					<value option="true"/>
					<value option="false"/>
				</values>
			</parameter>
			<!-- === GRID COLUMN === -->
			&gridcolumn;
		</tag>
		
		<!-- === HSCROLLBAR === -->
		<tag name="hscrollbar" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Provides a horizontal scrollbar.
				JavaScript: hscrollbar Extends Basescrollbar 
				A scrollbar manipulates the x or y position of a target view that 
				is clipped by its parent, creating a scrolling effect when the user 
				clicks up/down arrows, clicks on the scroll track or drags the 
				thumb.</help>
			<parameter name="disabledbgcolor" type="Any" required="false">
				<help>If this is defined, it will be used as the scrollbar's 
					background color when it is disabled. If not provided, the 
					scrollbar will use the bgcolor of its closest parent that has 
					a bgcolor defined.</help>
				<values />
			</parameter>
			<!-- === BASE SCROLL BAR === -->
			&basescrollbar;
		</tag>
		
		<!-- == i == -->
		<tag name="i" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Italic text.
				HTML italic character markup. This tag can only occur inside XHTML 
				text containers such as text and button.</help>
		</tag>
		
		<!-- == include == -->
		<tag name="include" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Includes code from other files.
				The include tag is used to include source code contained in another 
				file. See the Guide for a complete discussion. Also see the library
				tag.</help>
			<parameter name="href" type="URL" required="false">
				<help>A reference to a target file whose content is included in the 
					application that contains this include element.</help>
				<values />
			</parameter>
			<parameter name="type" type="String" required="false">
				<help>If this attribute has the value text, the content of the 
					target file is included as text. Otherwise,it is read as XML.</help>
				<values>
					<value option="text"/>
					<value option="xml"/>
				</values>
			</parameter>
		</tag>
		
		<!-- inputtext -->
		<tag name="inputtext" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The basic input-text element.
				JavaScript: LzInputText Extends LzAbstractText 
				This tag creates an area of the canvas that the user can use to 
				edit text. It is equivalent to the HTML input type="text", input 
				type="password", and textarea tags.</help>
			<parameter name="label" type="String" required="false">
				<help></help>
				<values/>
			</parameter>
			<parameter name="multiline" type="boolean" required="false">
				<help>If true, the text field will automatically wrap long lines of 
					text at the right margin, and allow the user to press enter on 
					their keyboard to add a line break to the text. The default for 
					this attribute is false.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="password" type="boolean" required="false">
				<help>If true, the input text field acts like a password input 
					field; any text typed in appears as "****" characters in the 
					current font.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="resizable" type="boolean" required="false">
				<help>If true, this text field can be dynamically resized at runtime.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="resize" type="boolean" required="false">
				<help>If true, the width of the text field will be recomputed each 
					time setText() is called, so that the text view is exactly as 
					wide as the width of the widest line.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="selectable" type="boolean" required="false">
				<help>If true, the text is selectable</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="text" type="String" required="false">
				<help>The text to display in this text field.</help>
				<values/>
			</parameter>
			&view;
		</tag>
		
		<!-- rpc -->
		<tag name="rpc" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Remote procedure calls.
				JavaScript: rpc Extends Node 
				The rpc tag is the abstract base class for RPC classes. Subclasses 
				must implement the load() method, which is responsible for creating 
				the proxy object. The proxy object contains a set of function stubs 
				that invoke a remote function (or procedure) over the network. It's 
				up to the caller of the stub function to know what parameters need 
				to be passed in by looking at what the backend remote function 
				expects. If calling a JavaRemoting (javarpc) function, looking at 
				the associated Java API will be necessary. If calling a SOAP (soap) 
				function, the developer will need to look at the corresponding 
				operation in a WSDL file.</help>
			&rpc;
		</tag>
		
		<!-- javarpc -->
		<tag name="javarpc" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Call remote server java methods.
				JavaScript: javarpc Extends RPC
				JavaRPC is a feature that allows server-side Java objects and 
				methods to be accessed from a client application. JavaRPC is part 
				of the Laszlo RPC family and shares similar APIs with SOAP and 
				XML-RPC. See the RPC chapter and JavaRPC for in the Developer's 
				Guide for details.</help>
			<parameter name="attributename" type="String" required="false">
				<help>Attribute name of server remote object. Name or attributename 
					must be set when scope is 'session' and 'webapp'. Default is 
					the name of this object.</help>
				<values/>
			</parameter>	
			<parameter name="classname" type="String" required="false">
				<help>The remote class name associated with the remote object. This 
					must be set if creating the remote object. If loading the 
					object, the classname will be set during onload.</help>
				<values/>
			</parameter>
			<parameter name="createargs" type="Any" required="false">
				<help>Used if loadoption='loadcreate' or loadoption='create'. 
					Arguments to construct remote object with. The value passed in 
					must be an array, e.g., [1, 'mystring', 1.45]. Default is null.
				</help>
				<values/>
			</parameter>
			<parameter name="loadoption" type="String" required="false">
				<help>One of 'loadcreate', 'loadonly', or 'create'. 'Loadcreate' 
					tries to load javarpc object if it exists in the server, else 
					it creates it before loading. 'Loadonly' will only load object 
					if it exists, else an error is returned. 'Create' will always 
					create the object in the server. Default is 'loadcreate'.
				</help>
				<values>
					<value option="loadcreate"/>
					<value option="loadonly"/>
					<value option="create"/>
				</values>
			</parameter>
			<parameter name="scope" type="Any" required="false">
				<help>One of 'session', 'webapp', or 'none' to set the scope of the 
					remote object. This attribute must be set before creating or 
					loading the object. If scope is 'session' or 'webapp', name or 
					attributename must be set.
				</help>
				<values>
					<value option="session"/>
					<value option="webapp"/>
					<value option="none"/>
				</values>
			</parameter>
			&rpc;
		</tag>
		
		<!-- library -->
		<tag name="library" creator="&color_norm;" single="false" xmlstyle="true">
			<help>This tag marks the root element of a library file.
				The library tag defines the root element of a library file. An 
				application can use the include tag to include the code in a 
				library file.</help>
		</tag>
		
		<!-- list item -->
		<tag name="listitem" creator="&color_norm;" single="false" xmlstyle="true">
			<help>a listitem is an element of a list
				JavaScript: listitem Extends Baselistitem
				A listitem is an element with a value that is contained within a 
				list. As with baselistitem, the selected attribute will be true when 
				selected.</help>
			&baselistitem;
		</tag>
		
		<!-- menu -->		
		<tag name="menu" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A pull-down menu that can be used within a menubar, a menuitem or 
				any other view.
				JavaScript: menu Extends Basecomponent
				The menu tag creates a menu that floats above all other views when 
				activated. If a menu is a subview of a menubar, then it will create 
				a "menubutton" in the menubar with the its text attribute equal to 
				that of the menu's. This "menubutton" inherits its properties from 
				button.</help>
			<parameter name="attach" type="String" required="false">
				<help>a string to indicate how the floating part of the menu 
					attaches to the menubutton or menuitem. 
					Possible values are: 'top', 'bottom', 'left', and 'right'</help>
				<values>
					<value option="top"/>
					<value option="bottom"/>
					<value option="left"/>
					<value option="right"/>
				</values>
			</parameter>
			<parameter name="opened" type="boolean" required="false">
				<help>a boolean indicating whether or not the menu is in opened</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			&basecomponent;
		</tag>
		
		<!-- menu bar -->		
		<tag name="menubar" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A menubar that contains menus.
				JavaScript: menubar Extends Basecomponent
				The menubar tag creates a menubar that can be placed within any 
				view, but is most commonly found within a window. By default, a 
				menubar adjusts to the width of its parent unless otherwise directed. 
				Within a window a menubar has its own placement="menubar" so that 
				it lives above the contents of the window.</help>
			&basecomponent;
		</tag>
		
		<!-- textlistitem -->
		<tag name="textlistitem" creator="&color_norm;" single="false" xmlstyle="true">
			<help>a textlistitem extends listitem and provides text display
				JavaScript: textlistitem Extends Listitem
				A textlistitem is a listitem which displays text. This is the most 
				common form of a listitem, and is the default listitem for 
				comboboxs, menus, lists, and floatinglists.</help>
			&textlistitem;
		</tag>
		
		<!-- menuitem -->
		<tag name="menuitem" creator="&color_norm;" single="false" xmlstyle="true">
			<help>An item in a pull-down menu.
				JavaScript: menuitem Extends Textlistitem
				The menuitem tag provides a menu item within the menu tag. To 
				associate a set of key commands with a menuitem, create a LzCommand 
				object with an execution script (onselect="expression"), and then 
				set the command attribute of the menuitem equal to the reference of 
				that LzCommand object.</help>
			<parameter name="command" type="Function" required="false">
				<help>the command object assigned to be executed when this menuitem 
					is selected</help>
				<values/>
			</parameter>
			&textlistitem;
		</tag>
		
		<!-- menuseparator -->
		<tag name="menuseparator" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A horizontal separator for pull-down menus.
				JavaScript: menuseparator Extends Basecomponent
				The menuseparator tag provides a horizontal separator for pull-down 
				menus. This tag must reside within a menu tag.
			</help>
			<parameter name="xinset" type="Numeric" required="false">
				<help>the number of pixels to inset the menuseparartor from the 
					sides of the menu</help>
				<values/>
			</parameter>
			&basecomponent;
		</tag>
		
		<!-- method -->
		<tag name="method" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Attaches a function or event handler to an object or class.
				Attaches a method to the object that contains this element. The 
				method must have either a name or event attribute.
				If the method has a name attribute, it defines a method that can be 
				invoked from JavaScript with this name.</help>
			<parameter name="args" type="String" required="false">
				<help>The parameter names of this method. The value of this 
					attribute is a comma-separated list of JavaScript identifiers.</help>
				<values/>
			</parameter>
			<parameter name="event" type="String" required="false">
				<help>The name of the event that this method is invoked in response 
					to.</help>
				<values/>
			</parameter>
			<parameter name="name" type="String" required="true">
				<help>The name of a variable that will be set to this object when 
					the application is started. If this element is directly within 
					a canvas or library element, the global variable and the canvas 
					property with this name will be set to this object. If this 
					element is within another object, that object's property with 
					this name will be set to this object.</help>
				<values/>
			</parameter>
			<parameter name="reference" type="String" required="false">
				<help>If this attribute is present, it is a JavaScript expression 
					that evaluates to an object. The code in this method executes 
					when this object sends the event named by the event attribute. 
					This attribute may be present only if the event attribute is 
					present too.</help>
				<values/>
			</parameter>
		</tag>
		
		<!-- multistatebutton -->
		<tag name="multistatebutton" creator="&color_norm;" single="false" xmlstyle="true">
			<help>a button with multiple states, such as a toggle button
				JavaScript: multistatebutton Extends Basebutton
				A multistatebutton is an extension of the basebutton class to 
				address the more general class of buttons that can have multiple 
				states, and where each state has it own mouseup, mouseover, and 
				mousedown images. Like the basebutton class, the construction of a 
				multistatebutton starts with a multiframe resource.</help>
			<parameter name="maxstate" type="Numeric" required="false">
				<help>the largest number allowed for the value of statenum, 
					default: 0</help>
				<values/>
			</parameter>
			<parameter name="statelength" type="Numeric" required="false">
				<help>the number of frames in a state, default: 3</help>
				<values/>
			</parameter>
			<parameter name="statenum" type="Numeric" required="false">
				<help>the current state, default: 0</help>
				<values/>
			</parameter>
			&basebutton;
		</tag>
		
		<!-- p -->
		<tag name="p" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Paragraph.
				An HTML paragraph. This tag only occur inside XHTML text such as text.
			</help>
		</tag>
		
		<!-- param -->
		<tag name="param" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Param tag for remotecall.
				JavaScript: param Extends Node
				Tag to declaratively set parameter values for remotecall. If a 
				getValue method is declared in the body of remotecall, use its 
				return as value for paramter. If both getValue method and value 
				attribute are set in param, getValue wins.</help>
			<parameter name="value" type="String" required="false">
				<help>Value to use for paramter. A getValue() method can be declared 
					inside param to use its return as the parameter value. If both 
					value attribute and getValue method are declared, param will 
					use getValue().</help>
				<values/>
			</parameter>
			&node;
		</tag>
		
		<!-- pre -->
		<tag name="pre" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Preformatted text.
				An HTML preformatted text region. Whitespace and line breaks within 
				this element are preserved.
			</help>
		</tag>
		
		<!-- radio button -->
		<tag name="radiobutton" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The radio tag provides a simple radio button.
				JavaScript: radiobutton Extends Baselistitem
				The radiobutton class provides a simple two-state button with a 
				text label, for use in radiogroup.
				See radiogroup for details on use.
			</help>
			&baselistitem;
		</tag>
		
		<!-- radiogroup -->
		<tag name="radiogroup" creator="&color_norm;" single="false" xmlstyle="true">
			<help>radio group enables a one-of-many selection
				JavaScript: radiogroup Extends Baselist
				The radiogroup component encloses a list of radiobuttons. It ensures 
				that a single item is selected at a time. Initially it will select 
				the first item in a group if none is set to be selected. By default 
				the radio buttons are spaced vertically.</help>
			<parameter name="text" type="String" required="false">
				<help></help>
				<values/>
			</parameter>
		</tag>
		
		<!--remotecall-->
		<tag name="remotecall" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A class to use rpc methods declaratively.
				JavaScript: remotecall Extends Node
				The remotecall element allows for a more declarative style approach 
				to using RPC functions. Calling function stubs will generally result 
				in your code looking very scripty.
				Remotecall requires the funcname attribute to be set. Funcname 
				refers to the remote function name. By default, the name of the 
				remotecall is the same as funcname unless explicitly set to 
				something else. Multiple remotecalls can refer to the same funcname
				, but remotecall names must be unique within the same element 
				context.</help>
			<parameter name="dataobject" type="String" required="false">
				<help>If an LzDataset or an LzDataElement is set, return values will 
					be mapped into the dataobject.</help>
				<values/>
			</parameter>
			<parameter name="funcname" type="String" required="false">
				<help>Name of remote function this remotecall refers.</help>
				<values/>
			</parameter>
			<parameter name="ondata" type="Function" required="false">
				<help>This event is triggered when data is returned from a remote 
					method.</help>
				<values/>
			</parameter>
			<parameter name="onerror" type="Function" required="false">
				<help>This event is triggered when an error occurs.</help>
				<values/>
			</parameter>
			<parameter name="remotecontext" type="Any" required="false">
				<help>If set, this is the remote object context in which funcname 
					is run from.</help>
				<values/>
			</parameter>
			&node;
		</tag>
		
		<!-- resizelayout -->
		<tag name="resizelayout" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A layout with fixed and stretchable views.
				JavaScript: resizelayout Extends Layout
				resizelayout extends LzLayout, and therefore is responsible for 
				arranging a set of views. Like simplelayout, resizelayout positions 
				a set of views vertically or horizontally depending on the axis 
				specified. The difference is that resizelayout can also stretch 
				views.</help>
			<parameter name="axis" type="String" required="false">
				<help>The axis in which this layout operates either 'x' or 'y'.</help>
				<values>
					<value option="x" />
					<value option="y" />
				</values>
			</parameter>
			<parameter name="spacing" type="Numeric" required="false">
				<help>A pixel amount to use between each view in the layout</help>
				<values/>
			</parameter>
			&layout;
		</tag>
		
		<!-- resizestate -->
		<tag name="resizestate" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A standard resize behavior.
				JavaScript: resizestate Extends State
				resizestate can be used to change the width and height of a view in 
				response to the movement of the mouse.</help>
			<parameter name="xroffset" type="Numeric" required="false">
				<help>the x offset from the mouse</help>
				<values/>
			</parameter>
			<parameter name="yroffset" type="Numeric" required="false">
				<help>the y offset from the mouse</help>
				<values/>
			</parameter>
			&state;
		</tag>
		
		<!-- resource -->
		<tag name="resource" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A tag that defines a media object that can be associated with 
				a view.
				This tag defines a media object, that can be presented within a view. 
				A media object is an image, movie, animation, or sound clip. This 
				tag imports the object into the application, and binds it to a 
				string which can be used within a view.</help>
			<parameter name="name" type="String" required="false">
				<help>The name of a variable that will be set to this object when 
					the application is started. If this element is directly within a 
					canvas or library element, the global variable and the canvas 
					property with this name will be set to this object. If this 
					element is within another object, that object's property with 
					this name will be set to this object.</help>
				<values/>
			</parameter>
			<parameter name="src" type="URL" required="false">
				<help>The path of a file that contains the source for this object.</help>
				<values/>
			</parameter>
		</tag>
		
		<!-- reverselayout -->
		<tag name="reverselayout" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A layout for arranging siblings vertically or horizontally in 
				reverse order.
				JavaScript: reverselayout Extends Layout
				reverselayout is just like simplelayout, except that the order of 
				the views it keeps is reversed (bottom to top, or right to left).</help>
			<parameter name="axis" type="String" required="false">
				<help>The axis in which this layout operates. One of 'x' or 'y'.</help>
				<values>
					<value option="x" />
					<value option="y" />
				</values>
			</parameter>
			<parameter name="end" type="boolean" required="false">
				<help>When true (the default), then the layout will push the 
					subviews to the right (or bottom) of the containing view</help>
				<values>
					&value_boolean;
				</values>
			</parameter>  
			<parameter name="inset" type="Numeric" required="false">
				<help>A pixel amount to inset the last view controlled by the layout</help>
				<values/>
			</parameter>
			<parameter name="spacing" type="Numeric" required="false">
				<help>A pixel amount to use between each view in the layout</help>
				<values/>
			</parameter>
			&layout;
		</tag>
		
		<!-- script -->
		<tag name="script" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A block of JavaScript.
				The script element contains JavaScript code that is executed when 
				the application is loaded. This element must be at the canvas level; 
				that is, it cannot be contained within any subordinate tag. If the 
				src attribute is present, it names a JavaScript file whose contents 
				are compiled into the application.</help>
			<parameter name="src" type="URL" required="false">
				<help>The pathname of a JavaScript file. This pathname is resolved 
					relative to the file that contains the script element.
				</help>
				<values/>
			</parameter>
		</tag>
		
		<!-- scrollbar -->
		<tag name="scrollbar" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Provides a standard scrollbar.
				JavaScript: scrollbar Extends Basescrollbar
				By default, the scrollbar tag creates a vertical scrollbar. Setting 
				axis="x" produces a horizontal scrollbar. If you do not specify a 
				scrolltarget, the scrollbars will also control their own layout: 
				the vertical scrollbar will be aligned the the right of the parent 
				view and horizontal scrollbar will be aligned to the bottom.</help>
			<parameter name="disabledbgcolor" type="String" required="false">
				<help>If this is defined, it will be used as the scrollbar's 
					background color when it is disabled. If not provided, the 
					scrollbar will use the bgcolor of its closest parent that has a 
					bgcolor defined.</help>
				<values/>
			</parameter>
			&basescrollbar;
		</tag>
		
		<!-- security -->
		<tag name="security" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Secures Java classes for JavaRPC.
				Java classes used in JavaRPC application must be declared in a 
				security element. Classes not defined in a security element are not 
				allowed to be accessed or instantiated.</help>
		</tag>
		
		<!-- sessionrpc -->
		<tag name="sessionrpc" creator="&color_norm;" single="false" xmlstyle="true">
			<help>SessionRPC object.
				JavaScript: sessionrpc Extends RPC
				A class to get an http session object and invoke its methods.</help>
			&rpc;
		</tag>
		
		<!-- simpleboundslayout -->
		<tag name="simpleboundslayout" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Arranges a set of views along an 'x' or 'y' axis with respect to 
				the bounding rect of the views
				JavaScript: simpleboundslayout Extends Layout
				Views have a bounding rectangle that can be different than the 
				rectangle that is defined by their position, width and height. 
				simpleboundslayout uses that bounding rectangle to lay out a set 
				of views along an x or y axis, similar to simplelayout that uses a 
				views position and its width or height. The example below shows the 
				difference when using simpleboundslayout vs. a simplelayout for a 
				set of three views.</help>
			<parameter name="axis" type="String" required="false">
				<help>The axis in which this layout operates, 'x' or 'y'. Default 
					value is 'y'</help>
				<values>
					<value option="x" />
					<value option="y" />
				</values>
			</parameter>
			<parameter name="spacing" type="Numeric" required="false">
				<help>A pixel amount to use between each view in the layout. 
					Default value is 0</help>
				<values />
			</parameter>
  			&layout;
		</tag>
		
		<!-- simpleinputtext -->
		<tag name="simpleinputtext" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A simple input text field with basic borders.
				JavaScript: simpleinputtext Extends View
				A simpleinputtext is a single-line only input text field with a 
				simple black border on the top and left side of the view.</help>
			<parameter name="bgOpacity" type="Numeric" required="false">
				<help>The opacity for the input background. Default is 1.</help>
				<values/>
			</parameter>
			<parameter name="blurborderOpacity" type="Numeric" required="false">
				<help>The opacity for the border on blur. Default is 1.</help>
				<values/>
			</parameter>
			<parameter name="focusborderOpacity" type="Numeric" required="false">
				<help>The opacity for the border on focus. Default is 1.</help>
				<values/>
			</parameter>
			<parameter name="text" type="String" required="false">
				<help>The text for input. Defaults to empty string. (HTML ok)</help>
				<values/>
			</parameter>
			<parameter name="textOpacity" type="Numeric" required="false">
				<help>The text opacity. Default is 1.</help>
				<values/>
			</parameter>
			&view;
		</tag>
		
		<!-- simplelayout -->
		<tag name="simplelayout" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A quick layout for arranging siblings vertically or horizontally.
				JavaScript: simplelayout Extends Layout
				simplelayout extends LzLayout, and therefore it is responsible for 
				arranging all of the subviews for the view that it is attached to. 
				The attributes of a view that simplelayout effects are the x and y 
				values. simplelayout places the first subview at (0, 0) and then 
				places each subsequent subview based on the width (or height) of 
				the previous subview, depending on which axis was specified.</help>
			<parameter name="axis" type="String" required="false">
				<help>The axis in which this layout operates. One of 'x' or 'y'.</help>
				<values>
					<value option="x" />
					<value option="y" />
				</values>
			</parameter>
			<parameter name="inset" type="Numeric" required="false">
				<help>A pixel amount to inset the first view controlled by the 
					layout</help>
				<values />
			</parameter>
			<parameter name="spacing" type="Numeric" required="false">
				<help>A pixel amount to use between each view in the layout</help>
				<values />
			</parameter>
			&layout;
		</tag>
		
		<!-- slider -->
		<tag name="slider" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A slider.
				JavaScript: slider Extends Baseslider
				The slider tag creates a slider which allows for easy selection of 
				a single value between a provided range. Options exist for setting 
				the range, showing the range values, showing the selected value 
				while dragged, and showing a fill bar.</help>
			&baseslider;
		</tag>
		
		<!-- soap -->
		<tag name="soap" creator="&color_norm;" single="false" xmlstyle="true">
			<help>SOAP.
				JavaScript: soap Extends RPC
				SOAP (Simple Object Access Prototcol) is used to exchange 
				information in a distributed environment. A typical scenarion 
				involves a SOAP client invoking a client-side function stub to 
				invoke a SOAP web service operation. The SOAP web service then 
				returns data to the client, like stock information or the result to 
				a math function. The SOAP protocol is a work in progress being 
				drafted by the W3C. For the latest SOAP information.</help>
			<parameter name="port" type="String" required="false">
				<help>The SOAP port to use. If not specified, the first SOAP port 
					encountered in the WSDL is used.</help>
				<values/>
			</parameter>
			<parameter name="proto" type="String" required="false">
				<help>The prototypes that can be used to create objects.</help>
				<values/>
			</parameter>
			<parameter name="service" type="String" required="false">
				<help>The SOAP service to fetch. If not specified, the first service 
					encountered in the WSDL is used.</help>
				<values/>
			</parameter>
			<parameter name="wsdl" type="String" required="true">
				<help>Required attribute that specifies WSDL to read for the SOAP 
					object. The value for wsdl should be an href.</help>
				<values/>
			</parameter>
			&rpc;
		</tag>
		
		<!-- splash -->
		<tag name="splash" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Controls the presentation while the application is loading.
				The splash tag controls the presentation while the application is 
				loading.
				If the splash element is present but is empty, a progress bar is 
				displayed while the application is loading. </help>
			<parameter name="persistent" type="boolean" required="false">
				<help>If true, the splash views remain on the canvas after the 
					preload is complete.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
		</tag>
		
		<!-- stableborderlayout -->
		<tag name="stableborderlayout" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Keeps the width of two outer sibling views constant, while 
				stretching the innermost one.
				JavaScript: stableborderlayout Extends Layout
				stableborderlayout extends LzLayout, and is therefore responsible 
				for arranging a set of views. Unlike like most layouts, 
				stableborderlayout only manipulates the first three subviews. All 
				of the other subviews are ignored. stableborderlayout is very 
				similar to simplelayout in that it arranges views vertically or 
				horizontally depending on the axis specified. The difference is 
				that stableborderlayout stretches the second view so that the total 
				combined width (or height) of these three subviews matches the width 
				(or height) of their parent.</help>
			<parameter name="axis" type="String" required="false">
				<help>The axis in which this layout operates. One of 'x' or 'y'.</help>
				<values>
					<value option="x" />
					<value option="y" />
				</values>
			</parameter>
			&layout;
		</tag>
		
		<!-- text -->
		<tag name="text" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The basic text display element.
				JavaScript: LzText Extends LzAbstractText
				This class is used for non-editable text fields (as opposed to 
				tagname inputtext. A text field can be initalized with text content 
				at compile time.</help>
			&text;
		</tag>
		
		<!-- statictext -->
		<tag name="statictext" creator="&color_norm;" single="false" xmlstyle="true">
			<help>text component that uses the default component font and fontsize
				JavaScript: statictext Extends Text
				The statictext tag provides a text field which has a look and feel 
				to match the lz component set, even when the canvas font has been 
				changed. It can accept any text attribute.</help>
			&text;
		</tag>
		
		<!-- style -->
		<tag name="style" creator="&color_norm;" single="false" xmlstyle="true">
			<help>specifies colors used by components
				JavaScript: style Extends Node
				Styles may be defined to establish a consistent "look" for a group 
				of components. There are a number of pre-defined styles. If you 
				don't declare a default style, the Laszlo components will use 
				whitestyle. To specify a different default style, define a style 
				with isdefault="true".</help>
			<parameter name="basecolor" type="String" required="false">
				<help>used for colorizing a component, components will typically 
					use varying shades of this color. Default: offwhite</help>
				<values/>
			</parameter>
			<parameter name="bgcolor" type="String" required="false">
				<help>used for colorizing the backgrounds of content areas, such as 
					the background in tabslider's content, and window's content 
					default: white</help>
				<values/>
			</parameter>
			<parameter name="bordercolor" type="String" required="false">
				<help>used to color the frame of a component for those that have a 
					visual border. Default: gray40 (a medium dark gray)</help>
				<values/>
			</parameter>
			<parameter name="bordersize" type="Numeric" required="false">
				<help>the line width used in those components that have a visual 
					border, default: 1</help>
				<values/>
			</parameter>
			<parameter name="canvascolor" type="String" required="false">
				<help>canvas color, default: null (will use whatever is specified 
					as the canvas bgcolor, default: white)</help>
				<values/>
			</parameter>
			<parameter name="disabledcolor" type="String" required="false">
				<help>used when an item is disabled default: gray30</help>
				<values/>
			</parameter>
			<parameter name="hilitecolor" type="String" required="false">
				<help>used when the background color changes to highlight an item, 
					such as when mouse is over a menu item default: iceblue3</help>
				<values/>
			</parameter>
			<parameter name="isdefault" type="boolean" required="false">
				<help>if true, this style is the default style for components</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="isstyle" type="boolean" required="false">
				<help>this is a style object</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="menuitembgcolor" type="String" required="false">
				<help>background color for menu items, defaults to the 
					'textfieldcolor'</help>
				<values/>
			</parameter>
			<parameter name="selectedcolor" type="String" required="false">
				<help>used when an item is selected, such as in a list default: 
					iceblue4</help>
				<values/>
			</parameter>
			<parameter name="textcolor" type="String" required="false">
				<help>color for text, default: black</help>
				<values/>
			</parameter>
			<parameter name="textdisabledcolor" type="String" required="false">
				<help>used as the text color when a component is disabled default: 
					gray60</help>
				<values/>
			</parameter>
			<parameter name="textfieldcolor" type="String" required="false">
				<help>background color for text areas, default: white</help>
				<values/>
			</parameter>
			<parameter name="texthilitecolor" type="String" required="false">
				<help>used as the text color with 'hilitecolor' to highlight an 
					item, such as when mouse is over a menu item default: iceblue1
				</help>
				<values/>
			</parameter>
			<parameter name="textselectedcolor" type="String" required="false">
				<help>used as the text color with 'selectedcolor' to color the 
					selected item default: iceblue1</help>
				<values/>
			</parameter>
			&node;
		</tag>
		
		<!-- submit -->
		<tag name="submit" creator="&color_norm;" single="false" xmlstyle="true">
			<help>associates a form with a dataset
				JavaScript: submit Extends Node
				Used with form or baseform, the submit tag associates the form with 
				its dataset. See form tag for example code. </help>
			<parameter name="data" type="String" required="false">
				<help>The dataset that specifies the request url, which will also 
					hold the result of the query.</help>
				<values/>
			</parameter>
			<parameter name="error" type="String" required="false">
				<help>Error from most recent response or empty string; cleared to 
					empty string each time a request on the dataset is made. 
					Default: ''</help>
				<values/>
			</parameter>
			<parameter name="status" type="String" required="false">
				<help>Read-only status of data request. Possible values are 'ok', 
					'requesting', and 'error'. Default: 'ok'.</help>
				<values>
					<value option="ok" />
					<value option="requesting" />
					<value option="error" />
				</values>
			</parameter>
			&node;
		</tag>
		
		<!-- swatchview -->
		<tag name="swatchview" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A simple space-filling colored view.
				JavaScript: swatchview Extends View
				A simple view that is filled with a single color. Either 'fgcolor' 
				and 'bgcolor' may be used to set the color of the view. By default 
				it fills the space of the parent with white.</help>
			<parameter name="color" type="String" required="false">
				<help>this is the color that was set (by setting 'bgcolor' or 
					'fgcolor' ), bgcolor may be different if setColorTransform has 
					been called
				</help>
				<values/>
			</parameter>		
			&view;
		</tag>
		
		<!-- VIEW -->
		<tag name="view" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The most basic viewable element. JavaScript: LzView
				Extends Node 
				The "view" is the most basic viewable element in a Laszlo 
				application. Anything that is displayed on the canvas is a view or 
				extends the view class. A view is a rectangle, which can be visible 
				or invisible, and which can contain other views or display 
				"resources" such as images, .swf files, or other supported media. 
				One view controls one displayable resource. The view system is 
				strictly hierarchical; that is, each view  has  a single parent but 
				can have multiple children.</help>
			&view;
		</tag>
		
		<!-- Extends Animatorgroup -->
		<tag name="animator" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Changes the value of another object's attribute over time.
				JavaScript: LzAnimator Extends Animatorgroup 
				Animators change the value of an object's attribute over a specified 
				duration in milliseconds.</help>
			&animatorgroup;
		</tag>
		
		<!-- Extends Node - this kind of sucks because there is a *lot* of
			duplicated items :( -->      
		<tag name="animatorgroup" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Coordinates the behavior of several animators. 
				JavaScript: LzAnimatorGroup Extends Node 
				An LzAnimatorGroup wraps several LzAnimators, and runs them in 
				sequence or simultaneously.</help>
			&animatorgroup;
		</tag>
	  
		<!-- one of the base elements -->
		<tag name="node" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The base class for all Laszlo classes. JavaScript: LzNode
				The LzNode class provides the basic interface for Laszlo objects: 
				parent/child hierarchy, setters, interaction with the instantiator, 
				and reference resolution. New nodes (and subclasses thereof) can be 
				created by new-ing the class, like this:  var mynode= new LzNode( 
				parent , args ); where parent is the parent for the new node, and 
				args is an Object whose name/value pairs are attributes to be set 
				on the new node.</help>
			&node;
		</tag>
		
		<!-- tab -->
		<tag name="tab" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The lz tab used by tabs.
				JavaScript: tab Extends Basetab
				A tab is an LZ tab within basetabsbar or any object that extends 
				this (such as tabsbar).</help>
			<parameter name="padding" type="Numeric" required="false">
				<help>Text padding. Default is 20.</help>
				<values/>
			</parameter>
			&basetab;
		</tag>
		
		<!-- tabelement -->
		<tag name="tabelement" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A tab element view that is opened and closed in conjunction with 
				a tabslider.
				JavaScript: tabelement Extends Basetabelement
				tabelement is a non-visual view contained within a tabslider that 
				opens and closes when directed by a tabslider. In practice, the 
				tabelement class can be extended to create whatever look and feel 
				is desired.</help>
			<parameter name="headerpadding" type="Numeric" required="false">
				<help>Insets the header art on the x-axis. Default is 0.</help>
				<values/>
			</parameter>
			<parameter name="inset_bottom" type="Numeric" required="false">
				<help>The bottom inset for content appearing within a tabelement. 
					Default is the containing tabslider's inset_bottom value.</help>
				<values/>
			</parameter>
			<parameter name="inset_left" type="Numeric" required="false">
				<help>The left inset for content appearing within a tabelement. 
					Default is the containing tabslider's inset_left value.</help>
				<values/>
			</parameter>
			<parameter name="inset_right" type="Numeric" required="false">
				<help>The right inset for content appearing within a tabelement. 
					Default is the containing tabslider's inset_right value.</help>
				<values/>
			</parameter>
			<parameter name="inset_top" type="Numeric" required="false">
				<help>The top inset for content appearing within a tabelement. 
					Default is the containing tabslider's inset_top value.</help>
				<values/>
			</parameter>
			<parameter name="shadowheight" type="Numeric" required="false">
				<help>The height of the shadow. Default is 4.</help>
				<values/>
			</parameter>
			<parameter name="shadowvisible" type="boolean" required="false">
				<help>Boolean to set the shadow of this tabelement. Default is true.</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			<parameter name="text_x" type="Numeric" required="false">
				<help>The x position of the text field in the header area. Default 
					is 4.</help>
				<values/>
			</parameter>
			<parameter name="text_y" type="Numeric" required="false">
				<help>The y position of the text field in the header area. Default 
					is 4.</help>
				<values/>
			</parameter>
			&basetabelement;
		</tag>
		
		<!-- tabpane -->
		<tag name="tabpane" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A tabpane houses content to be shown within a tabs component when 
				its correlated tab is selected.
				JavaScript: tabpane Extends Basetabpane
				tabpane is the visual container for content in basetabs. The 
				difference between this class and basetabpane is that tabpane has a 
				background swatchview that is set by whatever the default style is.</help>
			<parameter name="tabwidth" type="Numeric" required="false">
				<help>Width of the tab associated with this tabpane. If not set, 
					the tab will resize itself to fit.</help>
				<values/>
			</parameter>
			&basetabpane;
		</tag>
		
		<!-- tabs -->
		<tag name="tabs" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The tabs class takes tabpanes, and provides a tab for each one.
				JavaScript: tabs Extends Basetabs
				The tabs component contains a row of tabs that control the 
				visibility of a stack of tabpanes. When a tabpane is added to a 
				tabs component, a corresponding tab is created for that tabpane. The 
				text which shows up in the tab is derived from the text attribute of 
				the tabpane.</help>
			<parameter name="tabalign" type="String" required="false">
				<help>Align the set of tabs within the dimensions of the "tabs" 
					container ("left", "center", "right"). Defaults to "left".</help>
				<values>
					<value option="left"/>
					<value option="center"/>
					<value option="right"/>
				</values>
			</parameter>
			<parameter name="tabspacing" type="Numeric" required="false">
				<help>Spacing between the tabs. Defaults to -15 so tabs overlap.</help>
				<values/>
			</parameter>
			&basetabs;
		</tag>
		
		<!-- tabsbar -->
		<tag name="tabsbar" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The lz tabsbar class for laying out tab items.
				JavaScript: tabsbar Extends Basetabsbar
				A tabsbar is a container that uses a default x-axis simplelayout 
				with a spacing of -15 to lay out its tab children (which have extra 
				spacing on each side) so they overlap.</help>
			<parameter name="spacing" type="Numeric" required="false">
				<help>Spacing between tab items. Default is 0.</help>
				<values/>
			</parameter>
			&baselist;
		</tag>
		
		<!-- tabscontent -->
		<tag name="tabscontent" creator="&color_norm;" single="false" xmlstyle="true">
			<help>The tabs content container for tabpanes.
				JavaScript: tabscontent Extends Basetabscontent
				tabscontent houses a stack of tabpanes for tabs, which has a visual 
				border and uses the default style's background color. When a tabpane 
				is added to a tabs, its contents are actually placed in tabscontent.</help>
			&basecomponent;
		</tag>
		
		<!-- tabslider -->
		<tag name="tabslider" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A Container that animates and coordinates the sliding of 
				Tabelements.
				JavaScript: tabslider Extends Basetabslider
				A tabslider coordinates the opening and closing of its tabelement 
				contained within its scope. Only one tabelement can be opened at 
				one time. The height of the opened tabelement is determined by the 
				height of the tabslider minus the total height of all the tabelements 
				when they are closed. </help>
			<parameter name="bordercolor" type="String" required="false">
				<help>The border color. Default is constrained to the style value 
					of bordercolor.</help>
				<values/>
			</parameter>
			<parameter name="bordersize" type="Numeric" required="false">
				<help>The size of the border. Default is 1 pixel.</help>
				<values/>
			</parameter>
			&basetabslider;
		</tag>
		
		<!-- tree -->
		<tag name="tree" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A tree control.
				JavaScript: tree Extends Basetree
				A tree provides a hierarchical view of data. Each node is 
				represented by an expander resource, an icon resource, and a label. 
				A tree can be specified lexically or through data replication .</help>
			<parameter name="expander" type="String" required="false">
				<help>The resource for the expanding icon: frame 1 (closed), 
					frame 2 (opened), frame 3 (leaf). Default is lztree_arrow_rsc 
					defined in lz/tree.lzx.</help>
				<values/>
			</parameter>
			<parameter name="icon" type="String" required="false">
				<help>The resource for the item icon: frame 1 (closed), frame 2 
					(opened), frame 3 (leaf) Default is lztree_folder_rsc defined 
					in lz/tree.lzx.</help>
				<values/>
			</parameter>
			<parameter name="onactivate" type="Function" required="false">
				<help>Double-clicking on the icon or text triggers this event.</help>
				<values/>
			</parameter>
			&basetree;
		</tag>
		
		<!-- u -->
		<tag name="u" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Underlined text.
				HTML underlined character markup. This tag can only occur inside 
				XHTML text containers such as text and button.</help>
		</tag>
		
		<!-- vscrollbar -->
		<tag name="vscrollbar" creator="&color_norm;" single="false" xmlstyle="true">
			<help>Provides a vertical scrollbar.
				JavaScript: vscrollbar Extends Basescrollbar
				This tag creates a vertical scrollbar. If you do not specify a 
				scrolltarget the scrollbar will automatically be aligned to the 
				right and size its height to its parent's height. It is expected 
				that the parent view be smaller than the scrolltarget and set 
				clip=true. The scrolling effect is produced by moving the 
				scrolltarget while its visible region is clipped by the parent view.</help>
			<parameter name="disabledbgcolor" type="String" required="false">
				<help>If this is defined, it will be used as the scrollbar's 
					background color when it is disabled. If not provided, the 
					scrollbar will use the bgcolor of its closest parent that has a 
					bgcolor defined.</help>
				<values/>
			</parameter>
			&basescrollbar;
		</tag>
		
		<!-- webapprpc -->
		<tag name="webapprpc" creator="&color_norm;" single="false" xmlstyle="true">
			<help>WebappRPC object.
				JavaScript: webapprpc Extends RPC
				A class to get an http web application object and invoke its methods.
			</help>
			&rpc;
		</tag>
		
		<!-- window -->
		<tag name="window" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A window.
				JavaScript: window Extends Windowpanel
				The window tag creates a floating view that may be moved and 
				optionally resized by the user. Set the closeable attribute to 
				true in order to show a window close button.</help>
			<parameter name="resizable" type="boolean" required="false">
				<help>If true, a resize control will appear in the lower-right 
					corner, allowing the user to resize the window. Default: false.
				</help>
				<values>
					&value_boolean;
				</values>
			</parameter>
			&windowpanel;
		</tag>
		
		<!-- wrappinglayout -->
		<tag name="wrappinglayout" creator="&color_norm;" single="false" xmlstyle="true">
			<help>A layout for arranging siblings in multiple lines.
				JavaScript: wrappinglayout Extends Layout
				wrappinglayout extends LzLayout, and is therefore responsible for 
				arranging all of the subviews for the view that it is attached to. 
				wrappinglayout affects the position of its sibling views, in rows or 
				columns depending on the axis specified.</help>
			<parameter name="axis" type="String" required="false">
				<help>The primary axis for wrapping.</help>
				<values/>
			</parameter>
			<parameter name="duration" type="Numeric" required="false">
				<help>If given, a number of miliseconds to use to animate the views 
					in to place.</help>
				<values/>
			</parameter>
			<parameter name="spacing" type="Numeric" required="false">
				<help>A pixel amount to use between the views controlled by the 
					layout in both axes. By default, both xspacing and yspacing are 
					set to this value.</help>
				<values/>
			</parameter>
			<parameter name="xinset" type="Numeric" required="false">
				<help>A pixel amount to offset the first view controlled by the 
					layout in x axis</help>
				<values/>
			</parameter>
			<parameter name="xspacing" type="Numeric" required="false">
				<help>A pixel amount to use between the views controlled by the 
					layout in the x axis.</help>
				<values/>
			</parameter>
			<parameter name="yinset" type="Numeric" required="false">
				<help>A pixel amount to offset the first view controlled by the 
					layout in y axis</help>
				<values/>
			</parameter>
			<parameter name="yspacing" type="Numeric" required="false">
				<help>A pixel amount to use between the views controlled by the 
					layout in the y axis.</help>
				<values/>
			</parameter>
			&layout;
		</tag>
		
		<!-- xmlrpc -->
		<tag name="xmlrpc" creator="&color_norm;" single="false" xmlstyle="true">
			<help>XML-RPC implementation.
				JavaScript: xmlrpc Extends RPC
				XML-RPC is simple spec that describes how to invoke a remote 
				operation using XML over HTTP. Laszlo XML-RPC is part of Laszlo RPC 
				and shares many of the same APIs and concept. Laszlo RPC includes 
				SOAP and JavaRPC. For more information on XML-RPC, go to XML-RPC.com 
			</help>
			<parameter name="service" type="String" required="true">
				<help>(Required) XML-RPC service URL. The URL must be http.	</help>
				<values/>
			</parameter>
			&rpc;
		</tag>
	</tags>
	
	<functions />
	<scopes />
</dictionary>