<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>About character encodings</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001200.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001202.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>About character encodings</h1>
<p>A <i>character encoding</i> maps each character in a character set to a numeric value that can be represented by a computer. These numbers can be represented by a single byte or multiple bytes. For example, the ASCII encoding uses seven bits to represent the Latin alphabet, punctuation, and control characters. </p>
<p>You use Japanese encodings, such as Shift-JIS, EUC-JP, and ISO-2022-JP, to represent Japanese text. These encodings can vary slightly, but they include a common set of approximately 10,000 characters used in Japanese.</p>
<p>The following terms apply to character encodings:</p>
<p><strong>SBCS</strong>&#160;Single-byte character set; a character set encoded in one byte per character, such as ASCII or ISO 8859-1.</p>
<p><strong>DBCS</strong>&#160;Double-byte character set; a method of encoding a character set in no more than two bytes, such as Shift-JIS. Many character encoding schemes that are referred to as double-byte, including Shift-JIS, allow mixing of single-byte and double-byte encoded characters. Others, such as UCS-2, use two bytes for all characters.</p>
<p><strong>MBCS&#160;</strong>Multiple-byte character set; a character set encoded with a variable number of bytes per character, such as UTF-8.</p>
<p>The following table lists some common character encodings; however, there are many additional character encodings that browsers and web servers support:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Encoding
    </th>
    <th>
Type
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>ASCII</p>
    </td>
    <td>
<p>SBCS</p>
    </td>
    <td>
<p>7-bit encoding used by English and Indonesian Bahasa languages</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Latin-1<br />(ISO 8859-1)</p>
    </td>
    <td>
<p>SBCS</p>
    </td>
    <td>
<p>8-bit encoding used for many Western European languages</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Shift_JIS</p>
    </td>
    <td>
<p>DBCS</p>
    </td>
    <td>
<p>16-bit Japanese encoding </p>
<p>Note: You must use an underscore character (_), not a hyphen (-) in the name in CFML attributes.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>EUC-KR</p>
    </td>
    <td>
<p>DBCS</p>
    </td>
    <td>
<p>16-bit Korean encoding</p>
    </td>
  </tr>
  <tr>
    <td>
<p>UCS-2</p>
    </td>
    <td>
<p>DBCS</p>
    </td>
    <td>
<p>Two-byte Unicode encoding</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>UTF-8</p>
    </td>
    <td>
<p>MBCS</p>
    </td>
    <td>
<p>Multibyte Unicode encoding. ASCII is 7-bit; non-ASCII characters used in European and many Middle Eastern languages are two-byte; and most Asian characters are three-byte </p>
    </td>
  </tr>
</table>

<p>The World Wide Web Consortium maintains a list of all character encodings supported by the Internet. You can find this information at www.w3.org/International/O-charset.html.</p>
<p>Computers often must convert between character encodings. In particular, the character encodings most commonly used on the Internet are not used by Java or Windows. Character sets used on the Internet are typically single-byte or multiple-byte (including DBCS character sets that allow single-byte characters). These character sets are most efficient for transmitting data, because each character takes up the minimum necessary number of bytes. Currently, Latin characters are most frequently used on the web, and most character encodings used on the web represent those characters in a single byte. </p>
<p>Computers, however, process data most efficiently if each character occupies the same number of bytes. Therefore, Windows and Java both use double-byte encoding for internal processing. </p>
<h2><a name="wp1194248"></a>The Java Unicode character encoding</h2>
<p>ColdFusion&#160;MX uses the Java Unicode Standard for representing character data internally. This standard corresponds to UCS-2 encoding of the Unicode character set. The Unicode character set can represent many languages, including all major European and Asian character sets. Therefore, ColdFusion&#160;MX can receive, store, process, and present text from all languages supported by Unicode. </p>
<p>The Java Virtual Machine (JVM) that is used to processes ColdFusion pages converts between the character encoding used on a ColdFusion page or other source of information to UCS-2. The page or data encodings that ColdFusion supports depend on the specific JVM, but include most encodings used on the web. Similarly, the JVM converts between its internal UCS-2 representation and the character encoding used to send the response to the client.</p>
<p>By default, ColdFusion&#160;MX uses UTF-8 to represent text data sent to a browser. UTF-8 represents the Unicode character set using a variable-length encoding. ASCII characters are sent using a single byte. Most European and Middle Eastern characters are sent as two bytes, and Japanese, Korean, and Chinese characters are sent as three bytes. One advantage of UTF-8 is that it sends ASCII character set data in a form that can be recognized by systems designed to process only single-byte ASCII characters, while it is flexible enough to handle multiple-byte character representations. </p>
<p>While the default format of text data returned by ColdFusion is UTF-8, you can have ColdFusion return a page to any character set supported by Java. For example, you can return text using the Japanese language Shift-JIS character set. Similarly, ColdFusion can handle data that is in many different character sets. For more information, see <a href="00001205.htm#1188970">Determining the page encoding of server output</a>. </p>
<h2><a name="wp1219012"></a>Character encoding conversion issues</h2>
<p>Because different character encodings support different character sets, you can encounter errors if your application gets text in one encoding and presents it in another encoding. For example, the Windows Latin-1 character encoding, Windows-1252, includes characters with hexadecimal representations in the range 80-9F, while ISO 8859-1 does not include characters in that range. As a result, under the following circumstances, characters in the range 80-9F, such as the euro symbol (Ã„), are not displayed properly:</p>
<ul>
<li>
   A file encoded in Windows-1252 includes characters in the range 80-9F.
</li>
<li>
   ColdFusion reads the file, specifying the Windows-1252 encoding in the <code>cffile</code> tag.
</li>
<li>
   ColdFusion displays the file contents, specifying ISO-8859 in the <code>cfcontent</code> tag.
</li>
</ul>
<p>Similar issues can arise if you convert between other character encodings; for example, if you read files encoded in the Japanese Windows default encoding and display them using Shift-JIS. To prevent these problems, ensure that the display encoding is the same as the input encoding.</p>


<hr />
<p align="right"><p align="right"><a href="00001200.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001202.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001201.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



