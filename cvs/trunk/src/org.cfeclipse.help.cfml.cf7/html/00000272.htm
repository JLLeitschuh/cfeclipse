<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>cfhttp</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000271.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000273.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>cfhttp</h1>
<h4><a name="wp1632967"></a>Description</h4>
<p>Generates an HTTP request and handles the response from the server. </p>
<h4><a name="wp3319199"></a>Category</h4>
<p><a href="00000206.htm#2460062">Internet Protocol tags</a></p>
<h4><a name="wp1632970"></a>Syntax</h4>
<pre>&lt;cfhttp <br />   url = &quot;server_URL&quot;<br />   port = &quot;port_number&quot;<br />   method = &quot;method_name&quot;<br />   proxyServer = &quot;hostname&quot;<br />   proxyPort = &quot;port_number&quot;<br />   proxyUser = &quot;username&quot;<br />   proxyPassword = &quot;password&quot;<br />   username = &quot;username&quot;<br />   password = &quot;password&quot;<br />   userAgent = &quot;user_agent&quot;<br />   charset = &quot;character encoding&quot;<br />   resolveURL = &quot;yes&quot; or &quot;no&quot;<br />   throwOnError = &quot;yes&quot; or no&quot;<br />   redirect = &quot;yes&quot; or &quot;no&quot;<br />   timeout = &quot;timeout_period&quot;<br />   getasbinary = &quot;yes or no&quot;<br />   multipart = &quot;yes or no&quot;<br />   path = &quot;path&quot;<br />   file = &quot;filename&quot;<br />   name = &quot;queryname&quot;<br />   columns = &quot;query_columns&quot;<br />   firstrowasheaders = &quot;yes&quot; or &quot;no&quot;<br />   delimiter = &quot;character&quot;<br />   textQualifier = &quot;character&quot;<br />   result = &quot;result_name&quot;<br />   <i>cfhttpparam tags [optional for some methods]<br /></i>&lt;/cfhttp&gt;
</pre><h4><a name="wp1887838"></a>See also</h4>
<p><a href="00000273.htm#1100049"><code>cfhttpparam</code></a><code>, </code><a href="00000482.htm#1955092"><code>GetHttpRequestData</code></a><code>, </code><a href="00000259.htm#1800554"><code>cfftp</code></a><code>, </code><a href="00000283.htm#1100581"><code>cfldap</code></a><code>, </code><a href="00000297.htm#2355015"><code>cfmail</code></a><code>, </code><a href="00000311.htm#1101854"><code>cfpop</code></a><code>, </code><a href="00000623.htm#136247"><code>SetEncoding</code></a></p>
<h4><a name="wp2893835"></a>History</h4>
<p>ColdFusion&#160;MX&#160;7: Added the <code>result</code> attribute, which allows you to specify an alternate variable in which to receive a result.</p>
<p>ColdFusion MX&#160;6.1:</p>
<ul>
<li>
   Added support for the following methods: HEAD, PUT, DELETE, OPTIONS, TRACE.
</li>
<li>
   Added <code>multipart</code>, <code>getAsBinary</code>, <code>proxyUser</code>, and <code>proxyPassword</code> attributes.
</li>
<li>
   Changed <code>httpparam</code> behavior: all operations can have <code>httpparam</code> tags.
</li>
<li>
   Added the <code>cfhttp.errorDetail</code> return variable.
</li>
<li>
   Modified response body content types considered to be text.
</li>
<li>
   Changed behavior for multiple headers: multiple headers of the same type are returned in an array.
</li>
<li>
   Added support for HTTPS proxy tunneling.
</li>
<li>
   Fixed bugs in code and documentation.
</li>
</ul>
<p>ColdFusion&#160;MX: </p>
<ul>
<li>
   Added the <code>charset</code> and <code>firstrowasheaders</code> attributes. 
</li>
<li>
   Changed Secure Sockets Layer (SSL) support: ColdFusion uses the Sun JSSE library, which supports 128-bit encryption, to support SSL. 
</li>
</ul>
<h4><a name="wp3447195"></a>Attributes</h4>
<p>The following attributes control the HTTP transaction and can be used for all HTTP methods:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Req/Opt
    </th>
    <th>
Default
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>url</p>
    </td>
    <td>
<p>Req</p>
    </td>
    <td>
<p>Uses the http protocol</p>
    </td>
    <td>
<p>Address of the resource on the server which will handle the request. The URL must include the hostname or IP address.</p>
<p>If you do not specify the transaction protocol (http:// or https://), ColdFusion defaults to http.</p>
<p>If you specify a port number in this attribute, it overrides any <code>port</code> attribute value.</p>
<p>The <code>cfhttpparam</code> tag <code>URL</code> attribute appends query string attribute-value pairs to the URL.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>port</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>80 for http</p>
<p>443 for https</p>
    </td>
    <td>
<p>Port number on the server to which to send the request. A port value in the <code>url</code> attribute overrides this value. </p>
    </td>
  </tr>
  <tr>
    <td>
<p>method</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>GET</p>
    </td>
    <td>
<ul>
<li>
   GET: requests information from the server. Any data that the server requires to identify the requested information must be in the URL or in <code>cfhttp</code> <code>type=&quot;URL&quot;</code> tags.
</li>
<li>
   POST: sends information to the server for processing. Requires one or more <code>cfhttpparam</code> tags. Often used for submitting form-like data.
</li>
<li>
   PUT: requests the server to store the message body at the specified URL. Use this method to send files to the server.
</li>
<li>
   DELETE: requests the server to delete the specified URL.
</li>
<li>
   HEAD: identical to the GET method, but the server does not send a message body in the response. Use this method for testing hypertext links for validity and accessibility, determining the type or modification time of a document, or determining the type of server.
</li>
<li>
   TRACE: requests that the server echo the received HTTP headers back to the sender in the response body. Trace requests cannot have bodies. This method enables the ColdFusion application to see what is being received at the server, and use that data for testing or diagnostic information.
</li>
<li>
   OPTIONS: a request for information about the communication options available for the server or the specified URL. This method enables the ColdFusion application to determine the options and requirements associated with a URL, or the capabilities of a server, without requesting any additional activity by the server.
</li>
</ul>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>proxyServer</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Host name or IP address of a proxy server to which to send the request. </p>
    </td>
  </tr>
  <tr>
    <td>
<p>proxyPort</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>80</p>
    </td>
    <td>
<p>Port number to use on the proxy server. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>proxyUser</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>User name to provide to the proxy server.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>proxyPassword</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Password to provide to the proxy server.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>username</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Use to pass a user name to the target URL for Basic Authentication. Combined with <code>password</code> to form a base64 encoded string that is passed in the Authenticate header. Does not provide support for Integrated Windows, NTLM, or Kerebos authentication.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>password</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Use to pass a password to the target URL for Basic Authentication. Combined with <code>username</code> to form a base64 encoded string that is passed in the Authenticate header. Does not provide support for Integrated Windows, NTLM, or Kerebos authentication.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>userAgent</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>Cold<br />Fusion</p>
    </td>
    <td>
<p>Text to put in the user agent request header. Used to identify the request client software. Can make the ColdFusion application appear to be a browser.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>charset</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>For request: UTF-8</p>
<p>For response: charset specified by response Content- Type header, or UTF-8 if response does not specify charset.</p>
    </td>
    <td>
<p>The character encoding of the request, including the URL query string and form or file data, and the response. The following list includes commonly used values:</p>
<ul>
<li>
   utf-8
</li>
<li>
   iso-8859-1 
</li>
<li>
   windows-1252
</li>
<li>
   us-ascii
</li>
<li>
   shift_jis
</li>
<li>
   iso-2022-jp 
</li>
<li>
   euc-jp
</li>
<li>
   euc-kr
</li>
<li>
   big5
</li>
<li>
   euc-cn
</li>
<li>
   utf-16
</li>
</ul>
<p>For more information character encodings, see <br /><a href="http://www.w3.org/International/O-charset.html" target="mm_window">www.w3.org/International/O-charset.html</a>.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>resolveURL</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>no</p>
    </td>
    <td>
<ul>
<li>
   no: does not resolve URLs in the response body. As a result, any relative URL links in the response body do not work.
</li>
<li>
   yes: resolves URLs in the response body to absolute URLs, including the port number, so that links in a retrieved page remain functional. Applies to these HTML tags:
<ul><li>	- img src</li>
<li>	- a href</li>
<li>	- form action</li>
<li>	- applet code</li>
<li>	- script src</li>
<li>	- embed src</li>
<li>	- embed pluginspace</li>
<li>	- body background</li>
<li>	- frame src</li>
<li>	- bgsound src</li>
<li>	- object data</li>
<li>	- object classid</li>
<li>	- object codebase</li>
<li>	- object usemap</li>
</ul></li>
</ul>
<p>Does not resolve URLs if the <code>file</code> and <code>path</code> attributes are used.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>throwOnError</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>no</p>
    </td>
    <td>
<ul>
<li>
   yes: if the server returns an error response code, throws an exception that can be caught using the <code>cftry</code> and <code>cfcatch</code> or ColdFusion error pages.
</li>
<li>
   no: does not throw an exception if an error response is returned. In this case, your application can use the <code>cfhttp.StatusCode</code> variable to determine if there was an error and its cause.
</li>
</ul>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>redirect</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>yes</p>
    </td>
    <td>
<p>If the response header includes a Location field AND ColdFusion receives a 300-series (redirection) status code, specifies whether to redirect execution to the URL specified in the field: </p>
<ul>
<li>
   yes: redirects execution to the specified page.
</li>
<li>
   no: stops execution and returns the response information in the <code>cfhttp</code> variable, or throws an error if the <code>throwOnError</code> attribute is True.
</li>
</ul>
<p>The <code>cfhttp.responseHeader.Location</code> variable contains the redirection path. ColdFusion follows a maximum of four redirects on a request. If there are more, ColdFusion functions as if <code>redirect =&quot;no&quot;</code>.</p>
<p>Note: The <code>cflocation</code> tag generates an HTTP 302 response with the <code>url</code> attribute as the Location header value.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>timeout</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Value, in seconds, that is the maximum time the request can take. If the timeout passes without a response, ColdFusion considers the request to have failed. </p>
<p>If the client specifies a timeout in the URL search parameter (for example, ?RequestTime=120) ColdFusion uses the lesser of the URL timeout and the <code>timeout</code> attribute value;<code><strong> </strong></code>this ensures that the request times out before, or at the same time as, the page.</p>
<p>If the URL does not specify a timeout, ColdFusion uses the lesser of the Administrator timeout and the <code>timeout</code> attribute value.</p>
<p>If the timeout is not set in any of these, ColdFusion waits indefinitely for the <code>cfhttp</code> request to process.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>getAsBinary</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>no</p>
    </td>
    <td>
<ul>
<li>
   no: if ColdFusion does not recognize the response body type as text, converts it to a ColdFusion object.
</li>
<li>
   Auto: if ColdFusion does not recognize the response body type as text, converts it to ColdFusion Binary type data. 
</li>
<li>
   yes: always converts the response body content into ColdFusion Binary type data, even if ColdFusion recognizes the response body type as text. 
</li>
</ul>
<p>ColdFusion recognizes the response body as text if:</p>
<ul>
<li>
   the header does not specify a content type. 
</li>
<li>
   the content type starts with &quot;text&quot;.
</li>
<li>
   the content type starts with &quot;message&quot;.
</li>
<li>
   the content type is &quot;application/octet-stream&quot;.
</li>
</ul>
<p>If ColdFusion does not recognize the body as text and converts it to an object, but the body consists of text, the <code>cfoutput</code> tag can display it. The <code>cfoutput</code> tag cannot display Binary type data. (To convert binary data to text, use the <a href="00000655.htm#138710">ToString</a> function.)</p>
    </td>
  </tr>
</table>

<p>The following attribute is used with the PUT method to determine how to send data specified with <code>httpparam type=&quot;formField&quot;</code>:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Req/Opt
    </th>
    <th>
Default
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>multipart</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>no</p>
<p>(Sends as multipart only if request includes File type data.)</p>
    </td>
    <td>
<p>Tells ColdFusion to send all data specified by <code>cfhttpparam type=&quot;formField&quot;</code> tags as multipart form data, with a Content-Type of multipart/form-data. By default, ColdFusion sends cfhttp requests that contain only formField data with a Content Type of application/x-www-form-urlencoded. (If the request also includes File type data, ColdFusion uses the multipart/form-data content type for all parts.) </p>
<p>If yes, ColdFusion also sends the request's charset in each Content-Type description. All form field data must be encoded in this character encoding, and ColdFusion does not URLEncode the data. (The field name must be in ISO-88591-1 or ASCII.) Some http parsers, including the one used by previous versions of ColdFusion, ignore the multipart form field character encoding description. </p>
    </td>
  </tr>
</table>

<p>The following attribute allows you to specify the name of the variable in which you would like the results of the operation returned. The name you specify replaces <code>cfhttp</code> as the prefix by which you access the returned variables. For example, if you set the <code>result</code> attribute to <code>myResult</code>, you would access <code>FileContent</code> as <code>#myResult.FileContent#</code>.</p>
<p>The <code>result</code> attribute allows functions or CFCs that are called from multiple pages at the same time to avoid overwriting the results of one call with another. For information about the variables returned by a <code>cfhttp</code> get operation, see <a href="00000272.htm#3460249">Variables returned by a cfhttp get operation</a> in the Usage section.</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Req/Opt
    </th>
    <th>
Default
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>result</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Specifies the name of the variable in which you want the result returned.</p>
    </td>
  </tr>
</table>

<p>The following attributes tell ColdFusion to put the HTTP response body in a file. You can put the response body in a file for GET, POST, PUT, DELETE, OPTIONS, and TRACE methods, but it is generally not useful with the DELETE or OPTIONS method.</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Req/Opt
    </th>
    <th>
Default
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>path</p>
    </td>
    <td>
<p>Required if <code>file</code> is specified.</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Tells ColdFusion to save the HTTP response body in a file. Contains the absolute path to the directory in which to store the file. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>file</p>
    </td>
    <td>
<p>Required if <code>path</code> is specified and not a GET method</p>
    </td>
    <td>
<p>See Description</p>
    </td>
    <td>
<p>Name of the file in which to store the response body. </p>
<p>For a GET operation, the default is the file requested in the URL, if there is one. For example, if the URL in a GET method is http:www.myco.com/test.htm, the default file is test.htm. </p>
<p>Do not specify the path to the directory in this attribute; use the <code>path</code> attribute.</p>
    </td>
  </tr>
</table>

<p>The following attributes tell ColdFusion to convert the HTTP response body into a ColdFusion query object. They can be used with the GET and POST methods only.</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Req/Opt
    </th>
    <th>
Default
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>name</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Tells ColdFusion to create a query object with the given name from the returned HTTP response body.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>columns</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>First row of response contains column names.</p>
    </td>
    <td>
<p>The column names for the query, separated by commas, with no spaces. Column names must start with a letter. The remaining characters can be letters, numbers, or underscore characters (_).</p>
<p>If there are no column name headers in the response, specify this attribute to identify the column names. </p>
<p>If you specify this attribute, and the <code>firstrowasHeader</code> attribute is True (the default), the column names specified by this attribute replace the first line of the response. You can use this behavior to replace the column names retrieved by the request with your own names.</p>
<p>If a duplicate column heading is encountered in either this attribute or in the column names from the response, ColdFusion appends an underscore to the name to make it unique.</p>
<p>If the number of columns specified by this attribute does not equal the number of columns in the HTTP response body, ColdFusion generates an error.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>firstrowas<br />headers</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>yes</p>
    </td>
    <td>
<p>Determines how ColdFusion processes the first row of the query record set:</p>
<ul>
<li>
   yes: processes the first row as column heads. If you specify a <code>columns</code> attribute, ColdFusion ignores the first row of the file.
</li>
<li>
   no: processes the first row as data. If you do not specify a <code>columns</code> attribute, ColdFusion generates column names by appending numbers to the word &quot;column&quot;; for example, &quot;column_1&quot;.
</li>
</ul>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>delimiter</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>, [comma]</p>
    </td>
    <td>
<p>A character that separates query columns. The response body must use this character to separate the query columns.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>textQualifier</p>
    </td>
    <td>
<p>Opt</p>
    </td>
    <td>
<p>&quot; [double-quotation mark]</p>
    </td>
    <td>
<p>A character that, optionally, specifies the start and end of a text column. This character must surround any text fields in the response body that contain the delimiter character as part of the field value.</p>
<p>To include this character in column text, escape it by using two characters in place of one. For example, if the qualifier is a double-quotation mark, escape it as <code>&quot;&quot;</code>. </p>
    </td>
  </tr>
</table>

<h4><a name="wp3448564"></a>Usage</h4>
<p>The <code>cfhttp</code> tag is a general-purpose tool for creating HTTP requests and handling the returned results. It enables you to generate most standard HTTP request types. You use embedded <code>cfhttpparam</code> tags to specify request headers and body content.</p>
<p>When ColdFusion receives a response to a <code>cfhttp</code> request, it can put the response body (if any) in a file or the <code>cfhttp.FileContent </code>string variable. If the body text is structured as a result set, ColdFusion can put the body text in query object. You can also access the values of all returned headers and specify how to handle error status and redirections, and specify a timeout to prevent requests from hanging.</p>
<p>The HTTP protocol is the backbone of the World Wide Web and is used for every web transaction. Because the <code>cfhttp</code> tag can generate most types of requests, it provides significant flexibility. Possible uses include:</p>
<ul>
<li>
   Interacting with dynamic web sites and services that are not available as web services. (Use the the <a href="00000281.htm#2650065"><code>cfinvoke</code></a> tag to access SOAP web services.)
</li>
<li>
   Getting the contents of an HTML page or other file such as an image on a web server for use in your CFML page or storage in a file.
</li>
<li>
   Sending a secure request to a server by specifying the https protocol in the <code>url</code> attribute.
</li>
<li>
   Using the POST method to send a multipart/form-data style post to any URL that can handle such data and return results, including CGI executables or even other ColdFusion pages.
</li>
<li>
   Using the PUT method to upload files to a server that does not accept FTP requests.
</li>
</ul>
<p>This tag can, and for PUT and POST requests must, have a body that contains <code>cfhttpparam</code> tags. If this tag has <code>cfhttpparam</code> tags, it must have a <code>&lt;/cfhttp&gt;</code> end tag.</p>
<p>To use HTTPS with the <code>cfhttp</code> tag, you might need to manually import the certificate for each web server into the keystore for the JRE that ColdFusion uses. This procedure should not be necessary if the certificate is signed (issued) by an authority that the JSSE (Java Secure Sockets Extension) recognizes (for example, Verisign); that is, if the signing authority is in the cacerts already. However, you might need to use the procedure if you are issuing SSL (secure sockets layer) certificates yourself.</p>
<h4>To manually import a certificate:</h4>
<ol>
<li>
   Go to a page on the SSL server in question. 
</li>
<li>
   Double-click the lock icon. 
</li>
<li>
   Click the Details tab. 
</li>
<li>
   Click Copy To File. 
</li>
<li>
   Select the base64 option and save the file. 
</li>
<li>
   Copy the CER file into C:\CFusionMX7\runtime\jre\lib\security (or whichever JRE ColdFusion is using). 
</li>
<li>
   Run the following command in the same directory (keytool.exe is located in C:\CFusionMX7\runtime\jre\bin):
<pre>
keytool -import -keystore cacerts -alias giveUniqueName -file filename.cer 
</pre>
</li>
</ol>
<h4><a name="wp3460249"></a>Variables returned by a cfhttp get operation</h4>
<p>The <code>cfhttp</code> tag returns the following variables. If you set the <code>result</code> attribute, the name you assign replaces <code>cfhttp</code> as the prefix. For additional information, see the <code>result</code> attribute.</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
 Name
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>cfhttp.charSet</p>
    </td>
    <td>
<p>Response character character set (character encoding) specified by the response Content-Type header.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>cfhttp.errorDetail</p>
    </td>
    <td>
<p>If the connection to the HTTP server fails, contains details about the failure.  For instance: &quot;Unknown host: my.co.com&quot;; otherwise, the empty string. Macromedia recommends that you check this variable for an error condition before checking other variables.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>cfhttp.fileContent</p>
    </td>
    <td>
<p>Response body; for example, the contents of a html page retrieved by a GET operation. Empty if you save the response in a file. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>cfhttp.header</p>
    </td>
    <td>
<p>Raw response header containing all header information in a single string. Contains the same information as the <code>cfhttp.responseHeader</code> variable.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>cfhttp.mimeType</p>
    </td>
    <td>
<p>MIME type specified by the response Content-Type header; for example, text/html.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>cfhttp.responseHeader</p>
    </td>
    <td>
<p>The response headers formatted into a structure. Each element key is the header name, such as Content-Type or Status_Code. If there is more than one instance of a header type, the type values are put in an array. </p>
<p>One common technique is to dynamically access the cfhttp.responseHeader structure as a dynamic array; for example, <code>#cfhttp.resonseHeader[fieldVariable]#</code>.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>cfhttp.statusCode</p>
    </td>
    <td>
<p>The HTTP status_code header value followed by the HTTP Explanation header value; for example, &quot;200 OK&quot;.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>cfhttp.text</p>
    </td>
    <td>
<p>Boolean; True if the response body content type is text. ColdFusion recognizes the response body as text if:</p>
<ul>
<li>
   the header does not specify a content type.
</li>
<li>
   the content type starts with &quot;text&quot;.
</li>
<li>
   the content type starts with &quot;message&quot;.
</li>
<li>
   the content type is &quot;application/octet-stream&quot;.
</li>
</ul>
    </td>
  </tr>
</table>

<h4><a name="wp1099944"></a>Building a query from a delimited text file</h4>
<p>The <code>cfhttp</code> tag can create a ColdFusion query object form the response body. To do so, the response body must consist of lines of text, with each line having fields that are delimited by a character that identifies the column breaks. The default delimiter is a comma (,). The response data can also use a text qualifier; the default is a double-quotation mark (&quot;). If you surround a string field in the text qualifier, the field can contain the delimiter character. To include the text qualifier in field text, escape it by using a double character. The following line shows a two-line request body that is converted into a query. It has three comma-delimited fields:</p>
<pre>Field1,Field2,Field3
&quot;A comma, in text&quot;,&quot;A quote: &quot;&quot;Oh My!&quot;&quot;&quot;,Plain text
</pre><p>Run the following code to show how ColdFusion treats this data:</p>
<pre>&lt;cfhttp method=&quot;Get&quot;
   url=&quot;127.0.0.1:8500/tests/escapetest.txt&quot;
   name=&quot;onerow&quot;&gt;
&lt;cfdump var=&quot;#onerow#&quot;&gt;&lt;br&gt;
</pre><p>Column names can be specified in three ways: </p>
<ul>
<li>
   By default, ColdFusion uses the first row of the response as the column names. 
</li>
<li>
   If you specify a comma-delimited <code>columns</code> attribute, ColdFusion uses the names specified in the attribute as the column names. Set <code>firstRowAsHeaders=&quot;no&quot;</code> if the first row of the response contains data. Otherwise, ColdFusion ignores the first row.
</li>
<li>
   If you do not specify a <code>columns</code> attribute and set <code>firstrowasheaders=&quot;no&quot;</code>, ColdFusion generates column names of the form Column_1, Column2, etc.
</li>
</ul>
<p>The <code>cfhttp</code> tag checks to ensure that column names in the data returned by the tag start with a letter and contain only letters, numbers, and underscore characters (_).</p>
<p>ColdFusion checks for invalid column names. Column names must start with a letter. The remaining characters can be letters, numbers, or underscores (_). If a column name is not valid, ColdFusion generates an error.</p>
<h4><a name="wp3460001"></a>Notes</h4>
<ul>
<li>
   For the ColdFusion MX Administrator timeout and the URL timeout to take effect, you must enable the timeout in the ColdFusion MX Administrator, Server Settings page. For more information, see <i>Configuring and Administering ColdFusion&#160;MX</i>.
</li>
<li>
   The <code>cfhttp</code> tag supports Basic Authentication for all operations. 
</li>
<li>
   The <code>cfhttp</code> tag uses SSL to negotiate secure transactions.
</li>
<li>
   If you put the HTTP response body in a file, ColdFusion does not put it in the CFHTTP.FileContent variable or generate a query object. If you do not put the response body in a file, ColdFusion puts it in the CFHTTP.FileContent variable; if you specify a <code>name</code> attribute ColdFusion generates a query object.
</li>
<li>
   The <code>cfhttp</code> tag does not support NTLM or Digest Authentication.
</li>
</ul>
<h4><a name="wp3702669"></a>Example</h4>
<pre>&lt;!--- This example displays the information provided by the Macromedia
Designer &amp; Developer Center XML feed, 
http://www.macromedia.com/desdev/resources/macromedia_resources.xml 
See http://www.macromedia.com/desdev/articles/xml_resource_feed.html
for more information on this feed. ---&gt;

&lt;!--- Set the URL address. ---&gt;
&lt;cfset urlAddress=&quot;http://www.macromedia.com/desdev/resources/macromedia_resources.xml&quot;&gt;

&lt;!--- Use the CFHTTP tag to get the file content represented by urladdress. 
      Note that /&gt;, not an end tag, terminates this tag. ---&gt;
&lt;cfhttp url=&quot;#urladdress#&quot; method=&quot;GET&quot; resolveurl=&quot;Yes&quot; throwOnError=&quot;Yes&quot;/&gt;

&lt;!--- Parse the XML and output a list of resources. ---&gt;
&lt;cfset xmlDoc = XmlParse(CFHTTP.FileContent)&gt;
&lt;!--- Get the array of resource elements, the xmlChildren of the xmlroot. ---&gt;
&lt;cfset resources=xmlDoc.xmlroot.xmlChildren&gt;
&lt;cfset numresources=ArrayLen(resources)&gt;

&lt;cfloop index=&quot;i&quot; from=&quot;1&quot; to=&quot;#numresources#&quot;&gt;
    &lt;cfset item=resources[i]&gt;
    &lt;cfoutput&gt;
        &lt;strong&gt;&lt;a href=#item.url.xmltext#&gt;#item.title.xmltext#&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
        &lt;strong&gt;Author&lt;/strong&gt;&amp;nbsp;&amp;nbsp;#item.author.xmltext#&lt;br&gt;
        &lt;strong&gt;Applies to these products&lt;/strong&gt;&lt;br&gt;
        &lt;cfloop index=&quot;i&quot; from=&quot;4&quot; to=&quot;#arraylen(item.xmlChildren)#&quot;&gt;
            #item.xmlChildren[i].xmlAttributes.Name#&lt;br&gt;
        &lt;/cfloop&gt;
        &lt;br&gt;
    &lt;/cfoutput&gt;
&lt;/cfloop&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00000271.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000273.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000272.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



