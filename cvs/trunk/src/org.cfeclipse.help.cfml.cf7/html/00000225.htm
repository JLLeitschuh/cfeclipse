<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>cfcatch</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000224.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000226.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>cfcatch</h1>
<h4><a name="wp3400682"></a>Description</h4>
<p>Used inside a <a href="00000349.htm#1104557"><code>cftry</code></a> tag. Together, they catch and process exceptions in ColdFusion pages. <i>Exceptions</i> are events that disrupt the normal flow of instructions in a ColdFusion page, such as failed database operations, missing include files, and developer-specified events.</p>
<h4><a name="wp3400687"></a>Category</h4>
<p><a href="00000201.htm#2459716">Exception handling tags</a></p>
<h4><a name="wp3400692"></a>Syntax</h4>
<pre>&lt;cfcatch type = &quot;exceptiontype&quot;&gt;<br />   Exception processing code here<br />&lt;/cfcatch&gt;
</pre><h4><a name="wp3903753"></a>See also</h4>
<p><a href="00000349.htm#1104557"><code>cftry</code></a>, <a href="00000242.htm#2022557"><code>cferror</code></a>, <a href="00000325.htm#1102913"><code>cfrethrow</code></a>, <a href="00000343.htm#2773591"><code>cfthrow</code></a><code>,</code> <a href="00000697.htm#1188543">onError</a>; <a href="00001130.htm#1220254">Handling Errors</a> in <i>ColdFusion MX Developer's Guide</i></p>
<h4><a name="wp3400708"></a>History</h4>
<p>ColdFusion&#160;MX:</p>
<ul>
<li>
   Changed SQLSTATE value behavior: the SQLSTATE return value in a <code>cfcatch</code> tag depends on the database driver type:
<ul><li>Type 1 (JDBC-ODBC bridge): the value is the same as in ColdFusion 5</li>
<li>Type 4 (100% Java, no native methods): the value might be different</li>
<p>If your application depends on SQLSTATE values for flow control, the application might produce unexpected behavior with ColdFusion&#160;MX. </p>
</ul></li>
<li>
   Changed the behavior of this tag when <code>type=&quot;any&quot;</code>: it is not necessary, when you include a <code>cfcatch</code> tag with <code>type=&quot;any&quot;</code>, to do so in the last <code>cfcatch</code> tag in the block, to ensure that all other tests are executed before it. ColdFusion finds the best-match <code>cfcatch</code> block. 
</li>
<li>
   Changed the behavior of the <a href="00000329.htm#1103056"><code>cfscript</code></a> tag: it includes <code>try</code> and <code>catch</code> statements that are equivalent to the <code>cftry</code> and <code>cfcatch</code> tags.
</li>
<li>
   Changed object modification: you cannot modify the object returned by <code>cfcatch</code>. 
</li>
<li>
   Changed thrown exceptions: the <a href="00000230.htm#1097667"><code>cfcollection</code></a>, <a href="00000278.htm#1100286"><code>cfindex</code></a>, and <a href="00000330.htm#1103106"><code>cfsearch</code></a> tags can throw the SEARCHENGINE exception. In earlier releases, an error in processing these tags threw only an UNKNOWN exception.
</li>
</ul>
<h4><a name="wp3400752"></a>Attributes</h4>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Req/Opt
    </th>
    <th>
Default
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>type</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Any</p>
    </td>
    <td>
<ul>
<li>
   application: catches application exceptions
</li>
<li>
   database: catches database exceptions
</li>
<li>
   template: catches ColdFusion page exceptions
</li>
<li>
   security: catches security exceptions
</li>
<li>
   object: catches object exceptions
</li>
<li>
   missingInclude: catches missing include file exceptions
</li>
<li>
   expression: catches expression exceptions
</li>
<li>
   lock: catches lock exceptions
</li>
<li>
   <i>custom_type</i>: catches the specified custom exception type that is defined in a <code>cfthrow</code> tag
</li>
<li>
   searchengine: catches Verity search engine exceptions
</li>
<li>
   any: catches all exception types 
</li>
</ul>
    </td>
  </tr>
</table>

<h4><a name="wp3400781"></a>Usage</h4>
<p>You must code at least one <code>cfcatch</code> tag within a <code>cftry</code> block. Put <code>cfcatch</code> tags at the end of a <code>cftry</code> block. ColdFusion&#160;MX tests <code>cfcatch</code> tags in the order in which they appear. This tag requires an end tag.</p>
<p>If <code>type=&quot;any&quot;</code>, ColdFusion&#160;MX catches exceptions from any CFML tag, data source, or external object. To get the exception type use code such as the following:</p>
<pre>   #cfcatch.type#
</pre><p>Applications can use the <code>cfthrow</code> tag to throw developer-defined exceptions. Catch these exceptions with any of these <code>type</code> options:</p>
<ul>
<li>
   <code>&quot;</code><code><i>custom_type</i></code><code>&quot;</code>
</li>
<li>
   <code>&quot;Application&quot;</code>
</li>
<li>
   <code>&quot;Any&quot;</code>
</li>
</ul>
<p>The <code><i>custom_type</i></code> type is a developer-defined type specified in a <code>cfthrow</code> tag. If you define a custom type as a series of strings concatenated by periods (for example, &quot;<code>MyApp.BusinessRuleException.InvalidAccount</code>&quot;), ColdFusion MX can catch the custom type by its character pattern. ColdFusion MX searches for a <code>cfcatch</code> tag in the <code>cftry</code> block with a matching exception type, starting with the most specific (the entire string), and ending with the least specific. </p>
<p>For example, you could define a type as follows:</p>
<pre>&lt;cfthrow type = &quot;MyApp.BusinessRuleException.InvalidAccount&quot;&gt;
</pre><p>If you have the following <code>cfcatch</code> tag, it will handle the exception:</p>
<pre>&lt;cfcatch type = &quot;MyApp.BusinessRuleException.InvalidAccount&quot;&gt; 
</pre><p>Otherwise, if you have the following <code>cfcatch</code> tag, it will handle the exception:</p>
<pre>&lt;cfcatch type = &quot;MyApp.BusinessRuleException&quot;&gt; 
</pre><p>Finally, if you have the following <code>cfcatch</code> tag, it will handle the exception:</p>
<pre><code>&lt;cfcatch type = &quot;MyApp&quot;&gt; </code>
</pre><p>You can code <code>cfcatch</code> tags in any order to catch a custom exception type.</p>
<p>If you specify <code>type = &quot;Application&quot;</code>, the <code>cfcatch</code> tag catches only custom exceptions that have the <code>Application</code> type in the <code>cfthrow</code> tag that defines them.</p>
<p>The <code>cfinclude</code>, <code>cfmodule</code>, and <code>cferror</code> tags throw an exception of <code>type = &quot;template&quot;</code>.</p>
<p>An exception that is thrown within a <code>cfcatch</code> block cannot be handled by the <code>cftry</code> block that immediately encloses the <code>cfcatch</code> tag. However, you can rethrow the currently active exception with the <a href="00000325.htm#1102913"><code>cfrethrow</code></a> tag.</p>
<p>The <code>cfcatch</code> variables provide the following exception information: </p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
cfcatch variable&#160;
    </th>
    <th>
Content
    </th>
  </tr>
  <tr>
    <td>
<pre>cfcatch.type
</pre>    </td>
    <td>
<p>Type: Exception type, as specified in <code>cfcatch</code>.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>cfcatch.message 
</pre>    </td>
    <td>
<p>Message: Exception&#39;s diagnostic message, if provided; otherwise, an empty string; in the <code>cfcatch.message</code> variable.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>cfcatch.detail 
</pre>    </td>
    <td>
<p>Detailed message from the CFML interpreter or specified in a <code>cfthrow</code> tag. When the exception is generated by ColdFusion (and not <code>cfthrow</code>), the message can contain HTML formatting and can help determine which tag threw the exception.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>cfcatch.tagcontext 
</pre>    </td>
    <td>
<p>An array of tag context structures, each representing one level of the active tag context at the time of the exception.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>cfcatch.NativeErrorCode
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=</code> <code>&quot;database&quot;</code>. Native error code associated with exception. Database drivers typically provide error codes to diagnose failing database operations. Default: -1. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>cfcatch.SQLState
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=</code> <code>&quot;database&quot;</code>. SQLState associated with exception. Database drivers typically provide error codes to help diagnose failing database operations. Default: -1. </p>
    </td>
  </tr>
  <tr>
    <td>
<pre>cfcatch.Sql
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=</code> <code>&quot;database&quot;</code>. The SQL statement sent to the data source.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>cfcatch.queryError
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=&quot;database&quot;</code>. The error message as reported by the database driver.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>cfcatch.where
</pre>    </td>
    <td>
<p>Applies to <code>type</code><code> </code><code>=</code> <code>&quot;database&quot;</code>. If the query uses the <code>cfqueryparam</code> tag, query parameter name-value pairs.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>cfcatch.ErrNumber
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=</code> <code>&quot;expression&quot;</code>. Internal expression error number.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>cfcatch.MissingFileName 
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=</code> <code>&quot;missingInclude&quot;</code>. Name of file that could not be included.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>cfcatch.LockName
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=</code> <code>&quot;lock&quot;</code>. Name of affected lock (if the lock is unnamed, the value is <code>&quot;anonymous</code>&quot;).</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>cfcatch.LockOperation
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=</code> <code>&quot;lock&quot;</code>. Operation that failed (Timeout, Create Mutex, or Unknown).</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>cfcatch.ErrorCode
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=</code> <code>&quot;custom&quot;</code>. String error code.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>cfcatch.ExtendedInfo
</pre>    </td>
    <td>
<p>Applies to <code>type</code> <code>=</code> <code>&quot;application&quot;</code> and <code>&quot;custom&quot;</code>. Custom error message; information that the default exception handler does not display.</p>
    </td>
  </tr>
</table>

<h4><a name="wp3400885"></a>Advanced Exception types</h4>
<p>You can specify the following advanced exception types in the <code>type</code> attribute:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
ColdFusion advanced exception type
    </th>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.CFEXECUTE.OutputError</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.CFEXECUTE.Timeout</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.FileException</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPAccepted</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPAuthFailure</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPBadGateway</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPBadRequest</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPCFHTTPRequestEntityTooLarge</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPCGIValueNotPassed</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPConflict</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPContentLengthRequired</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPContinue</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPCookieValueNotPassed</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPCreated</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPFailure</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPFileInvalidPath</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPFileNotFound</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPFileNotPassed</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPFileNotRenderable</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPForbidden</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPGatewayTimeout</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPGone</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPMethodNotAllowed</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPMovedPermanently</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPMovedTemporarily</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPMultipleChoices</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPNoContent</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPNonAuthoritativeInfo</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPNotAcceptable</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPNotFound</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPNotImplemented</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPNotModified</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPPartialContent</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPPaymentRequired</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPPreconditionFailed</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPProxyAuthenticationRequired</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPRequestURITooLarge</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPResetContent</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPSeeOther</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPServerError</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPServiceUnavailable</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPSwitchingProtocols</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPUnsupportedMediaType</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPUrlValueNotPassed</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.HTTPUseProxy</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.HTTPVersionNotSupported</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.POPAuthFailure</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.POPConnectionFailure</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.POPDeleteError</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COM.Allaire.ColdFusion.Request.Timeout</p>
    </td>
  </tr>
  <tr>
    <td>
<p>COM.Allaire.ColdFusion.SERVLETJRunError</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>COMCOM.Allaire.ColdFusion.HTTPConnectionTimeout</p>
    </td>
  </tr>
</table>

<h4><a name="wp3400995"></a>Example</h4>
<pre>&lt;!--- cfcatch example, using TagContext to display the tag stack. ---&gt;
&lt;h3&gt;cftry Example&lt;/h3&gt;
&lt;!--- Open a cftry block. ---&gt;
&lt;cftry&gt;
   &lt;!--- Note misspelled tablename &quot;employees&quot; as &quot;employeeas&quot;. ---&gt;
   &lt;cfquery name = &quot;TestQuery&quot; dataSource = &quot;cfdocexamples&quot;&gt;
      SELECT *
      FROM EMPLOYEEAS
   &lt;/cfquery&gt;
   &lt;!--- Other processing goes here. ---&gt;
   &lt;!--- Specify the type of error for which we search. ---&gt;
   &lt;cfcatch type = &quot;Database&quot;&gt;
      &lt;!--- the message to display. ---&gt;
      &lt;h3&gt;You&#39;ve Thrown a Database &lt;b&gt;Error&lt;/b&gt;&lt;/h3&gt;
      &lt;cfoutput&gt;
         &lt;!--- The diagnostic message from ColdFusion MX. ---&gt;
         &lt;p&gt;#cfcatch.message#&lt;/p&gt;
         &lt;p&gt;Caught an exception, type = #CFCATCH.TYPE# &lt;/p&gt;
         &lt;p&gt;The contents of the tag stack are:&lt;/p&gt;
         &lt;cfdump var=&quot;#cfcatch.tagcontext#&quot;&gt;
      &lt;/cfoutput&gt;
   &lt;/cfcatch&gt;
&lt;/cftry&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00000224.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000226.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000225.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



