<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Web services</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001530.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001532.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Web services</h1>
<p>Since its inception, the Internet has allowed people to access content stored on remote computers. This content can be static, such as a document represented by an HTML file, or dynamic, such as content returned from a Macromedia ColdFusion page or CGI script. </p>
<p>Web services let you access application functionality that someone created and made available on a remote computer. With a web service, you can make a request to the remote application to perform an action. </p>
<p>For example, you can request a stock quote, pass a text string to be translated, or request information from a product catalog. The advantage of web services is that you do not have to recreate application logic that someone else has already created and, therefore, you can build your applications faster. </p>
<p>Referencing a remote web service within your ColdFusion application is called <i>consuming</i> web services. Since web services adhere to a standard interface regardless of implementation technology, you can consume a web service implemented as part of a ColdFusion application, or as part of a .NET or Java application. </p>
<p>You can also create your own web services and make them available to others for remote access, called <i>publishing</i> web service. Applications that consume your web service can be implemented in ColdFusion&#160;MX or by any application that recognizes the web service standard. </p>
<h2><a name="wp1175105"></a>Accessing a web service</h2>
<p>In its simplest form, an access to a web service is similar to a function call. Instead of the function call referencing a library on your computer, it references remote functionality over the Internet. </p>
<p>One feature of web services is that they are <i>self-describing</i>. That means a person who makes a web service available also publishes a description of the API to the web service as a Web Services Description Language (WSDL) file. </p>
<p>A WSDL file is an XML-formatted document that includes information about the web service, including the following information:</p>
<ul>
<li>
   Operations that you can call on the web service
</li>
<li>
   Input parameters that you pass to each operation
</li>
<li>
   Return values from an operation
</li>
</ul>
<p>Consuming web services typically is a two-step process:</p>
<ol>
<li>
   Parse the WSDL file of the web service to determine its interface. 
<p>A web service makes its associated WSDL file available over the Internet. You must know the URL of the WSDL file defining the service. For example, you can access the WSDL file for the TemperatureService web service at the following URL: </p>
<p><a href="www.xmethods.net/sd/2001/TemperatureService.wsdl" target="mm_window">www.xmethods.net/sd/2001/TemperatureService.wsdl</a></p>
<p>For an overview of WSDL syntax, see <a href="00001532.htm#1173645">Working with WSDL files</a></p>
</li>
<li>
   Make a request to the web service. 
<p>The following example invokes an operation on the Temperature web service to retrieve the temperature in zip code 55987: </p>
<pre>
&lt;cfinvoke 
&#160;&#160;webservice=&quot;http://www.xmethods.net/sd/2001/TemperatureService.wsdl&quot;
&#160;&#160;method=&quot;getTemp&quot;
&#160;&#160;returnvariable=&quot;aTemp&quot;&gt;
&#160;&#160;&#160;&#160;&lt;cfinvokeargument name=&quot;zipcode&quot; value=&quot;55987&quot;/&gt;
&lt;/cfinvoke&gt;
&lt;cfoutput&gt;The temperature at zip code 55987 is #aTemp#&lt;/cfoutput&gt;
</pre>
<p>For more information on consuming web services, see <a href="00001533.htm#1168676">Consuming web services</a>. </p>
</li>
</ol>
<h2><a name="wp1172015"></a>Basic web service concepts</h2>
<p>You must be familiar with the underlying architecture of a web service provider in order to fully understand how web services work.</p>
<p><strong>Note: </strong>This section contains an overview of the architecture of web services. For detailed information, consult one of the many web services books. </p><p>The following are three primary components of the web services platform:</p>
<ul>
<li>
   SOAP (Simple Object Access Protocol)
</li>
<li>
   WSDL (Web Services Description Language)
</li>
<li>
   UDDI (Universal Description, Discovery, and Integration)
</li>
</ul>
<p>The following simple figure shows how the ColdFusion&#160;MX implementation of web services work:</p>
<p><br />
<img src="images/start_da.jpg" alt="Date information including tenths of seconds" border="0" hspace="0" vspace="0"/>
<br />
<br />
<img src="images/webser_2.jpg" alt="The ColdFusion implementation of web services including SOAP support" border="0" hspace="0" vspace="0"/>
<br />
</p>
<p>The following sections describe the components shown in this figure. </p>
<h3><a name="wp1173713"></a>Supporting web services with SOAP</h3>
<p>SOAP provides a standard XML structure for sending and receiving web service requests and responses over the Internet. Usually you send SOAP messages using HTTP, but you also can send them using SMTP and other protocols. ColdFusion&#160;MX integrates the Apache Axis SOAP engine to support web services.</p>
<p>The ColdFusion Web Services Engine performs the underlying functionality to support web services, including generating WSDL files for web services that you create. In ColdFusion&#160;MX, to consume or publish web services does not require you to be familiar with SOAP or to perform any SOAP operations.</p>
<p>You can find additional information about SOAP in the W3C's SOAP 1.1 note at <a href="http://www.w3.org/TR/SOAP/" target="mm_window">www.w3.org/TR/SOAP/.</a></p>
<h3><a name="wp1235872"></a>Describing web services with WSDL</h3>
<p>A WSDL document is an XML file that describes a web service's purpose, where it is located, and how to access it. The WSDL document describes the operations that you can invoke and their associated data types.</p>
<p>ColdFusion&#160;MX can generate a WSDL document from a web service, and you can publish the WSDL document at a URL to provide information to potential clients. For more information, see <a href="00001532.htm#1173645">Working with WSDL files</a>.</p>
<h3><a name="wp1174345"></a>Finding web services with UDDI</h3>
<p>As a consumer of web services, you want to know what web services are available. As a publisher of web services, you want others to be able to find information about your web services. Universal Description, Discovery and Integration (UDDI) provides a way for web service clients to dynamically locate web services that provide specific capabilities. You use a UDDI query to find service providers. A UDDI response contains information, such as business contact information, business category, and technical details, about how to invoke a web service. </p>
<p>Although ColdFusion&#160;MX does not directly support UDDI, you can manually register or find a web service using a public UDDI registry, such as the IBM UDDI Business Registry at <a href="https://www-3.ibm.com/services/uddi/protect/registry.html" target="mm_window">https://www-3.ibm.com/services/uddi/protect/registry.html</a>.</p>
<p>You can find additional information about UDDI at <a href="http://www.uddi.org/about.htm" target="mm_window">www.uddi.org/about.htm.</a></p>


<hr />
<p align="right"><p align="right"><a href="00001530.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001532.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001531.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



