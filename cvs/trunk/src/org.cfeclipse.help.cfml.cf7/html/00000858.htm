<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>CF.http</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000857.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="part_dev.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>CF.http</h1>
<h4><a name="wp1003159"></a>Description</h4>
<p>Executes HTTP POST and GET operations on files. (POST operations upload MIME file types to a server, or post cookie, formfield, URL, file, or CGI variables directly to a server.) </p>
<h4><a name="wp1013684"></a>Return value</h4>
<p>Returns an object containing properties that you reference to access data.</p>
<h4><a name="wp1013686"></a>Syntax</h4>
<pre>CF.http
   ({<br />      method:&quot;get or post&quot;,
      url:&quot;URL&quot;,
      username:&quot;username&quot;,
      password:&quot;password&quot;,
      resolveurl:&quot;yes or no&quot;,
      params:arrayvar,
      path:&quot;path&quot;,
      file:&quot;filename&quot;
   })
</pre><h4><a name="wp1001891"></a>Arguments</h4>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Arguments
    </th>
    <th>
Req/Opt
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>method</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>One of two arguments:</p>
<ul>
<li>
   get: downloads a text or binary file or creates a query from the contents of a text file. 
</li>
<li>
   post: sends information to the server page or CGI program for processing. Requires the <code>params</code> argument. 
</li>
</ul>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>url</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>The absolute URL of the host name or IP address of the server on which the file resides. The URL must include the protocol (http or https) and host name. </p>
    </td>
  </tr>
  <tr>
    <td>
<p>username</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>When required by a server, a username.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>password</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>When required by a server, a password. </p>
    </td>
  </tr>
  <tr>
    <td>
<p>resolveurl</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>For <code>Get</code> and <code>Post</code> methods.</p>
<ul>
<li>
   Yes or No. Default is No. 
</li>
</ul>
<p>For GET and POST operations, if Yes, the page reference that is returned into the Filecontent property has its internal URLs fully resolved, including port number, so that links remain intact. The following HTML tags, which can contain links, are resolved:</p>
<p>- <code>img src</code> </p>
<p>- <code>a href</code> </p>
<p>- <code>form action</code> </p>
<p>- <code>applet code</code> </p>
<p>- <code>script src</code> </p>
<p>- <code>embed src</code> </p>
<p>- <code>embed pluginspace</code> </p>
<p>- <code>body background</code> </p>
<p>- <code>frame src</code> </p>
<p>- <code>bgsound src</code> </p>
<p>- <code>object data</code> </p>
<p>- <code>object classid</code> </p>
<p>- <code>object codebase</code> </p>
<p>- <code>object usemap</code> </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>params</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>HTTP parameters passed as an array of objects. Supports the following parameter types:</p>
<ul>
<li>
   name
</li>
<li>
   type
</li>
<li>
   value
</li>
</ul>
<p><code>CF.http</code> params are passed as an array of objects. The <code>params</code> argument is required for POST operations.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>path</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>The path to the directory in which to store files. When using the <code>path</code> argument, the <code>file</code> argument is required. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>file</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Name of the file that is accessed. For GET operations, defaults to the name specified in the <code>url</code> argument. Enter path information in the <code>path</code> argument. This argument is required if you are using the <code>path</code> argument.</p>
    </td>
  </tr>
</table>

<h4><a name="wp1004691"></a>Usage</h4>
<p>You can write the <code>CF.http</code> function using named arguments or positional arguments. You can invoke all supported arguments using the named argument style, as follows:</p>
<pre>CF.http({method:&quot;method&quot;, url:&quot;URL&quot;, username:&quot;username&quot;, password:&quot;password&quot;,
   resolveurl:&quot;yes or no&quot;, params:arrayvar, 
   path:&quot;path&quot;, file:&quot;filename&quot;});
</pre><p><strong>Note: </strong>The named argument style uses curly braces {} to surround the function arguments.</p><p>Positional arguments let you use a shorthand coding style. However, not all arguments are supported for the positional argument style. Use the following syntax to code the <code>CF.http</code> function using positional arguments:</p>
<pre>CF.http(url);
CF.http(method, url);
CF.http(method, url, username, password);
CF.http(method, url, params, username, password);
</pre><p><strong>Note: </strong>Do not use curly braces {} with positional arguments. </p><p>The following parameters can only be passed as an array of objects in the <code>params</code> argument in the <code>CF.http</code> function: </p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Parameter
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>name</p>
    </td>
    <td>
<p>The variable name for data that is passed</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>type</p>
    </td>
    <td>
<p>The transaction type:</p>
<ul>
<li>
   URL
</li>
<li>
   FormField
</li>
<li>
   Cookie
</li>
<li>
   CGI
</li>
<li>
   File
</li>
</ul>
    </td>
  </tr>
  <tr>
    <td>
<p>value</p>
    </td>
    <td>
<p>Value of URL, FormField, Cookie, File, or CGI variables that are passed</p>
    </td>
  </tr>
</table>

<p>The CF.http function returns data as a set of object properties, as described in the following table:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Property
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>Text</p>
    </td>
    <td>
<p>A Boolean value that indicates whether the specified URL location contains text data. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Charset</p>
    </td>
    <td>
<p>The charset used by the document specified in the URL. </p>
<p>HTTP servers normally provide this information, or the charset is specified in the charset parameter of the Content-Type header field of the HTTP protocol. For example, the following HTTP header announces that the character encoding is EUC-JP:</p>
<p>Content-Type: text/html; charset=EUC-JP</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Header</p>
    </td>
    <td>
<p>Raw response header. For example, macromedia.com returns the following header: </p>
<p>HTTP/1.1 200 OK</p>
<p>Date: Mon, 04 Mar 2002 17:27:44 GMT</p>
<p>Server: Apache/1.3.22 (Unix) mod_perl/1.26</p>
<p>Set-Cookie: MM_cookie=207.22.48.162.4731015262864476; <br />path=/; expires=Wed, 03-Mar-04 17:27:44 GMT;<br />domain=.macromedia.com</p>
<p>Connection: close</p>
<p>Content-Type: text/html</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Filecontent</p>
    </td>
    <td>
<p>File contents, for text and MIME files.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Mimetype</p>
    </td>
    <td>
<p>MIME type. Examples of MIME types include text/html, image/png, image/gif,video/mpeg, text/css, and audio/basic. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>responseHeader</p>
    </td>
    <td>
<p>Response header. If there is only one header key, its value can be accessed as simple type. If there are multiple header keys, the values are put in an array in a responseHeader structure.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Statuscode</p>
    </td>
    <td>
<p>HTTP error code and associated error string. Common HTTP status codes returned in the response header include:</p>
<p>400: Bad Request</p>
<p>401: Unauthorized</p>
<p>403: Forbidden</p>
<p>404: Not Found</p>
<p>405: Method Not Allowed</p>
    </td>
  </tr>
</table>

<p>You access these attributes using the <code>get</code> function:</p>
<pre>function basicGet()
{
    url = &quot;http://localhost:8100/&quot;;
 
    // Invoke with just the url. This is an HTTP GET.
    result = CF.http(url);
    return result.get(&quot;Filecontent&quot;);
}
</pre><p><strong>Note: </strong>For more information on using server-side ActionScript, see <a href="00001484.htm#998941">Using Server-Side ActionScript</a> in <i>ColdFusion MX Developer's Guide</i>.</p><h4><a name="wp1013663"></a>Example</h4>
<p>The following examples show a number of the ways to use the <code>CF.http</code> function:</p>
<pre>function postWithNamedArgs()
{
   // Set up the array of Post parameters.
   params = new Array();
   params[1] = {name:&quot;arg1&quot;, type:&quot;FormField&quot;, value:&quot;value1&quot;};
   params[2] = {name:&quot;arg2&quot;, type:&quot;URL&quot;, value:&quot;value2&quot;};
   params[3] = {name:&quot;arg3&quot;, type:&quot;CGI&quot;, value:&quot;value3&quot;};

   url = &quot;http://localhost:8100/&quot;;

   path = application.getContext(&quot;/&quot;).getRealPath(&quot;/&quot;);
   file = &quot;foo.txt&quot;;

   result = CF.http({method:&quot;post&quot;, url:url, username:&quot;karl&quot;, password:&quot;salsa&quot;,<br />resolveurl:true, params:params, path:path, file:file});

   if (result)
      return result.get(&quot;Statuscode&quot;);
   return null;
}

// Example of a basic HTTP GET operation
// Shows that HTTP GET is the default
function basicGet()
{
   url = &quot;http://localhost:8100/&quot;;

   // Invoke with just the url. This is an HTTP GET.
   result = CF.http(url);
   return result.get(&quot;Filecontent&quot;);
}

// Example showing simple array created to pass params arguments
function postWithParams()
{
   // Set up the array of Post parameters. These are just like cfhttpparam tags.
   params = new Array();
   params[1] = {name:&quot;arg2&quot;, type:&quot;URL&quot;, value:&quot;value2&quot;};

   url = &quot;http://localhost:8100/&quot;;

   // Invoke with the method, url, and params
   result = CF.http(&quot;post&quot;, url, params);
   return result.get(&quot;Filecontent&quot;);
}

// Example with username and params arguments
function postWithParamsAndUser()
{
   // Set up the array of Post parameters. These are just like cfhttpparam tags.
   params = new Array();
   params[1] = {name:&quot;arg2&quot;, type:&quot;URL&quot;, value:&quot;value2&quot;};

   url = &quot;http://localhost:8100/&quot;;

   // Invoke with the method, url, params, username, and password
   result = CF.http(&quot;post&quot;, url, params, &quot;karl&quot;, &quot;salsa&quot;);
   return result.get(&quot;Filecontent&quot;);
}
</pre><p></p>


<hr />
<p align="right"><p align="right"><a href="00000857.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="part_dev.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000858.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



