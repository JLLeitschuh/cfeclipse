<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>cfinvoke</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000280.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000282.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>cfinvoke</h1>
<h4><a name="wp2848090"></a>Description</h4>
<p>Does either of the following:</p>
<ul>
<li>
   Invokes a component method from within a ColdFusion page or component. 
</li>
<li>
   Invokes a web service. 
</li>
</ul>
<p>This tag works as follows:</p>
<ul>
<li>
   Transiently instantiates a component or web service and invokes a method on it.
</li>
<li>
   Invokes a method on an instantiated component or web service.
</li>
</ul>
<p>This tag can pass parameters to a method in the following ways:</p>
<ul>
<li>
   With the <code>cfinvokeargument</code> tag
</li>
<li>
   As named attribute-value pairs, one attribute per parameter
</li>
<li>
   As a structure, in the <code>argumentCollection</code> attribute
</li>
</ul>
<h4><a name="wp2846289"></a>Category</h4>
<p><a href="00000202.htm#2459750">Extensibility tags</a></p>
<h4><a name="wp2846275"></a>Syntax&#160;</h4>
<p><strong>Syntax 1</strong></p>
<pre>&lt;!--- This syntax invokes a method of a component. ---&gt;<br />&lt;cfinvoke<br />   component = &quot;component name or reference&quot;<br />   method = &quot;method name&quot;<br />   returnVariable = &quot;variable name&quot;<br />   argumentCollection = &quot;argument collection&quot;<br />   ...&gt;<br /><strong>OR</strong>
</pre><p><strong>Syntax 2</strong></p>
<pre>&lt;!--- This syntax can invoke a method of a component only<br />   from within the component. ---&gt;<br />&lt;cfinvoke<br />   method = &quot;method name&quot;<br />   returnVariable = &quot;variable name&quot;<br />   argumentCollection = &quot;argument collection&quot;<br />   ...<br />&gt;<br /><strong>OR</strong>
</pre><p><strong>Syntax 3</strong></p>
<pre>&lt;!--- This syntax invokes a web service. ---&gt;<br />&lt;cfinvoke <br />   webservice = &quot;URLtoWSDL_location&quot; <br />   method = &quot;operation_name&quot;<br />   username = user name&quot;<br />   password = &quot;password&quot;<br />   timeout = &quot;request timeout in seconds&quot;
   proxyServer = &quot;WSDL proxy server URL
   proxyPort = &quot;port on proxy server&quot;
   proxyUser = &quot;user id for proxy server&quot;
   proxyPassword = &quot;password for proxy server&quot;
   servicePort = &quot;WSDL port name&quot;
   inputParam1 = &quot;value1&quot;<br />   inputParam2 = &quot;value2&quot;<br />   ...<br />   returnVariable = &quot;var_name&quot;    <br />   ...&gt;<br /><strong>OR</strong>
</pre><p><strong>Syntax 4A</strong></p>
<pre>&lt;!--- This syntax invokes a component.<br />This syntax shows instantiation with the cfobject tag. <br />This cfinvoke syntax applies to instantiating a component <br />with the cfobject tag and to instantiating a component <br />with the CreateObject function. ---&gt;<br />&lt;cfobject<br />   component = &quot;component name&quot;<br />   name = &quot;mystringname for instantiated object&quot;&gt;<br />&lt;cfinvoke <br />   &lt;!--- value is object name, within number signs. ---&gt;<br />   component = &quot;#mystringname for instantiated component#&quot;<br />   method = &quot;method name&quot;<br />   returnVariable = &quot;variable name&quot;<br />   argumentCollection = &quot;argument collection&quot;<br />   ...<br />&gt;<br /><strong>OR</strong>
<strong>Syntax 4B</strong>
&lt;!--- This syntax invokes a web service.<br />This syntax shows instantiation with the cfobject tag. <br />This cfinvoke syntax applies to instantiating a web service<br />with the cfobject tag and to instantiating a web service<br />with the CreateObject function. ---&gt;<br />&lt;cfobject<br />   webservice = &quot;web service name&quot;<br />   name = &quot;mystringname for instantiated object&quot;<br />   method = &quot;operation_name&quot;&gt;<br />&lt;cfinvoke <br />   &lt;!--- value is object name, within number signs. ---&gt;<br />   webservice = &quot;#my stringname for instantiated web service#&quot; 
   timeout = &quot;request timeout in seconds&quot;
   proxyServer = &quot;WSDL proxy server url
   proxyPort = &quot;numeric port on proxy server&quot;
   proxyUser = &quot;string user id for proxy server&quot;
   servicePort = &quot;WSDL port name&quot;
   proxyPassword = &quot;string user password for proxy server&quot;
&gt;
</pre><h4><a name="wp3526764"></a>See also</h4>
<p><a href="00000218.htm#2855190"><code>cfargument</code></a><code>, </code><a href="00000231.htm#3350776"><code>cfcomponent</code></a><code>, </code><a href="00000263.htm#2852457"><code>cffunction</code></a><code>, </code><a href="00000282.htm#3014048"><code>cfinvokeargument</code></a><code>, </code><a href="00000302.htm#2820239"><code>cfobject</code></a><code>, </code><a href="00000315.htm#2498235"><code>cfproperty</code></a><code>, </code><a href="00000326.htm#2498057"><code>cfreturn</code></a></p>
<h4><a name="wp2650098"></a>History</h4>
<p>ColdFusion&#160;MX&#160;7: Added the <code>servicePort</code> attribute.</p>
<p>ColdFusion MX&#160;6.1: Added the following attributes: <code>timeout</code>, <code>proxyServer</code>, <code>proxyPort</code>, <code>proxyUser</code>, and <code>proxyPassword</code>.</p>
<p>ColdFusion&#160;MX: Added this tag.</p>
<h4><a name="wp2846325"></a>Attributes</h4>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Req/Opt
    </th>
    <th>
Default
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>component</p>
    </td>
    <td>
<p>See Usage.</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>String or component object; a reference to a component, or component to instantiate.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>method</p>
    </td>
    <td>
<p>See Usage.</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Name of a method. For a web service, the name of an operation.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>returnVariable</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Name of a variable for the invocation result.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>argumentCollection</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Name of a structure; associative array of arguments to pass to the method.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>username</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Overrides username specified in Administrator &gt; Web Services.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>password</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Overrides password specified in Administrator &gt; Web Services.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>webservice </p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>The URL of the WSDL file for the web service.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>timeout</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>The timeout for the web service request, in seconds</p>
    </td>
  </tr>
  <tr>
    <td>
<p>proxyServer</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>http.proxyHost system property, if any.</p>
    </td>
    <td>
<p>The proxy server required to access the webservice URL.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>proxyPort</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>http.proxyPort system property, if any.</p>
    </td>
    <td>
<p>The port to use on The proxy server.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>proxyUser</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>http.proxyUser system property, if any</p>
    </td>
    <td>
<p>The user ID to send to the proxy server.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>proxyPassword</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>http.proxyPassword system property, if any</p>
    </td>
    <td>
<p>The user's password on the proxy server.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>servicePort</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>First port found in the WSDL</p>
    </td>
    <td>
<p>The port name for the web service. This value is case-sensitive and corresponds to the <code>port</code> element's <code>name</code> attribute under the <code>service</code> element.</p>
<p>&#160;</p>
<p>Specify this attribute if the web service contains multiple ports. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>input_params ...</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Input parameters. For each named input parameter specify <i>paramName=paramValue</i>.</p>
    </td>
  </tr>
</table>

<p><strong>Note: </strong>If you do not specify any the proxy attributes, and a corresponding system property is set (typically in the JVM startup arguments) ColdFusion uses the system property value.</p><h4><a name="wp3528707"></a>Usage</h4>
<p>The following table shows when you can use each attribute:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th colspan="1" rowspan="2">
This attribute is required, optional, ignored, or invalid:
    </th>
    <th colspan="5" rowspan="1">
For this cfinvoke tag syntax:
    </th>
  </tr>
  <tr>
    <th>
Syntax 1 
    </th>
    <th>
Syntax 2 
    </th>
    <th>
Syntax 3 
    </th>
    <th>
Syntax 4A 
    </th>
    <th>
Syntax 4B 
    </th>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>component</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
  </tr>
  <tr>
    <td>
<p>method</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>Required</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>returnVariable</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr>
    <td>
<p>argumentCollection</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>username</p>
    </td>
    <td>
<p>Ignored</p>
    </td>
    <td>
<p>Ignored</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Ignored</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr>
    <td>
<p>password</p>
    </td>
    <td>
<p>Ignored</p>
    </td>
    <td>
<p>Ignored</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Ignored</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>webservice </p>
    </td>
    <td>
<p>Ignored</p>
    </td>
    <td>
<p>Ignored</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>Ignored</p>
    </td>
    <td>
<p>Required</p>
    </td>
  </tr>
  <tr>
    <td>
<p>timeout</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>proxyServer</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr>
    <td>
<p>proxyPort</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>proxyUser</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr>
    <td>
<p>proxyPassword</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>servicePort</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Invalid</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
  <tr>
    <td>
<p>input_params ...</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Optional</p>
    </td>
  </tr>
</table>

<p>If the <code>component</code> attribute specifies a component name, the component with the corresponding name is instantiated, the requested method is invoked, and then the component instance is immediately destroyed. If the attribute contains a reference to an instantiated component object, no instantiation or destruction of the component occurs.</p>
<p>On UNIX systems, ColdFusion searches first for a file with a name that matches the specified component name, but is all lower case. If it does not find the file, it looks for a file name that matches the component name exactly, with the identical character casing.</p>
<p>Method arguments can be passed in any of the following ways. If an argument is passed in more than one way with the same name, this order of precedence applies:</p>
<ol>
<li>
   Using the <code>cfinvokeargument</code> tag
</li>
<li>
   Passing directly as attributes of the <code>cfinvoke</code> tag (they cannot have the same name as a registered <code>cfinvoke</code> attribute: <code>method</code>, <code>component</code>, <code>webservice</code>, <code>returnVariable</code>)
</li>
<li>
   Passing as struct keys, using the <code>argumentCollection</code> attribute
</li>
</ol>
<p>For example, the <code>params</code> struct contains three keys: <code>a=1</code>, <code>b=1</code>, <code>c=1</code>. The following call is evaluated as if the arguments were passed to the method in the order <code>a=3</code>, <code>b=2</code>, <code>c=1</code>:</p>
<pre>&lt;cfinvoke ... a=2 b=2 argumentCollection=params&gt;
      &lt;cfinvokeargument name=&quot;a&quot; value=&quot;3&quot;&gt;
   &lt;/cfinvoke&gt;
</pre><p><strong>Note: </strong>The following <code>cfinvoke</code> tag attribute names are reserved; they cannot be used for argument names: <code>component</code>, <code>method</code>, <code>argumentCollection</code>, and <code>result</code>.</p><h4><a name="wp2847408"></a>Example1</h4>
<p>This example uses Syntax 1.</p>
<pre>&lt;!--- Immediate instantiation and destruction. ---&gt;
&lt;cfinvoke 
   component=&quot;nasdaq.quote&quot; 
   method=&quot;getLastTradePrice&quot; 
   returnVariable=&quot;res&quot;&gt;
   &lt;cfinvokeargument 
      name=&quot;symbol&quot; 
      value=&quot;macr&quot;&gt;
&lt;/cfinvoke&gt;
&lt;cfoutput&gt;#res#&lt;/cfoutput&gt;
</pre><h4><a name="wp3267603"></a>Example2</h4>
<p>This example uses Syntax 1.</p>
<pre>&lt;!--- Passing the arguments using argumentCollection. ---&gt;
&lt;cfset args = StructNew()&gt;
&lt;cfset args.symbol = &quot;macr&quot;&gt;
&lt;cfinvoke 
   component=&quot;nasdaq.quote&quot; 
   method=&quot;getLastTradePrice&quot; 
   argumentCollection=&quot;#args#&quot; 
   returnVariable=&quot;res&quot;&gt;
&lt;cfoutput&gt;#res#&lt;/cfoutput&gt;
</pre><h4><a name="wp3247441"></a>Example3</h4>
<p>This example uses Syntax 2.</p>
<pre>&lt;!--- Called only from within a component, MyComponent.---&gt;
&lt;cfinvoke
   method = &quot;a method name of MyComponent&quot;
   returnVariable = &quot;variable name&quot;&gt;
</pre><h4><a name="wp3247631"></a>Example4</h4>
<p>This example uses Syntax 3.</p>
<pre>&lt;!--- Using cfinvoke to consume a web service using a ColdFusion component.---&gt;
&lt;cfinvoke 
  webservice=&quot;http://www.xmethods.net/sd/2001/TemperatureService.wsdl&quot;
  method=&quot;getTemp&quot;
  returnvariable=&quot;aTemp&quot;&gt;
    &lt;cfinvokeargument name=&quot;zipcode&quot; value=&quot;55987&quot;/&gt;
&lt;/cfinvoke&gt;
&lt;cfoutput&gt;The temperature at zip code 55987 is #aTemp#&lt;/cfoutput&gt;
</pre><p>For more information on web services, see <a href="00001530.htm#1141005">Using Web Services</a> in <i>ColdFusion MX Developer's Guide</i>.</p>
<h4><a name="wp3267627"></a>Example5</h4>
<p>This example uses Syntax 4A.</p>
<pre>&lt;!--- Separate instantiation and method invocation; useful for 
   multiple invocations using different methods or values. ---&gt;
&lt;cfobject 
   name=&quot;quoteService&quot; 
   component=&quot;nasdaq.quote&quot;&gt;
&lt;cfinvoke 
   component=&quot;#quoteService#&quot; 
   method=&quot;getLastTradePrice&quot; 
   symbol=&quot;macr&quot; 
   returnVariable=&quot;res_macr&quot;&gt;
&lt;cfoutput&gt;#res#&lt;/cfoutput&gt;
&lt;cfinvoke 
   component=&quot;#quoteService#&quot; 
   method=&quot;getLastTradePrice&quot; 
   symbol=&quot;mot&quot; 
   returnVariable=&quot;res_mot&quot;&gt;
&lt;cfoutput&gt;#res#&lt;/cfoutput&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00000280.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000282.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000281.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



