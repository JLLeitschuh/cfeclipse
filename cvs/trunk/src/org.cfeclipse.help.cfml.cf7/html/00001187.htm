<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Modifying the login code for your application</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001186.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001188.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Modifying the login code for your application</h1>
<p>The Login Wizard creates a basic framework for authenticating a user. You must customize this framework to meet your application's needs. Typical security-related changes include the following:</p>
<ul>
<li>
   Providing user-specific role information in the <code>cflogin</code> tag
</li>
<li>
   Authenticating users against a database
</li>
</ul>
<h4><a name="wp1165055"></a>Providing user-specific role information</h4>
<p>The Login Wizard sets all users in a single role. In mm_wizard_authenticate.cfc, the performlogin method is hard-coded to set the role to &quot;user.&quot; The authentication routines handle roles differently. (For the details, see the mm_wizard_authenticate.cfc code.) If your application uses roles for authorization, you must change the authentication method to get and return valid role information, and change the performlogin method to use the information in the <code>roles</code> attribute of its <code>cfloginuser</code> tag.</p>
<h4><a name="wp1164684"></a>Authenticating users against a database</h4>
<p>If you use a database to maintain user IDs and passwords, you can create your login framework by specifying simple authentication, and modify the code to use the database. The following instructions describe a simple way to change the code to use a database. They do not include all the cleanup work (particularly, removing the hard-coded user name and password), that you should do for a well-formatted application. </p>
<p><strong>Replace the following code:</strong></p>
<pre>&lt;cfif sUserName eq uUserName AND sPassword eq uPassword&gt;
   &lt;cfset retargs.authenticated=&quot;YES&quot;&gt;
&lt;cfelse&gt;
   &lt;cfset retargs.authenticated=&quot;NO&quot;&gt;
&lt;/cfif&gt;
&lt;cfreturn retargs&gt;
</pre><h4>With code similar to the following:</h4>
<pre>&lt;cfquery name=&quot;loginQuery&quot; dataSource=&quot;#Application.DB#&quot; &gt;
   SELECT *
   FROM Users
   WHERE UserName = &lt;cfqueryparam value=&quot;#uUserName#&quot; CFSEQLType=<br />      &quot;CF_SQL_VARCHAR&quot;   AND password = &lt;cfqueryparam value=&quot;#uPassword#&quot;<br />      CFSEQLType=&quot;CF_SQL_VARCHAR&gt;&quot;
&lt;/cfquery&gt;

&lt;cfif loginQuery.recordcount gt 0&gt;
   &lt;cfset retargs.authenticated=&quot;YES&quot;&gt;
   &lt;cfset retargs.roles=loginQuery.roles&gt;
&lt;cfelse&gt;
   &lt;cfset retargs.authenticated=&quot;NO&quot;&gt;
&lt;/cfif&gt;
&lt;cfreturn retargs&gt;
</pre><p><strong>Note: </strong>For greater security, consider using a hashed password. Do not store the password directly in the database; instead, use the <code>hash</code> function to create a secure password fingerprint, and store it in the database. When the user provides a password, use the <a href="00000503.htm#1105551"><code>Hash</code></a> function on the submitted string and compare it with the value in the database. </p><h2><a name="wp1162591"></a>Web server-based authentication user security example</h2>
<p>The example in this section shows how you might implement user security using web-server-based basic authentication and two roles, user and administrator. </p>
<p>This example has two ColdFusion pages: </p>
<ul>
<li>
   The Application.cfc page logs the user into the ColdFusion security system and assigns the user to specific roles based on the user's ID.
<p>This page also includes the one-button form and logic for logging out a user, which appears at the top of each page.</p>
</li>
<li>
   The securitytest.cfm page is a sample application page. It displays the logged-in user's roles.
</li>
</ul>
<p>This simple example does not provide a user log-out interface. You can test the security behavior by adding your own pages to the same directory as the Application.cfc page. </p>
<p>This section includes the following examples:</p>
<ul>
<li>
   <a href="00001188.htm#1131906">Example: Application.cfc</a>
</li>
<li>
   <a href="00001189.htm#1132627">Example: securitytest.cfm</a>
</li>
</ul>


<hr />
<p align="right"><p align="right"><a href="00001186.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001188.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001187.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



