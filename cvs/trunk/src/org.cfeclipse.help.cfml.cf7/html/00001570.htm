<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Examples: using Java with CFML</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001569.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001571.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Examples: using Java with CFML</h1>
<p>The following sections show several examples of using Java objects in CFML. They include examples of using a custom Java class, a standard Java API class in a user-defined function, a JavaBean, and an Enterprise JavaBean (EJB).</p>
<h3><a name="wp1134705"></a>Using a Java API in a UDF</h3>
<p>The following example of a user-defined function (UDF) is functionally identical to the <code>GetHostAddress</code> function from the NetLib library of UDFs from the Common Function Library Project, <a href="http://www.cflib.org" target="mm_window">www.cflib.org</a>. It uses the <code>InetAddress</code> class from the standard Java 2 java.net package to get the Internet address of a specified host:</p>
<pre>&lt;cfscript&gt;
function GetHostAddress(host) {
   // Define the function local variables.
   var iaddrClass=&quot;&quot;;
   var address=&quot;&quot;;
   // Initialize the Java class.
   iaddrClass=CreateObject(&quot;java&quot;, &quot;java.net.InetAddress&quot;);
   // Get the address object.
   address=iaddrClass.getByName(host);
   // Return the address
   return address.getHostAddress();
}
&lt;/cfscript&gt;
&lt;cfoutput&gt;#gethostaddress(&quot;macromedia.com&quot;)#&lt;/cfoutput&gt; 
</pre><h3><a name="wp1154082"></a>Using an EJB</h3>
<p>ColdFusion&#160;MX can use EJBs that are served by JRun 4.0 servers. The JRun server jrun.jar file must have the same version as the jrun.jar file in ColdFusion.</p>
<p>To call an EJB, you use <a href="00000302.htm#2820239"><code>cfobject</code></a><code> type=&quot;Java&quot;</code> to create and call the appropriate objects. Before you can use an EJB you must do the following:</p>
<ol>
<li>
   Have a properly deployed EJB running on a J2EE server. The bean must be registered with the JNDI server.
</li>
<li>
   Have the following information:
<ul><li>Name of the EJB server</li>
<li>Port number of the JNDI naming service on the EJB server</li>
<li>Name of the EJB, as registered with the naming service</li>
</ul></li>
<li>
   Install the EJB home and component interface compiled classes on your ColdFusion web server, either as class files in the <i>web_root</i>/WEB-INF/classes directory or packaged in a JAR file the <i>web_root</i>/WEB-INF/lib directory.
</li>
</ol>
<p><strong>Note: </strong>To use an EJB served by a JRUN server, your ColdFusion installation and the JRun server that hosts the EJB must have the same version of the jrun.jar file (located in <i>cf_root\runtime\lib</i> directory in ColdFusion).</p><p>Although the specific steps for using an EJB depend on the EJB server and on the EJB itself, they generally correspond to the following order.</p>
<h4>To use an EJB:</h4>
<ol>
<li>
   Use the <code>cfobject</code> tag to create an object of the JNDI naming context class (javax.naming.Context). You will use fields from this class to define the information that you use to locate the EJB. Because you only use fields, you do not initialize the object.
</li>
<li>
   Use the <code>cfobject</code> tag to create a java.util.Properties class object that will contain the context object properties.
</li>
<li>
   Call the <code>init</code> method to initialize the Properties object.
</li>
<li>
   Set the Properties object to contain the properties that are required to create an initial JNDI naming context. These include the INITIAL_CONTEXT_FACTORY and PROVIDER_URL properties. You might also need to provide SECURITY_PRINCIPAL and SECURITY_CREDENTIALS values required for secure access to the naming context. For more information on these properties, see the JNDI documentation.
</li>
<li>
   Use the <code>cfobject</code> tag to create the JNDI InitialContext (javax.naming. InitialContext) object.
</li>
<li>
   Call the <code>init</code> method for the InitialContext object with the Properties object values to initialize the object.
</li>
<li>
   Call the InitialContextext object's <code>lookup</code> method to get a reference to the home interface for the bean that you want. Specify the JNDI name of the bean as the <code>lookup</code> argument.
</li>
<li>
   Call the <code>create</code> method of the bean's home object to create a new instance of the bean. If you are using Entity beans, you typically use a finder method instead. A finder method locates one or more existing entity beans.
</li>
<li>
   Now you can use the bean's methods as required by your application.
</li>
<li>
   When finished, call the context object's <code>close</code> method to close the object.
</li>
</ol>
<p>The following code shows this process using a simple Java Entity bean on a JRun 4.0 server. It calls the bean's <code>getMessage</code> method to obtain a message.</p>
<pre>&lt;html&gt;
&lt;head&gt;
   &lt;title&gt;cfobject Test&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;H1&gt;cfobject Test&lt;/H1&gt;
&lt;!--- Create the Context object to get at the static fields. ---&gt;
&lt;CFOBJECT 
   action=create 
   name=ctx 
   type=&quot;JAVA&quot; 
   class=&quot;javax.naming.Context&quot;&gt;

&lt;!--- Create the Properties object and call an explicit constructor---&gt;
&lt;CFOBJECT 
   action=create 
   name=prop 
   type=&quot;JAVA&quot; 
   class=&quot;java.util.Properties&quot;&gt;

&lt;!--- Call the init method (provided by cfobject)
      to invoke the Properties object constructor. ---&gt;
&lt;cfset prop.init()&gt;

&lt;!--- Specify the properties These are required for a remote server only ---&gt;
&lt;cfset prop.put(ctx.INITIAL_CONTEXT_FACTORY, &quot;jrun.naming.JRunContextFactory&quot;)&gt;
&lt;cfset prop.put(ctx.PROVIDER_URL, &quot;localhost:2908&quot;)&gt;
&lt;!--- &lt;cfset prop.put(ctx.SECURITY_PRINCIPAL, &quot;admin&quot;)&gt;
      &lt;cfset prop.put(ctx.SECURITY_CREDENTIALS, &quot;admin&quot;)&gt;
 ---&gt;
&lt;!--- Create the InitialContext ---&gt;
&lt;CFOBJECT 
   action=create 
   name=initContext 
   type=&quot;JAVA&quot; 
   class=&quot;javax.naming.InitialContext&quot;&gt;

&lt;!--- Call the init method (provided through cfobject)
      to pass the properties to the InitialContext constructor. ---&gt;
&lt;cfset initContext.init(prop)&gt;

&lt;!--- Get reference to home object. ---&gt;
&lt;cfset home = initContext.lookup(&quot;SimpleBean&quot;)&gt;

&lt;!--- Create new instance of entity bean.
      (hard-wired account number). Alternatively,
      you would use a find method to locate an existing entity bean. ---&gt;
&lt;cfset mySimple = home.create()&gt;

&lt;!--- Call a method in the entity bean. ---&gt;
&lt;cfset myMessage = mySimple.getMessage()&gt;

&lt;cfoutput&gt;
   #myMessage#&lt;br&gt;
&lt;/cfoutput&gt;

&lt;!--- Close the context. ---&gt;
&lt;cfset initContext.close()&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre><h3><a name="wp1134712"></a>Using a custom Java class</h3>
<p>The following code provides a more complex custom class than in the example <a href="00001567.htm#1134412">Creating and using a simple Java class</a>. The Example class manipulates integer, float, array, Boolean, and Example object types.</p>
<h4><a name="wp1134717"></a>The Example class</h4>
<p>The following Java code defines the Example class. The Java class Example has one public integer member, <code>mPublicInt</code>. Its constructor initializes <code>mPublicInt</code> to 0 or an integer argument. The class has the following public methods:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Method
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>ReverseString</p>
    </td>
    <td>
<p>Reverses the order of a string.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>ReverseStringArray</p>
    </td>
    <td>
<p>Reverses the order of elements in an array of strings.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Add</p>
    </td>
    <td>
<p>Overloaded: Adds and returns two integers or floats or adds the <code>mPublicInt</code> members of two Example class objects and returns an Example class object.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>SumArray</p>
    </td>
    <td>
<p>Returns the sum of the elements in an integer array.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>SumObjArray</p>
    </td>
    <td>
<p>Adds the values of the <code>mPublicInt</code> members of an array of Example class objects and returns an Example class object.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>ReverseArray</p>
    </td>
    <td>
<p>Reverses the order of an array of integers.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Flip</p>
    </td>
    <td>
<p>Switches a Boolean value.</p>
    </td>
  </tr>
</table>

<pre>public class Example {
   public int mPublicInt;

   public Example() {
      mPublicInt = 0;
   }

   public Example(int IntVal) {
      mPublicInt = IntVal;
   }

   public String ReverseString(String s) {
      StringBuffer buffer = new StringBuffer(s);
      return new String(buffer.reverse());
   }

   public String[] ReverseStringArray(String [] arr) {
      String[] ret = new String[arr.length];
      for (int i=0; i &lt; arr.length; i++) {
         ret[arr.length-i-1]=arr[i];
      }
      return ret;
   }

   public int Add(int a, int b) {
      return (a+b);
   }

   public float Add(float a, float b) {
      return (a+b);
   }

   public Example Add(Example a, Example b) {
      return new Example(a.mPublicInt + b.mPublicInt);
   }

   static public int SumArray(int[] arr) {
      int sum=0;
      for (int i=0; i &lt; arr.length; i++) {
         sum += arr[i];
      }
      return sum;
   }

   static public Example SumObjArray(Example[] arr) {
      Example sum= new Example();
      for (int i=0; i &lt; arr.length; i++) {
         sum.mPublicInt += arr[i].mPublicInt;
      }
      return sum;
   }

   static public int[] ReverseArray(int[] arr) {
      int[] ret = new int[arr.length];
      for (int i=0; i &lt; arr.length; i++) {
         ret[arr.length-i-1]=arr[i];
      }
      return ret;
   }

   static public boolean Flip(boolean val) {
      System.out.println(&quot;calling flipboolean&quot;);
      return val?false:true;
   }
}
</pre><h4><a name="wp1134818"></a>The useExample ColdFusion page</h4>
<p>The following useExample.cfm page uses the <code>Example</code> class to manipulate numbers, strings, Booleans, and Example objects. The <a href="00000542.htm#1106957"><code>JavaCast</code></a> CFML function ensures that CFML variables convert into the appropriate Java data types.</p>
<pre>&lt;html&gt;
&lt;head&gt;
   &lt;title&gt;CFOBJECT and Java Example&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;!--- Create a reference to an Example object ---&gt;
&lt;cfobject action=create type=java class=Example name=obj&gt;
&lt;!--- Create the object and initialize its public member to 5 ---&gt;
&lt;cfset x=obj.init(JavaCast(&quot;int&quot;,5))&gt;

&lt;!--- Create an array and populate it with string values,
      then use the Java object to reverse them. ---&gt;
&lt;cfset myarray=ArrayNew(1)&gt;
&lt;cfset myarray[1]=&quot;First&quot;&gt;
&lt;cfset myarray[2]=&quot;Second&quot;&gt;
&lt;cfset myarray[3]=&quot;Third&quot;&gt;
&lt;cfset ra=obj.ReverseStringArray(myarray)&gt;

&lt;!--- Display the results ---&gt;
&lt;cfoutput&gt;
   &lt;br&gt;   
   original array element 1: #myarray[1]#&lt;br&gt;
   original array element 2: #myarray[2]#&lt;br&gt;
   original array element 3: #myarray[3]#&lt;br&gt;
   after reverse  element 1: #ra[1]#&lt;br&gt;
   after reverse  element 2: #ra[2]#&lt;br&gt;
   after reverse  element 3: #ra[3]#&lt;br&gt;
   &lt;br&gt;
&lt;/cfoutput&gt;


&lt;!--- Use the Java object to flip a Boolean value, reverse a string,
      add two integers, and add two float numbers ---&gt;
&lt;cfset c=obj.Flip(true)&gt;
&lt;cfset StringVal=obj.ReverseString(&quot;This is a test&quot;)&gt;
&lt;cfset IntVal=obj.Add(JavaCast(&quot;int&quot;,20),JavaCast(&quot;int&quot;,30))&gt;
&lt;cfset FloatVal=obj.Add(JavaCast(&quot;float&quot;,2.56),JavaCast(&quot;float&quot;,3.51))&gt;

&lt;!--- Display the results ---&gt;
&lt;cfoutput&gt;
   &lt;br&gt;
   StringVal: #StringVal#&lt;br&gt;
   IntVal: #IntVal#&lt;br&gt;
   FloatVal: #FloatVal#&lt;br&gt;
   &lt;br&gt;
&lt;/cfoutput&gt;

&lt;!--- Create a two-element array, sum its values, 
      and reverse its elements ---&gt;
&lt;cfset intarray=ArrayNew(1)&gt;
&lt;cfset intarray[1]=1&gt;
&lt;cfset intarray[2]=2&gt;
&lt;cfset IntVal=obj.sumarray(intarray)&gt;
&lt;cfset reversedarray=obj.ReverseArray(intarray)&gt;

&lt;!--- Display the results ---&gt;
&lt;cfoutput&gt;
   &lt;br&gt;
   IntVal1 :#IntVal#&lt;br&gt;
   array1: #reversedarray[1]#&lt;br&gt;
   array2: #reversedarray[2]#&lt;br&gt;
   &lt;br&gt;
&lt;/cfoutput&gt;&lt;br&gt;

&lt;!--- Create a ColdFusion array containing two Example objects.
      Use the SumObjArray method to add the objects in the array
      Get the public member of the resulting object---&gt;
&lt;cfset oa=ArrayNew(1)&gt;
&lt;cfobject action=create type=java class=Example name=obj1&gt;
&lt;cfset VOID=obj1.init(JavaCast(&quot;int&quot;,5))&gt;
&lt;cfobject action=create type=java class=Example name=obj2&gt;
&lt;cfset VOID=obj2.init(JavaCast(&quot;int&quot;,10))&gt;
&lt;cfset oa[1] = obj1&gt;
&lt;cfset oa[2] = obj2&gt;
&lt;cfset result = obj.SumObjArray(oa)&gt;
&lt;cfset intval = result.mPublicInt&gt;

&lt;!--- Display the results ---&gt;
&lt;cfoutput&gt;
   &lt;br&gt;
   intval1: #intval#&lt;br&gt;
   &lt;br&gt;
&lt;/cfoutput&gt;&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00001569.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001571.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001570.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



