<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using IDL types with ColdFusion variables</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001588.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001590.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using IDL types with ColdFusion variables</h1>
<p>The following sections describe how ColdFusion supports CORBA data types. They include a table of supported IDL types and information about how ColdFusion converts between CORBA types and ColdFusion data.</p>
<h4><a name="wp1135592"></a>IDL support</h4>
<p>The following table shows which CORBA IDL types ColdFusion supports, and whether they can be used as parameters or return variables. (NA means not applicable.)</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
CORBA IDL type
    </th>
    <th>
General support
    </th>
    <th>
As parameters
    </th>
    <th>
As return value
    </th>
  </tr>
  <tr>
    <td>
<p>constants</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>attributes</p>
    </td>
    <td>
<p>Yes (for properties)</p>
    </td>
    <td>
<p>NA</p>
    </td>
    <td>
<p>NA</p>
    </td>
  </tr>
  <tr>
    <td>
<p>enum</p>
    </td>
    <td>
<p>Yes (as an integer)</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>union</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
  </tr>
  <tr>
    <td>
<p>sequence</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>array</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr>
    <td>
<p>interface</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>typedef</p>
    </td>
    <td>
<p>Yes </p>
    </td>
    <td>
<p>NA</p>
    </td>
    <td>
<p>NA</p>
    </td>
  </tr>
  <tr>
    <td>
<p>struct</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>module</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>NA</p>
    </td>
    <td>
<p>NA</p>
    </td>
  </tr>
  <tr>
    <td>
<p>exception</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>NA</p>
    </td>
    <td>
<p>NA</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>any</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
  </tr>
  <tr>
    <td>
<p>boolean</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>char</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr>
    <td>
<p>wchar</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>string</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr>
    <td>
<p>wstring</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>octet</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr>
    <td>
<p>short</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>long</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr>
    <td>
<p>float</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>double</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr>
    <td>
<p>unsigned short</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>unsigned long</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
  <tr>
    <td>
<p>longlong</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>unsigned longlong</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>No</p>
    </td>
  </tr>
  <tr>
    <td>
<p>void</p>
    </td>
    <td>
<p>Yes</p>
    </td>
    <td>
<p>NA</p>
    </td>
    <td>
<p>Yes</p>
    </td>
  </tr>
</table>

<h4><a name="wp1135823"></a>Data type conversion</h4>
<p>The following table lists IDL data types and the corresponding ColdFusion data types:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
IDL type
    </th>
    <th>
ColdFusion type
    </th>
  </tr>
  <tr>
    <td>
<p>boolean</p>
    </td>
    <td>
<p>Boolean</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>char</p>
    </td>
    <td>
<p>One-character string</p>
    </td>
  </tr>
  <tr>
    <td>
<p>wchar</p>
    </td>
    <td>
<p>One-character string</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>string</p>
    </td>
    <td>
<p>String</p>
    </td>
  </tr>
  <tr>
    <td>
<p>wstring</p>
    </td>
    <td>
<p>String</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>octet</p>
    </td>
    <td>
<p>One-character string</p>
    </td>
  </tr>
  <tr>
    <td>
<p>short</p>
    </td>
    <td>
<p>Integer</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>long</p>
    </td>
    <td>
<p>Integer</p>
    </td>
  </tr>
  <tr>
    <td>
<p>float</p>
    </td>
    <td>
<p>Real number</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>double</p>
    </td>
    <td>
<p>Real number</p>
    </td>
  </tr>
  <tr>
    <td>
<p>unsigned short</p>
    </td>
    <td>
<p>Integer</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>unsigned long</p>
    </td>
    <td>
<p>Integer </p>
    </td>
  </tr>
  <tr>
    <td>
<p>void</p>
    </td>
    <td>
<p>Not applicable (returned as an empty string)</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>struct</p>
    </td>
    <td>
<p>Structure</p>
    </td>
  </tr>
  <tr>
    <td>
<p>enum</p>
    </td>
    <td>
<p>Integer, where 0 corresponds to the first enumerator in the enum type</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>array</p>
    </td>
    <td>
<p>Array (must match the array size specified in the IDL)</p>
    </td>
  </tr>
  <tr>
    <td>
<p>sequence</p>
    </td>
    <td>
<p>Array</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>interface</p>
    </td>
    <td>
<p>An object reference</p>
    </td>
  </tr>
  <tr>
    <td>
<p>module</p>
    </td>
    <td>
<p>Not supported (cannot dereference by module name)</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>exception</p>
    </td>
    <td>
<p>ColdFusion throws an exception of type <code>coldfusion.runtime.corba.CorbaUserException</code></p>
    </td>
  </tr>
  <tr>
    <td>
<p>attribute</p>
    </td>
    <td>
<p>Object reference using dot notation</p>
    </td>
  </tr>
</table>

<h4><a name="wp1134767"></a>Boolean data considerations</h4>
<p>ColdFusion treats any of the following as Boolean values:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr bgcolor="#F8F8F8">
    <td>
<p><strong>True</strong></p>
    </td>
    <td>
<p>&quot;yes&quot;, &quot;true&quot;, or 1</p>
    </td>
  </tr>
  <tr>
    <td>
<p><strong>False</strong></p>
    </td>
    <td>
<p>&quot;no&quot;, &quot;false&quot;, or 0</p>
    </td>
  </tr>
</table>

<p>You can use any of these values with CORBA methods that take Boolean parameters, as the following code shows:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr bgcolor="#F8F8F8">
    <td>
<p>IDL</p>
    </td>
    <td>
<pre>module Tester
   {
   interface TManager
   {
      void testBoolean(in boolean a);
      void testOutBoolean(out boolean a);
      void testInoutBoolean(inout boolean a);
      boolean returnBoolean();
   }
}

</pre>    </td>
  </tr>
  <tr>
    <td>
<p>CFML</p>
    </td>
    <td>
<pre>&lt;CFSET handle = CreateObject(&quot;CORBA&quot;, &quot;d:\temp\tester.ior&quot;, &quot;IOR&quot;, &quot;&quot;) &gt;
&lt;cfset ret = handle.testboolean(&quot;yes&quot;)&gt;
&lt;cfset mybool = True&gt;
&lt;cfset ret = handle.testoutboolean(&quot;mybool&quot;)&gt;
&lt;cfoutput&gt;#mybool#&lt;/cfoutput&gt;

&lt;cfset mybool = 0&gt;
&lt;cfset ret = handle.testinoutboolean(&quot;mybool&quot;)&gt;
&lt;cfoutput&gt;#mybool#&lt;/cfoutput&gt;

&lt;cfset ret = handle.returnboolean()&gt;
&lt;cfoutput&gt;#ret#&lt;/cfoutput&gt;
</pre>    </td>
  </tr>
</table>

<h4><a name="wp1139870"></a>Struct data type considerations</h4>
<p>For IDL struct types, use ColdFusion structures. You can prevent errors by using the same case for structure key names in ColdFusion as you do for the corresponding IDL struct field names.</p>
<h4><a name="wp1134822"></a>Enum type considersations</h4>
<p>ColdFusion treats the enum IDL type as an integer with the index starting at 0. As a result, the first enumerator corresponds to 0, the second to 1, and so on. In the following example, the IDL enumerator a corresponds to 0, b to 1 and c to 2:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr bgcolor="#F8F8F8">
    <td>
<p>IDL</p>
    </td>
    <td>
<pre>module Tester
{
   enum EnumType {a, b, c};
   interface TManager
   {
      void testEnum(in EnumType a);
      void testOutEnum(out EnumType a);
      void testInoutEnum(inout EnumType a);
      EnumType returnEnum();
   }
}

</pre>    </td>
  </tr>
  <tr>
    <td>
<p>CFML</p>
    </td>
    <td>
<pre>&lt;CFSET handle = CreateObject(&quot;CORBA&quot;, &quot;d:\temp\tester.ior&quot;, &quot;IOR&quot;, &quot;&quot;) &gt;
&lt;cfset ret = handle.testEnum(1)&gt;
</pre>    </td>
  </tr>
</table>

<p>In this example, the CORBA object gets called with the second (<i>not</i> first) entry in the enumerator, a.</p>
<h4><a name="wp1139865"></a>Double-byte character considerations</h4>
<p>If you are using an ORB that supports CORBA later than version 2.0, you do not have to do anything to support double-byte characters. Strings and characters in ColdFusion will appropriately convert to wstring and wchar when they are used. However, the CORBA 2.0 IDL specification does not support the wchar and wstring types, and uses the 8-bit Latin-1 character set to represent string data. In this case, you cannot pass parameters containing those characters, however, you can call parameters with char and string types using ColdFusion string data.</p>


<hr />
<p align="right"><p align="right"><a href="00001588.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001590.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001589.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



