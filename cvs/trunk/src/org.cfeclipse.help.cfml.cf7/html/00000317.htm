<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>cfqueryparam</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000316.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000318.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>cfqueryparam</h1>
<h4><a name="wp1355831"></a>Description</h4>
<p>Verifies the data type of a query parameter and, for DBMSs that support bind variables, enables ColdFusion to use bind variables in the SQL statement. Bind variable usage enhances performance when executing a <code>cfquery</code> statement multiple times.</p>
<p>This tag is nested within a <code>cfquery</code> tag, embedded in a query SQL statement. If you specify optional parameters, this tag performs data validation.</p>
<p>Macromedia recommends that you use the <code>cfqueryparam</code> tag within every <code>cfquery</code> tag, to help secure your databases from unauthorized users. For more information, see Security Bulletin ASB99-04, &quot;<i>Multiple SQL Statements in Dynamic Queries</i>,&quot; at <br /><a href="http://www.macromedia.com/devnet/security/security_zone/asb99-04.html" target="mm_window">www.macromedia.com/devnet/security/security_zone/asb99-04.html</a>, and <a href="00001252.htm#1127430">Accessing and Retrieving Data</a> in <i>ColdFusion MX Developer's Guide</i>.</p>
<h4><a name="wp1958303"></a>Category</h4>
<p><a href="00000198.htm#2459589">Database manipulation tags</a></p>
<h4><a name="wp1102478"></a>Syntax</h4>
<pre>&lt;cfquery <br />   name = &quot;query_name&quot;<br />   dataSource = &quot;ds_name&quot;<br />   <i>...other attributes...<br /></i>   SQL STATEMENT column_name = <br />   &lt;cfqueryparam value = &quot;parameter value&quot;<br />      CFSQLType = &quot;parameter type&quot;<br />      maxLength = &quot;maximum parameter length&quot;<br />      scale = &quot;number of decimal places&quot;<br />      null = &quot;yes&quot; or &quot;no&quot;<br />      list = &quot;yes&quot; or &quot;no&quot;<br />      separator = &quot;separator character&quot;&gt;<br />   AND/OR ...additional criteria of the WHERE clause...<br />   &lt;/cfquery&gt;
</pre><h4><a name="wp1958378"></a>See also</h4>
<p><a href="00000280.htm#1100472">cfinsert</a>, <a href="00000313.htm#1102102">cfprocparam</a>, <a href="00000314.htm#1102246">cfprocresult</a>, <a href="00000316.htm#1102316">cfquery</a>, <a href="00000338.htm#2607555">cfstoredproc</a>, <a href="00000346.htm#1104164">cftransaction</a>, <a href="00000350.htm#1104662">cfupdate</a>; <a href="00001257.htm#1142383">Enhancing security with cfqueryparam</a> in <a href="00001252.htm#1127430">Accessing and Retrieving Data</a> in <i>ColdFusion MX Developer's Guide</i></p>
<h4><a name="wp1958380"></a>Attributes</h4>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Req/Opt
    </th>
    <th>
Default
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>value</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Value that ColdFusion passes to the right of the comparison operator in a <code>where</code> clause. </p>
<p>If <code>CFSQLType</code> is a date or time option, ensure that the date value uses your DBMS-specific date format. Use the <code>CreateODBCDateTime</code> or <code>DateFormat</code> and <code>TimeFormat</code> functions to format the date value.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CFSQLType</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>CF_SQL_CHAR</p>
    </td>
    <td>
<p>SQL type that parameter (any type) is bound to: </p>
<ul>
<li>
   CF_SQL_BIGINT
</li>
<li>
   CF_SQL_BIT
</li>
<li>
   CF_SQL_CHAR 
</li>
<li>
   CF_SQL_BLOB 
</li>
<li>
   CF_SQL_CLOB
</li>
<li>
   CF_SQL_DATE
</li>
<li>
   CF_SQL_DECIMAL
</li>
<li>
   CF_SQL_DOUBLE
</li>
<li>
   CF_SQL_FLOAT
</li>
<li>
   CF_SQL_IDSTAMP
</li>
<li>
   CF_SQL_INTEGER
</li>
<li>
   CF_SQL_LONGVARCHAR
</li>
<li>
   CF_SQL_MONEY
</li>
<li>
   CF_SQL_MONEY4
</li>
<li>
   CF_SQL_NUMERIC
</li>
<li>
   CF_SQL_REAL
</li>
<li>
   CF_SQL_REFCURSOR
</li>
<li>
   CF_SQL_SMALLINT
</li>
<li>
   CF_SQL_TIME
</li>
<li>
   CF_SQL_TIMESTAMP
</li>
<li>
   CF_SQL_TINYINT
</li>
<li>
   CF_SQL_VARCHAR
</li>
</ul>
    </td>
  </tr>
  <tr>
    <td>
<p>maxLength</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>Length of string in <code>value</code> attribute</p>
    </td>
    <td>
<p>Maximum length of parameter. Ensures that the length check is done by ColdFusion before the string is sent to the DBMS, thereby helping to prevent the submission of malicious strings.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>scale</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>0</p>
    </td>
    <td>
<p>Number of decimal places in parameter. Applies to <code>CF_SQL_NUMERIC</code> and <code>CF_SQL_DECIMAL</code>.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>null</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<p>Whether parameter is passed as a null value:</p>
<ul>
<li>
   Yes: tag ignores the <code>value</code> attribute.
</li>
<li>
   No
</li>
</ul>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>list</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>No</p>
    </td>
    <td>
<ul>
<li>
   Yes: the <code>value</code> attribute value is a delimited list.
</li>
<li>
   No
</li>
</ul>
    </td>
  </tr>
  <tr>
    <td>
<p>separator</p>
    </td>
    <td>
<p>Required, if you specify a list in <code>value</code> attribute</p>
    </td>
    <td>
<p>, (comma)</p>
    </td>
    <td>
<p>Character that separates values in list, in <code>value</code> attribute. </p>
    </td>
  </tr>
</table>

<h4><a name="wp1102538"></a>Usage</h4>
<p>Use the <code>cfqueryparam</code> tag in any SQL statement (for example, SELECT, INSERT, UPDATE, and DELETE) that uses ColdFusion variables. </p>
<p>You cannot use the <code>cfquery</code> <code>cachedAfter</code> or <code>cachedWithin</code> attributes with <code>cfqueryparam.</code></p>
<p>For maximum validation of string data, specify the <code>maxlength</code> attribute.</p>
<p>This tag does the following: </p>
<ul>
<li>
   Allows the use of SQL bind parameters, which improves performance.
</li>
<li>
   Ensures that variable data matches the specified SQL type.
</li>
<li>
   Allows long text fields to be updated from a SQL statement.
</li>
<li>
   Escapes string variables in single-quotation marks.
</li>
</ul>
<p>To benefit from the enhanced performance of bind variables, you must use <code>cfqueryparam</code> for all ColdFusion variables, and your DBMS must support bind variables. If a DBMS does not support bind parameters, ColdFusion validates and substitutes the validated parameter value back into the string. If validation fails, it returns an error message.</p>
<p>The validation rules are as follows:</p>
<ul>
<li>
   For these types, a data value can be converted to a numeric value: CF_SQL_SMALLINT, CF_SQL_INTEGER, CF_SQL_REAL, CF_SQL_FLOAT, CF_SQL_DOUBLE, CF_SQL_TINYINT, CF_SQL_MONEY, CF_SQL_MONEY4, CF_SQL_DECIMAL, CF_SQL_NUMERIC, and CF_SQL_BIGINT
</li>
<li>
   For these types, a data value can be converted to a date supported by the target data source: CF_SQL_DATE, CF_SQL_TIME, CF_SQL_TIMESTAMP
</li>
<li>
   For all other types, if the <code>maxLength </code>attribute is used, a data value cannot exceed the maximum length specified.
</li>
</ul>
<p>ColdFusion debug output shows the bind variables as question marks and lists the values beneath the query, in order of usage.</p>
<p><strong>Note: </strong>To insert an empty string into a Microsoft Access table using the SequelLink ODBC Socket or SequelLink Access driver, the <code>CFSQLType</code> attribute must specify CF_SQL_LONGVARCHAR.</p><p>The following table shows the mapping of ColdFusion SQL data types with JDBC SQL types and those of the listed database management systems:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
ColdFusion
    </th>
    <th>
JDBC
    </th>
    <th>
DB2
    </th>
    <th>
Informix
    </th>
    <th>
Oracle
    </th>
    <th>
MSSQL
    </th>
  </tr>
  <tr>
    <td>
<p>CF_SQL_ARRAY</p>
    </td>
    <td>
<p>ARRAY</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_BIGINT</p>
    </td>
    <td>
<p>BIGINT</p>
    </td>
    <td>
<p>Bigint</p>
    </td>
    <td>
<p>int8, serial8</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_BINARY</p>
    </td>
    <td>
<p>BINARY</p>
    </td>
    <td>
<p>Char for Bit Data</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>binary</p>
<p>timestamp</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_BIT</p>
    </td>
    <td>
<p>BIT</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>boolean</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>bit</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_BLOB</p>
    </td>
    <td>
<p>BLOB</p>
    </td>
    <td>
<p>Blob</p>
    </td>
    <td>
<p>blob</p>
    </td>
    <td>
<p>blob, bfile</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_CHAR</p>
    </td>
    <td>
<p>CHAR</p>
    </td>
    <td>
<p>Char</p>
    </td>
    <td>
<p>char, </p>
<p>nchar</p>
    </td>
    <td>
<p>char,</p>
<p>nchar</p>
    </td>
    <td>
<p>char, nchar,</p>
<p>unique<br />identifier</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_CLOB</p>
    </td>
    <td>
<p>CLOB</p>
    </td>
    <td>
<p>Clob</p>
    </td>
    <td>
<p>clob</p>
    </td>
    <td>
<p>clob,nclob</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_DATE</p>
    </td>
    <td>
<p>DATE</p>
    </td>
    <td>
<p>Date</p>
    </td>
    <td>
<p>date, datetime, year to day</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_DECIMAL</p>
    </td>
    <td>
<p>DECIMAL</p>
    </td>
    <td>
<p>Decimal</p>
    </td>
    <td>
<p>decimal, money</p>
    </td>
    <td>
<p>number</p>
    </td>
    <td>
<p>decimal, money, small<br />money</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_DISTINCT</p>
    </td>
    <td>
<p>DISTINCT</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_DOUBLE</p>
    </td>
    <td>
<p>DOUBLE</p>
    </td>
    <td>
<p>Double</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_FLOAT</p>
    </td>
    <td>
<p>FLOAT</p>
    </td>
    <td>
<p>Float</p>
    </td>
    <td>
<p>float</p>
    </td>
    <td>
<p>number</p>
    </td>
    <td>
<p>float</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_IDSTAMP</p>
    </td>
    <td>
<p>CHAR</p>
    </td>
    <td>
<p>Char</p>
    </td>
    <td>
<p>char, nchar</p>
    </td>
    <td>
<p>char, nchar</p>
    </td>
    <td>
<p>char, nchar, unique<br />identifier</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_INTEGER</p>
    </td>
    <td>
<p>INTEGER</p>
    </td>
    <td>
<p>Integer</p>
    </td>
    <td>
<p>integer, serial</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>int</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_LONGVARBINARY</p>
    </td>
    <td>
<p>LONGVARBINARY</p>
    </td>
    <td>
<p>Long Varchar for Bit Data</p>
    </td>
    <td>
<p>byte</p>
    </td>
    <td>
<p>long raw</p>
    </td>
    <td>
<p>image</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_LONGVARCHAR</p>
    </td>
    <td>
<p>LONGVARCHAR</p>
    </td>
    <td>
<p>Long Varchar</p>
    </td>
    <td>
<p>text</p>
    </td>
    <td>
<p>long</p>
    </td>
    <td>
<p>text, ntext</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_MONEY</p>
    </td>
    <td>
<p>DOUBLE</p>
    </td>
    <td>
<p>Double</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_MONEY4</p>
    </td>
    <td>
<p>DOUBLE</p>
    </td>
    <td>
<p>Double</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_NULL</p>
    </td>
    <td>
<p>NULL</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_NUMERIC</p>
    </td>
    <td>
<p>NUMERIC</p>
    </td>
    <td>
<p>Numeric</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>numeric</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_OTHER</p>
    </td>
    <td>
<p>OTHER</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_REAL</p>
    </td>
    <td>
<p>REAL</p>
    </td>
    <td>
<p>Real</p>
    </td>
    <td>
<p>smallfloat</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>real</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_REFCURSOR</p>
    </td>
    <td>
<p>REF</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_SMALLINT</p>
    </td>
    <td>
<p>SMALLINT</p>
    </td>
    <td>
<p>Smallint</p>
    </td>
    <td>
<p>smallint</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>smallint</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_STRUCT</p>
    </td>
    <td>
<p>STRUCT</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_TIME</p>
    </td>
    <td>
<p>TIME</p>
    </td>
    <td>
<p>Time</p>
    </td>
    <td>
<p>datetime hour to second</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_TIMESTAMP</p>
    </td>
    <td>
<p>TIMESTAMP</p>
    </td>
    <td>
<p>Timestamp</p>
    </td>
    <td>
<p>datetime year to fraction(5), datetime year to second</p>
    </td>
    <td>
<p>date</p>
    </td>
    <td>
<p>datetime, smalldate<br />time</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_TINYINT</p>
    </td>
    <td>
<p>TINYINT</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>tinyint</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CF_SQL_VARBINARY</p>
    </td>
    <td>
<p>VARBINARY</p>
    </td>
    <td>
<p>Rowid</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>raw</p>
    </td>
    <td>
<p>varbinary</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CF_SQL_VARCHAR</p>
    </td>
    <td>
<p>VARCHAR</p>
    </td>
    <td>
<p>Varchar</p>
    </td>
    <td>
<p>varchar, nvarchar, lvarchar</p>
    </td>
    <td>
<p>varchar2, nvarchar2</p>
    </td>
    <td>
<p>varchar, nvarchar, sysname</p>
    </td>
  </tr>
</table>

<h4><a name="wp2861116"></a>Example</h4>
<pre>&lt;!--- This example shows cfqueryparam with VALID input in Course_ID. ---&gt;
&lt;h3&gt;cfqueryparam Example&lt;/h3&gt;
&lt;cfset Course_ID = 12&gt;
&lt;cfquery name = &quot;getFirst&quot; dataSource = &quot;cfdocexamples&quot;&gt;
   SELECT * 
   FROM courses
   WHERE Course_ID = &lt;cfqueryPARAM value = &quot;#Course_ID#&quot;
   CFSQLType = &quot;CF_SQL_INTEGER&quot;&gt; 
&lt;/cfquery&gt;
&lt;cfoutput query = &quot;getFirst&quot;&gt;
   &lt;p&gt;Course Number: #Course_ID#&lt;br&gt; Description: #descript#&lt;/p&gt;
&lt;/cfoutput&gt;

&lt;!--- This example shows the use of CFQUERYPARAM when INVALID string data is
   in Course_ID. ----&gt; 
&lt;p&gt;This example throws an error because the value passed in the CFQUERYPARAM 
tag exceeds the MAXLENGTH attribute&lt;/p&gt; 

&lt;cfset LastName=&quot;Peterson; DELETE employees WHERE LastName=&#39;Peterson&#39;&quot;&gt;
&lt;!------- Note that for string input you must specify the MAXLENGTH attribute 
   for validation. --------------------------------------------------&gt; 
&lt;cfquery 
   name=&quot;getFirst&quot; datasource=&quot;cfdocexamples&quot;&gt; 
   SELECT * 
   FROM employees 
   WHERE LastName=&lt;cfqueryparam 
                        value=&quot;#LastName#&quot; 
                        cfsqltype=&quot;CF_SQL_VARCHAR&quot; 
                        maxlength=&quot;17&quot;&gt; 
&lt;/cfquery&gt; 
&lt;cfoutput 
   query=&quot;getFirst&quot;&gt;       &lt;p&gt;
      Course Number: #FirstName# #LastName# 
      Description: #Department# &lt;/p&gt; 
&lt;/cfoutput&gt; 
</pre>

<hr />
<p align="right"><p align="right"><a href="00000316.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000318.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000317.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



