<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Locking code with cflock</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001165.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001167.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Locking code with cflock</h1>
<p>The <a href="00000285.htm#1100787"><code>cflock</code></a> tag controls simultaneous access to ColdFusion code. The <code>cflock</code> tag lets you do the following:</p>
<ul>
<li>
   Protect sections of code that access and manipulate shared data in the Session, Application, and Server scopes.
</li>
<li>
   Ensure that file updates do not fail because files are open for writing by other applications or ColdFusion tags.
</li>
<li>
   Ensure that applications do not try to simultaneously access ColdFusion extension tags written using the CFX API that are not thread-safe. This is particularly important for CFX tags that use shared (global) data structures without protecting them from simultaneous access (not thread-safe). However, Java CFX tags can also access shared resources that could become inconsistent if the CFX tag access is not locked.
</li>
<li>
   Ensure that applications do not try to simultaneously access databases that are not thread-safe. (This is not necessary for most database systems.)
</li>
</ul>
<p>ColdFusion&#160;MX is a multithreaded web application server that can process multiple page requests at a time. As a result, the server can attempt to access the same information or resources simultaneously, as the result of two or more requests. </p>
<p>Although ColdFusion&#160;MX is thread-safe and does not try to modify a variable simultaneously, it&#160;does not ensure the correct order of access to information. If multiple pages, or multiple invocations of a page, attempt to write data simultaneously, or read and write it at the same time, the resulting data can be inconsistent, as shown in the following <a href="00001167.htm#1159055">Sample locking scenarios</a> section.</p>
<p>Similarly, ColdFusion&#160;MX cannot automatically ensure that two sections of code do not attempt to access external resources such as files, databases, or CFX tags that cannot properly handle simultaneous requests. Nor can ColdFusion&#160;MX ensure that the order of access to these shared resources is consistent and results in valid data.</p>
<p>By locking code that accesses such resources so that only one thread can access the resource at a time, you can prevent race conditions.</p>
<p>This section describes the following topics:</p>
<ul>
<li>
   <a href="00001167.htm#1159055">Sample locking scenarios</a>
</li>
<li>
   <a href="00001168.htm#1170715">Using the cflock tag with write-once variables</a>
</li>
<li>
   <a href="00001169.htm#1185978">Using the cflock tag</a>
</li>
<li>
   <a href="00001170.htm#1154977">Considering lock granularity</a>
</li>
<li>
   <a href="00001171.htm#1186002">Nesting locks and avoiding deadlocks</a>
</li>
</ul>


<hr />
<p align="right"><p align="right"><a href="00001165.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001167.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001166.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



