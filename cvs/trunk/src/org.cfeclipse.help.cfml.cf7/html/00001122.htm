<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Example: a complete Application.cfc</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001121.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001123.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Example: a complete Application.cfc</h1>
<p>The following example is a simplified Application.cfc file that illustrates the basic use of all application event handlers:</p>
<pre>&lt;cfcomponent&gt;
&lt;cfset This.name = &quot;TestApplication&quot;&gt;
&lt;cfset This.Sessionmanagement=true&gt;
&lt;cfset This.Sessiontimeout=&quot;#createtimespan(0,0,10,0)#&quot;&gt;
&lt;cfset This.applicationtimeout=&quot;#createtimespan(5,0,0,0)#&quot;&gt;

&lt;cffunction name=&quot;onApplicationStart&quot;&gt;
   &lt;cftry&gt;
      &lt;!--- Test whether the DB that this application uses is accessible 
            by selecting some data. ---&gt;
      &lt;cfquery name=&quot;testDB&quot; dataSource=&quot;cfdocexamples&quot; maxrows=&quot;2&quot;&gt;
         SELECT Emp_ID FROM employee
      &lt;/cfquery&gt;
      &lt;!--- If we get database error, report it to the user, log the error
         information, and do not start the application. ---&gt;
      &lt;cfcatch type=&quot;database&quot;&gt;
         &lt;cfoutput&gt;
            This application encountered an error.&lt;br&gt;
            Please contact support.
         &lt;/cfoutput&gt;
         &lt;cflog file=&quot;#This.Name#&quot; type=&quot;error&quot; 
            text=&quot;cfdocexamples DB not available. message: #cfcatch.message# 
            Detail: #cfcatch.detail# Native Error: #cfcatch.NativeErrorCode#&quot;&gt;
         &lt;cfreturn False&gt;
      &lt;/cfcatch&gt;
   &lt;/cftry&gt;
   &lt;cflog file=&quot;#This.Name#&quot; type=&quot;Information&quot; text=&quot;Application Started&quot;&gt;
   &lt;!--- You do not have to lock code in the onApplicationStart method that sets Application scope variables. ---&gt;
   &lt;cfscript&gt;
      Application.availableResources=0;
      Application.counter1=1;
      Application.sessions=0;
   &lt;/cfscript&gt;
   &lt;!--- You do not need to return True if you don&#39;t set the cffunction returntype attribute. ---&gt;
 &lt;/cffunction&gt;

&lt;cffunction name=&quot;onApplicationEnd&quot;&gt;
   &lt;cfargument name=&quot;ApplicationScope&quot; required=true/&gt;
   &lt;cflog file=&quot;#This.Name#&quot; type=&quot;Information&quot; 
      text=&quot;Application #ApplicationScope.applicationname# Ended&quot;&gt;
&lt;/cffunction&gt;


&lt;cffunction name=&quot;onRequestStart&quot;&gt; 
   &lt;!--- Authentication code, generated by the Dreamweaver Login Wizard,
      makes sure that a user is logged in, and if not displays a login page. ---&gt;
   &lt;cfinclude template=&quot;mm_wizard_application_include.cfm&quot;&gt; 
&lt;!--- If it's time for maintenance, tell users to come back later. ---&gt;
   &lt;cfscript&gt;
      if ((Hour(now()) gt 1) and (Hour(now()) lt 3)) {
         WriteOutput(&quot;The system is undergoing periodic maintenance. 
            Please return after 3:00 AM Eastern time.&quot;);
         return false;
      } else {
         this.start=now();
      }
   &lt;/cfscript&gt;
&lt;/cffunction&gt;

&lt;cffunction name=&quot;onRequest&quot;&gt;
   &lt;cfargument name = &quot;targetPage&quot; type=&quot;String&quot; required=true/&gt;
   &lt;cfsavecontent variable=&quot;content&quot;&gt;
      &lt;cfinclude template=#Arguments.targetPage#&gt;
   &lt;/cfsavecontent&gt;
   &lt;!--- This is a minimal example of an onRequest filter. ---&gt;
   &lt;cfoutput&gt;
      #replace(content, &quot;report&quot;, &quot;MyCompany Quarterly Report&quot;, &quot;all&quot;)#
   &lt;/cfoutput&gt;
&lt;/cffunction&gt;

&lt;!--- Display a different footer for logged in users than for guest users or
       users who have not logged in. ---&gt;

&lt;cffunction name=&quot;onRequestEnd&quot;&gt;
   &lt;cfargument type=&quot;String&quot; name = &quot;targetTemplate&quot; required=true/&gt;
   &lt;cfset theAuthuser=getauthuser()&gt;
   &lt;cfif ((theAuthUser EQ &quot;guest&quot;) OR (theAuthUser EQ &quot;&quot;))&gt;
      &lt;cfinclude template=&quot;noauthuserfooter.cfm&quot;&gt;
   &lt;cfelse&gt;
      &lt;cfinclude template=&quot;authuserfooter.cfm&quot;&gt;
   &lt;/cfif&gt; 
&lt;/cffunction&gt;

 
&lt;cffunction name=&quot;onSessionStart&quot;&gt;
   &lt;cfscript&gt;
      Session.started = now();
      Session.shoppingCart = StructNew();
      Session.shoppingCart.items =0;
   &lt;/cfscript&gt;
   &lt;cflock timeout=&quot;5&quot; throwontimeout=&quot;No&quot; type=&quot;EXCLUSIVE&quot; scope=&quot;SESSION&quot;&gt;
      &lt;cfset Application.sessions = Application.sessions + 1&gt;
   &lt;/cflock&gt;
   &lt;cflog file=&quot;#This.Name#&quot; type=&quot;Information&quot; text=&quot;Session:<br />      #Session.sessionid# started&quot;&gt;
&lt;/cffunction&gt;

&lt;cffunction name=&quot;onSessionEnd&quot;&gt;
   &lt;cfargument name = &quot;SessionScope&quot; required=true/&gt;
   &lt;cflog file=&quot;#This.Name#&quot; type=&quot;Information&quot; text=&quot;Session:<br />      #arguments.SessionScope.sessionid# ended&quot;&gt;
&lt;/cffunction&gt;

&lt;cffunction name=&quot;onError&quot;&gt;
   &lt;cfargument name=&quot;Exception&quot; required=true/&gt;
   &lt;cfargument type=&quot;String&quot; name = &quot;EventName&quot; required=true/&gt;
   &lt;!--- Log all errors. ---&gt;
   &lt;cflog file=&quot;#This.Name#&quot; type=&quot;error&quot; text=&quot;Event Name: #Eventname#&quot;&gt;
   &lt;cflog file=&quot;#This.Name#&quot; type=&quot;error&quot; text=&quot;Message: #exception.message#&quot;&gt;
   &lt;!--- Some exceptions, including server-side validation errors, do not
          generate a rootcause structure. ---&gt;
   &lt;cfif isdefined(&quot;exception.rootcause&quot;)&gt;
      &lt;cflog file=&quot;#This.Name#&quot; type=&quot;error&quot; 
         text=&quot;Root Cause Message: #exception.rootcause.message#&quot;&gt;
   &lt;/cfif&gt;   
   &lt;!--- Display an error message if there is a page context. ---&gt;
   &lt;cfif NOT (Arguments.EventName IS onSessionEnd) OR 
         (Arguments.EventName IS onApplicationEnd)&gt;
      &lt;cfoutput&gt;
         &lt;h2&gt;An unexpected error occurred.&lt;/h2&gt;
         &lt;p&gt;Please provide the following information to technical support:&lt;/p&gt;
         &lt;p&gt;Error Event: #EventName#&lt;/p&gt;
         &lt;p&gt;Error details:&lt;br&gt;
         &lt;cfdump var=#exception#&gt;&lt;/p&gt;
      &lt;/cfoutput&gt;
   &lt;/cfif&gt;
 &lt;/cffunction&gt;

&lt;/cfcomponent&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00001121.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001123.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001122.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



