<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Creating and using CORBA objects</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001586.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001588.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Creating and using CORBA objects</h1>
<p>The following sections describe how to create, or instantiate, a CORBA object and how to use it in your ColdFusion application.</p>
<ul>
<li>
   <a href="00001587.htm#1128389">Creating CORBA objects</a>
</li>
<li>
   <a href="00001588.htm#1134355">Using CORBA objects in ColdFusion</a>
</li>
<li>
   <a href="00001590.htm#1141212">Handling exceptions</a>
</li>
</ul>
<h2><a name="wp1128389"></a>Creating CORBA objects</h2>
<p>The <a href="00000302.htm#2820239"><code>cfobject</code></a> tag and <a href="00000424.htm#1102241"><code>CreateObject</code></a> functions create in ColdFusion a stub, or proxy object, for the CORBA object on the remote server. You use this stub object to invoke the remote object. </p>
<p>The following table describes the attributes you use in the <code>cfobject</code> tag to create a CORBA object: </p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Description 
    </th>
  </tr>
  <tr>
    <td>
<p>type</p>
    </td>
    <td>
<p>Must be CORBA. COM is the default.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>context</p>
    </td>
    <td>
<p>Specifies the CORBA binding method, that is, how the object is obtained, as follows:</p>
<ul>
<li>
   <code>IOR</code>&#160;Uses a file containing the object&#39;s unique Interoperable Object Reference. 
</li>
<li>
   <code>NameService</code>&#160;Uses a naming service.
</li>
</ul>
    </td>
  </tr>
  <tr>
    <td>
<p>class</p>
    </td>
    <td>
<p>Specifies the information required for the binding method to access the object.</p>
<p>If you set the <code>context</code> attribute to <code>IOR</code>, The <code>class</code> attribute must be to the full pathname of a file containing the string version of the IOR. ColdFusion must be able to read this IOR file at all times, so make it local to the server or put it on the network in an accessible location.</p>
<p>If you set the <code>context</code> attribute to <code>NameService</code>, The <code>class</code> attribute must be a name delimited by forward slashes (/), such as MyCompany/Department/Dev. You can use period-delimited &quot;kind&quot; identifiers as part of the class attribute; for example, Macromedia.current/Eng.current/CF&quot;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>name</p>
    </td>
    <td>
<p>Specifies the name (handle) that your application uses to call the object&#39;s interface. </p>
    </td>
  </tr>
  <tr>
    <td>
<p>locale</p>
    </td>
    <td>
<p>(Optional) Identifies the connector configuration. You can omit this option if ColdFusion&#160;MX Administrator has only one connector configuration, or if it has multiple connector configurations and you want to use the one that is currently selected in the Administrator. If you specify this attribute, it must be an ORB name you specified in the CORBA Connector ORB Name field when you configured a CORBA connector in ColdFusion&#160;MX Administrator; for example, Visibroker.</p>
    </td>
  </tr>
</table>

<p>For example, use the following CFML to invoke a CORBA object specified by the tester.ior file if you configured your ORB name as Visibroker:</p>
<pre>&lt;cfobject action = &quot;create&quot; type = &quot;CORBA&quot; context = &quot;IOR&quot; <br />class = &quot;d:\temp\tester.ior&quot; name = &quot;handle&quot; locale = &quot;Visibroker&quot;&gt;
</pre><p>When you use the <code>CreateObject</code> function to invoke this CORBA object, specify the name as the function return variable, and specify the type, class, context, and locale as arguments. For example, the following line creates the same object as the preceding <code>cfobject</code> tag:</p>
<pre>handle = CreateObject(&quot;CORBA&quot;, &quot;d:\temp\tester.ior&quot;, &quot;IOR&quot;, &quot;Visibroker&quot;)
</pre><p>For the complete <a href="00000302.htm#2820239"><code>cfobject</code></a> and <a href="00000424.htm#1102241"><code>CreateObject</code></a> syntax, see <i>CFML Reference</i>. </p>
<h3><a name="wp1139490"></a>Using a naming service</h3>
<p>Currently, ColdFusion can only resolve objects registered in a CORBA 2.3-compliant naming service. </p>
<p>If you use a naming service, make sure that its naming context is identical to the naming context specified in the property file of the Connector configuration in use, as specified in the ColdFusion&#160;MX Administrator CORBA Connectors page. The property file must contain the line &quot;SVCnameroot=<i>name</i>&quot; where <i>name</i> is the naming context to be used. The server implementing the object must bind to this context, and register the appropriate name. </p>


<hr />
<p align="right"><p align="right"><a href="00001586.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001588.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001587.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



