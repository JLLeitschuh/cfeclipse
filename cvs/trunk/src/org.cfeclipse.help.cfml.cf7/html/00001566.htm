<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using Java objects</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001565.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001567.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using Java objects</h1>
<p>You use the <a href="00000302.htm#2820239"><code>cfobject</code></a> tag to create an instance of a Java object. You use other ColdFusion tags, such as <a href="00000334.htm#1103445"><code>cfset</code></a> and <a href="00000309.htm#1101659"><code>cfoutput</code></a>, or CFScript to invoke properties (attributes), and methods (operations) on the object.</p>
<p>Method arguments and return values can be any valid Java type; for example, simple arrays and objects. ColdFusion does the appropriate conversions when strings are passed as arguments, but not when they are received as return values. For more information on type conversion issues, see <a href="00001568.htm#1160838">Java and ColdFusion data type conversions</a>.</p>
<p>The examples in the following sections assume that the <code>name</code> attribute in the <code>cfobject</code> tag specified the value obj, and that the object has a property called Property, and methods called Method1, Method2, and Method3.</p>
<p><strong>Note: </strong>The <code>cfdump</code> tag displays an object's public methods and data.</p><ul>
<li>
   <a href="00001566.htm#1134366">Using basic object techniques</a>
</li>
<li>
   <a href="00001567.htm#1134412">Creating and using a simple Java class</a>
</li>
<li>
   <a href="00001568.htm#1160838">Java and ColdFusion data type conversions</a>
</li>
<li>
   <a href="00001569.htm#1134618">Handling Java exceptions</a>
</li>
<li>
   <a href="00001570.htm#1134703">Examples: using Java with CFML</a>
</li>
</ul>
<h2><a name="wp1134366"></a>Using basic object techniques</h2>
<p>The following sections describe how to invoke Java objects.</p>
<h3><a name="wp1134372"></a>Invoking objects</h3>
<p>The <code>cfobject</code> tag makes Java objects available in ColdFusion&#160;MX. It can access any Java class that is available on the JVM classpath or in either of the following locations:</p>
<ul>
<li>
   In a Java archive (.jar) file in <i>web_root</i>/WEB-INF/lib
</li>
<li>
   In a class (.class) file in <i>web_root</i>/WEB-INF/classes
</li>
</ul>
<p>For example:</p>
<pre>&lt;<code>cfobject</code> type=&quot;Java&quot; class=&quot;MyClass&quot; name=&quot;myObj&quot;&gt;
</pre><p>Although the <a href="00000302.htm#2820239"><code>cfobject</code></a> tag loads the class, it does <strong>not</strong> create an instance object. Only static methods and fields are accessible immediately after the call to <code>cfobject</code>. </p>
<p>If you call a public non-static method on the object without first calling the <code>init</code> method, there ColdFusion makes an implicit call to the default constructor.</p>
<p>To call an object constructor explicitly, use the special ColdFusion <code>init</code> method with the appropriate arguments after you use the <code>cfobject tag</code>; for example:</p>
<pre>&lt;<code>cfobject</code> type=&quot;Java&quot; class=&quot;MyClass&quot; name=&quot;myObj&quot;&gt;
&lt;cfset ret=myObj.init(arg1, arg2)&gt;
</pre><p><strong>Note: </strong>The <code>init</code> method is <i>not</i> a method of the object, but a ColdFusion identifier that calls the <code>new</code> function on the class constructor. So, if a Java object has an <code>init</code> method, a name conflict exists and you cannot call the object's <code>init</code> method.</p><p>To have persistent access to an object, you must use the <code>init</code> function, because it returns a reference to an instance of the object, and <code>cfobject</code> does not.</p>
<p>An object created using <code>cfobject</code> or returned by other objects is implicitly released at the end of the ColdFusion page execution.</p>
<h3><a name="wp1134382"></a>Using properties</h3>
<p>Use the following coding syntax to access properties if the object does either of the following actions:</p>
<ul>
<li>
   Exposes the properties as public properties.
</li>
<li>
   Does not make the properties public, but is a JavaBean that provides public getter and setter methods of the form get<i>PropertyName</i>() and set<i>PropertyName</i>(<i>value</i>). For more information, see the following <a href="00001566.htm#1154489">Calling JavaBean get and set methods</a> section.
</li>
</ul>
<h4>To set a property:</h4>
<pre>&lt;cfset obj.property = &quot;somevalue&quot;&gt;
</pre><h4>To get a property:</h4>
<pre>&lt;cfset value = obj.property&gt;
</pre><p><strong>Note: </strong>ColdFusion does not require that property and method names be consistently capitalized. However, you should use the same case in ColdFusion as you do in Java to ensure consistency.</p><h3><a name="wp1167250"></a>Calling methods</h3>
<p>Object methods usually take zero or more arguments. Some methods return values, while others might not. Use the following techniques to call methods:</p>
<ul>
<li>
   If the method has no arguments, follow the method name with empty parentheses, as in the following <a href="00000334.htm#1103445"><code>cfset</code></a> tag:
<pre>
&lt;cfset retVal = obj.Method1()&gt;
</pre>
</li>
<li>
   If the method has one or more arguments, put the arguments in parentheses, separated by commas, as in the following example, which has one integer argument and one string argument:
<pre>
&lt;cfset x = 23&gt;
&lt;cfset retVal = obj.Method1(x, &quot;a string literal&quot;)&gt;
</pre>
</li>
</ul>
<p><strong>Note: </strong>When you invoke a Java method, the type of the data being used is important. For more information see <a href="00001568.htm#1160838">Java and ColdFusion data type conversions</a>.</p><h3><a name="wp1154489"></a>Calling JavaBean get and set methods</h3>
<p>ColdFusion can automatically invoke get<i>PropertyName</i>() and set<i>PropertyName</i>(<i>value</i>) methods if a Java class conforms to the JavaBeans pattern. As a result, you can set or get the property by referencing it directly, without having to explicitly invoke a method.</p>
<p>For example, if the myFishTank class is a JavaBean, the following code returns the results of calling the getTotalFish() method on the myFish object:</p>
<pre>&lt;cfoutput&gt;
   There are currently #myFish.TotalFish# fish in the tank.
&lt;/cfoutput&gt;
</pre><p>The following example adds one guppy to a myFish object by implicitly calling the setGuppyCount(int <i>number</i>) method:</p>
<pre>&lt;cfset myFish.GuppyCount = myFish.GuppyCount + 1&gt;
</pre><p><strong>Note: </strong>You can use the direct reference method to get or set values in some classes that have <i>getProperty</i> and <i>setProperty</i> methods but do not conform fully to the JavaBean pattern. However, you cannot use this technique for all classes that have <i>getProperty</i> and <i>setProperty</i> methods. For example, you cannot directly reference any of the following standard Java classes, or classes derived from them: Date, Boolean, Short, Integer, Long, Float, Double, Char, Byte, String, List, Array.</p><h3><a name="wp1134406"></a>Calling nested objects</h3>
<p>ColdFusion supports nested (scoped) object calls. For example, if an object method returns another object and you must invoke a property or method on that object, you can use the following syntax:</p>
<pre><code>&lt;cfset prop = myObj.X.Property&gt;</code>.
</pre><p>Similarly, you can use code such as the following CFScript line:</p>
<p>GetPageContext().include(&quot;hello.jsp?name=Bobby&quot;);</p>
<p>In this code, the ColdFusion <a href="00000490.htm#4209678"><code>GetPageContext</code></a> function returns a Java PageContext object, and the line invokes the PageContext object's <code>include</code> method.</p>


<hr />
<p align="right"><p align="right"><a href="00001565.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001567.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001566.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



