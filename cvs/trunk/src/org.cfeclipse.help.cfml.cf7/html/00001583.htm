<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using the Application Scope to improve COM performance</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001582.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001584.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using the Application Scope to improve COM performance</h1>
<p>The Java call to create a new COM object instance can take substantial time. As a result, creating COM objects in ColdFusion MX can be substantially slower than in ColdFusion 5. For example, on some systems, creating a Microsoft Word application object could take over one second using ColdFusion MX, while on the same system, the overhead of creating the Word object might be about 200 milliseconds. </p>
<p>Therefore, in ColdFusion MX, you can improve COM performance substantially if you can share a single COM object in the Application scope among all pages. </p>
<p>Use this technique only if the following are true:</p>
<ul>
<li>
   The COM object does not need to be created for every request or session. (For session-specific objects, consider using the technique described in this section with the Session scope in place of the Application scope.) 
</li>
<li>
   The COM object is designed for sharing.
</li>
</ul>
<p>Because the object can be accessed from multiple pages and sessions simultaneously, you must also consider the following threading and locking issues:</p>
<ul>
<li>
   For best performance, the object should be multithreaded. Otherwise, only one request can access the object at a time.
</li>
<li>
   Lock the code that accesses and modifies common data. In general, you do not have to lock code that modifies a shared object's data, including writable properties or file contents, if the data (as opposed to the object) is not shared by multiple requests. However, specific locking needs depend on the COM object's semantics, interface, and implementation.
</li>
<li>
   All <code>cflock</code> tags in the application that use an Application scope lock share one lock. Therefore, code that accesses a frequently used COM object inside an Application scope lock can become a bottleneck and reduce throughput if many users request pages that use the object. You might be able to avoid some contention by putting code that uses the COM object in named locks; you must put the code that creates the object in an Application scope lock.
</li>
</ul>
<p><strong>Note: </strong>You can also improve the performance of some COM objects by creating Java stubs, as described in <a href="00001582.htm#1148538">Accessing Complex COM Objects using Java proxies</a>. Using a Java stub does not improve performance as much as sharing the COM object, but the technique works with all COM objects. Also, you must generate Java stubs to correctly access complex COM objects that do not properly make all their features available through the COM IDispatcher interface. Therefore, to get the greatest performance increase and prevent possible problems, use both techniques.</p><p>This section includes the following examples:</p>
<ul>
<li>
   <a href="00001584.htm#1149265">Example 1: Using the FileSystem object</a>
</li>
<li>
   <a href="00001585.htm#1149126">Example 2: Using the Microsoft Word application object</a>
</li>
</ul>


<hr />
<p align="right"><p align="right"><a href="00001582.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001584.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001583.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



