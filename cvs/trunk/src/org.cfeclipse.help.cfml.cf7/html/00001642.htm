<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Developing event gateway listener CFCs</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001641.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001643.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Developing event gateway listener CFCs</h1>
<p>The listener CFC responds to event gateway messages. The listener CFC uses, at a minimum, the following basic software elements:</p>
<ul>
<li>
   One or more listener methods
</li>
<li>
   CFEvent structures that contain the messages
</li>
</ul>
<p>Listener CFCs can use ColdFusion persistent scopes to store data that needs to be preserved over multiple CFC invocations or shared with other CFML elements.</p>
<h3><a name="wp132832"></a>Listener methods</h3>
<p>The ColdFusion event gateway service calls one or more listener methods in the CFC to process incoming messages. The number of listener methods that you must write and their names depends on the event gateway. For example, the ColdFusion SMS event gateway requires a single listener method, which is typically named <code>onIncomingMessage</code>. (You can change the SMS event gateway listener method name in the event gateway configuration file.) The ColdFusion XMPP IM event gateway expects the listener CFC to have five methods: <code>onIncomingMessage</code>, <code>onAddBuddyRequest</code>, <code>onAddBuddyResponse</code>, <code>onBuddyStatus</code>, and <code>onIMServerMessage</code>. By default, if the event gateway does not specify the method name, ColdFusion calls the listener CFC's <code>onIncomingMessage</code> method. For the sake of consistency, Macromedia recommends that any event gateway with a single listener method use the <code>onIncomingMessage</code> method.</p>
<p>The listener method does the following:</p>
<ol>
<li>
   Takes a single parameter, a CFEvent structure, described in the following section. 
</li>
<li>
   Processes the contents of the instance as required by the application.
</li>
<li>
   Optionally, returns an outgoing message to the event gateway in a <code>cfreturn</code> tag. It can also send a message back to the event gateway by calling the ColdFusion <code>SendGatewayMessage</code> function.
</li>
</ol>
<p>The following code shows a listener CFC with an <code>onIncomingMessage</code> method that echoes a message back to the Socket event gateway that sent it. It contains the minimum code required to process an incoming message and respond to the sender using the socket gateway.</p>
<pre>&lt;cfcomponent displayname=&quot;echo&quot; hint=&quot;echo messages from the event gateway&quot;&gt;
   &lt;cffunction name=&quot;onIncomingMessage&quot; output=&quot;no&quot;&gt;
      &lt;cfargument name=&quot;CFEvent&quot; type=&quot;struct&quot; required=&quot;yes&quot;&gt;
      &lt;!--- Create a return structure that contains the message. ---&gt;
      &lt;cfset retValue = structNew()&gt;
      &lt;cfset retValue.DestinationID = arguments.CFEvent.OriginatorID&gt;
      &lt;cfset retValue.MESSAGE = &quot;Echo: &quot; &amp; arguments.CFEvent.Data.MESSAGE&gt;
      &lt;!--- Send the return message back. ---&gt;
      &lt;cfreturn retValue&gt;
   &lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre><p>Other event gateways require different fields in the return structure. For example, to echo a message using the SMS event gateway, you use the following lines to specify the return value:</p>
<pre>&lt;cfset retValue.command = &quot;submit&quot;&gt;
&lt;cfset retValue.sourceAddress = arguments.CFEVENT.gatewayid&gt;
&lt;cfset retValue.destAddress = arguments.CFEVENT.originatorid&gt;
&lt;cfset retValue.ShortMessage = &quot;Echo: &quot; &amp; arguments.CFEvent.Data.MESSAGE&gt;
</pre><h3><a name="wp117282"></a>The CFEvent structure</h3>
<p>The ColdFusion event gateway service passes a CFEvent structure with information about the message event to the listener method. The following table describes the structure's fields:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Field
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>GatewayID</p>
    </td>
    <td>
<p>The event gateway that sent the event; the value is the ID of an event gateway instance configured on the ColdFusion MX Administrator Gateways page. If the application calls the <code>SendGatewayMessage</code> function to respond to the event gateway, it uses this ID as the function's first parameter.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Data</p>
    </td>
    <td>
<p>A structure containing the event data, including the message. The <code>Data</code> structure contents depend on the event gateway type.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>OriginatorID</p>
    </td>
    <td>
<p>The originator of the message. The value depends on the protocol or event gateway type. Many event gateways require this value in response messages to identify the destination of the response. Identifies the sender of the message.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>GatewayType</p>
    </td>
    <td>
<p>The type of event gateway, such as SMS. An application that can process messages from multiple event gateway types can use this field. This value is the gateway type name that is specified by the event Gateway class. It is not necessarily the same as the gateway type name in the ColdFusion MX Administrator.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CFCPath</p>
    </td>
    <td>
<p>The location of the listener CFC. The listener CFC does not need to use this field.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>CFCMethod</p>
    </td>
    <td>
<p>The listener method that ColdFusion invokes to process the event. The listener CFC does not need to use this field.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>CFCTimeout</p>
    </td>
    <td>
<p>The time-out, in seconds, for the listener CFC to process the event request. The listener CFC does not need to use this field.</p>
    </td>
  </tr>
</table>

<p>When a ColdFusion application responds to an event gateway message, or sends a message independently, it does not use a CFEvent structure. However, the ColdFusion event gateway service creates a Java CFEvent instance with the message data before calling the event gateway's <code>outgoingMessage</code> method.</p>
<h3><a name="wp133244"></a>Using persistent scopes in listener CFCs</h3>
<p>ColdFusion listener CFCs can use the Application, Client, and Session persistent scopes.</p>
<p>Because incoming event gateway messages are not associated with HTTP requests, ColdFusion uses different session and client IDs for interactions initiated by these events than for CFM Page requests, as follows:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Identifier
    </th>
    <th>
Structure
    </th>
  </tr>
  <tr>
    <td>
<p>Session ID</p>
    </td>
    <td>
<p><i>gatewayType</i>_<i>gatewayID</i>_<i>originatorID</i></p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>cfid</p>
    </td>
    <td>
<p><i>originatorID</i></p>
    </td>
  </tr>
  <tr>
    <td>
<p>cftoken</p>
    </td>
    <td>
<p><i>gatewayType</i>_<i>gatewayID</i></p>
    </td>
  </tr>
</table>
. 
<p>The <i>gatewayID</i> value is the event gateway ID that you set in the ColdFusion MX Administrator, and <i>gatewayType</i> and <i>originatorID</i> are the values that the event gateway sets in the CFEvent instance for an incoming message.</p>
<h4><a name="wp137228"></a>Application scope</h4>
<p>The Application scope lets the CFC share data with any ColdFusion page or CFC that uses the same application name. This way, a listener CFC can use the same Application scope as CFML pages that might be used to send messages. Also, you can put multiple listener CFCs in a single directory and have them share an Application.cfc or Application.cfm file and application name.</p>
<p>As with all ColdFusion code, use the Application.cfc This.name variable or the <code>cfapplication</code> tag to set the application name. The listener CFC can use an Application.cfc or Application.cfm file if the CFC is in a directory that is in or under one of the following places:</p>
<ul>
<li>
   the ColdFusion web root
</li>
<li>
   a directory that is in the ColdFusion&#160;MX Administrator Mappings list. 
</li>
</ul>
<p>The ColdFusion&#160;MX installer creates a mapping in the ColdFusion MX Administrator for the gateway\cfc directory.</p>
<h4><a name="wp137236"></a>Client scope</h4>
<p>The Client scope can store long-term information associated with a message sender's ID. For example, it can store information about an IM buddy.</p>
<p>To use Client variables across multiple connections, your gateway type must use the same client ID for all interactions with a particular client. For many technologies and gateways, such as the IM and SMS gateways, this is not an issue.</p>
<p><strong>Note: </strong>To use Client scope variables with gateways, you must store the Client scope variables in a data source or the registry. You cannot store the variables in cookies, because gateways do not use cookies.</p><h4><a name="wp139827"></a>Session scope</h4>
<p>The Session scope can store information required across multiple interactions. For example, an interactive IM or SMS application that uses a drill-down menu to select a service can store the information about the menu selections in the Session scope.</p>
<p>Event gateway sessions terminate when they time out. Because the identifiers for event sessions and clients differ from those used for request-driven sessions and clients, you cannot use the same Session or Client scope on a standard CFM page that sends an outgoing message and in a listener CFC that might handle an incoming response to that message.</p>
<p>For an example of using the Session scope, see the example Menu application in the gateway\cfc\examples\menu directory.</p>
<p><strong>Note: </strong>ColdFusion cannot create a session if an initiator application uses a <code>SendGatewayMessage</code> method to start an interaction with a client, such as an SMS user. In this case, the sending code must keep track (for example, in a database) of the messages it sends and their destinations. When a response event arrives, it can look up the origniatorID to determine whether it was in response to an outgoing message.</p><h3><a name="wp137889"></a>Debugging event gateway CFCs</h3>
<p>When an event gateway CFC responds to an event, it cannot display debugging information in the response page, as CFM pages do. As a result, many of the normal ColdFusion debugging techniques, including the <code>cfdump</code> tag, are not available. When you develop event gateway CFCs, you should consider the following debugging techniques:</p>
<ul>
<li>
   Put trace variables in the Application scope. These variables persist, and you can specify an application name for your CFC, as described in <a href="00001642.htm#137228">Application scope</a>. You can inspect the Application scope contents, including your trace variables, in any CFML page that has the same application name as your CFC.
</li>
<li>
   Use <code>cflog</code> tags to help you trace any errors by logging significant events to a file. Also, carefully inspect the eventgateway.log and exceptions.log files that ColdFusion&#160;MX maintains. For more information on using the eventgateway.log file, see <a href="00001635.htm#150716">The eventgateway.log file</a>.
</li>
<li>
   You can simulate responses from CFCs to the event gateway by using the <code>SendGatewayMessage</code> function in a CFM page. The function's <i>message</i> parameter should contain the information that the CFC would put in its return variable.
</li>
<li>
   If you run ColdFusion&#160;MX from the command line, you can use the Java <code>System.out.println</code> method to write messages to the console window, as the following code shows:
<pre>
&lt;cfscript&gt;
	sys = createObject(&quot;java&quot;, &quot;java.lang.System&quot;);
	sys.out.println(&quot;Debugging message goes here&quot;);
&lt;/cfscript&gt;
</pre>
</li>
</ul>
<p><strong>Note: </strong>You do not have to restart the event gateway instance when you make changes to a CFC. ColdFusion&#160;MX automatically uses the updated CFC when the next event occurs.</p><h3><a name="wp137946"></a>Example event gateway CFC</h3>
<p>The following code shows a temperature scale converter tool that can work with any of several event gateways: SMS, XMPP, Lotus Sametime, or the example Socket event gateway. Users enter a string that consists of the temperature scale (F, Fahrenheit, C, or Celsius), a comma, and a temperature on their device. The CFC converts Celsius to Fahrenheit or Fahrenheit to Celsius, and returns the result.</p>
<p>This example shows how a responder event gateway application can work, and illustrates how different event gateway types require different outgoing message formats:</p>
<pre>&lt;cfcomponent displayname=&quot;tempconverter&quot; hint=&quot;Convert temperatures between
   Celsius and Fahrenheit&quot;&gt;

&lt;cffunction name=&quot;onIncomingMessage&quot; output=&quot;no&quot;&gt;
   &lt;cfargument name=&quot;CFEvent&quot; type=&quot;struct&quot; required=&quot;yes&quot;&gt;
   &lt;!--- Standard error message giving the correct input format. ---&gt;
   &lt;cfset var errormsg = &quot;Please enter scale, integer where scale is F or C, 
      for example:  F, 32&quot;&gt;

   &lt;!--- Get the message. ---&gt;
   &lt;cfset data=cfevent.DATA&gt;
   &lt;cfset message=&quot;#data.message#&quot;&gt;
   &lt;!--- Where did it come from? ---&gt;
   &lt;cfset orig=&quot;#CFEvent.originatorID#&quot;&gt;

   &lt;!--- Process the input, generate a message with the new temperature. ---&gt;
   &lt;!--- Input format is: degrees, temperature. ---&gt;
   &lt;cfif listlen(message) eq 2&gt;
      &lt;cfif (listgetat(message,1) IS &quot;F&quot;) OR
            (listgetat(message,1) IS &quot;Fahrenheit&quot;) OR
            (listgetat(message,1) IS &quot;C&quot;) OR
            (listgetat(message,1) IS &quot;Celsius&quot;)&gt;
         &lt;cfset scale=listgetat(message,1)&gt;
         &lt;cfif isNumeric(listgetat(message,2))&gt;
            &lt;cfset temperature=listgetat(message,2)&gt;
            &lt;cfswitch expression=&quot;#scale#&quot;&gt;
               &lt;cfcase value=&quot;F, Fahrenheit&quot;&gt;
                  &lt;cfset retmsg = temperature &amp; &quot; degrees Fahrenheit is &quot; 
                     &amp; (temperature-32.0) * (5.0/9.0) &amp; &quot; degrees Celsius&quot;&gt;
               &lt;/cfcase&gt;
               &lt;cfcase value=&quot;C, Celsius&quot;&gt;
                  &lt;cfset retmsg = temperature &amp; &quot; degrees Celsius is &quot; 
                     &amp;  (temperature * 9.0/5.0) + 32 &amp; &quot; degrees Fahrenheit&quot;&gt;
               &lt;/cfcase&gt;
            &lt;/cfswitch&gt;   
         &lt;cfelse&gt;
            &lt;cfset retmsg=errormsg&gt;
         &lt;/cfif&gt;      
      &lt;cfelse&gt;   
         &lt;cfset retmsg=errormsg&gt;
      &lt;/cfif&gt;      
   &lt;cfelse&gt;
      &lt;cfset retmsg=errormsg&gt;
   &lt;/cfif&gt;
   
   &lt;!--- Fill the return value as required for the event gateway type. ---&gt;
   &lt;cfif arguments.CFEVENT.GatewayType is &quot;Socket&quot;&gt;
      &lt;cfset retValue = structNew()&gt;
      &lt;cfset retValue.MESSAGE = retmsg&gt;
      &lt;cfset retValue.originatorID = orig&gt;
   &lt;cfelseif (arguments.CFEVENT.GatewayType is &quot;Sametime&quot;) OR
         (arguments.CFEVENT.GatewayType is &quot;XMPP&quot;)&gt;
      &lt;cfset retValue = structNew()&gt;
      &lt;cfset retValue.MESSAGE = retmsg&gt;
      &lt;cfset retValue.BuddyID = arguments.CFEVENT.DATA.SENDER&gt;
      &lt;cfset retValue.originatorID = orig&gt;
   &lt;cfelseif arguments.CFEVENT.GatewayType is &quot;SMS&quot;&gt;
      &lt;cfset retValue = structNew()&gt;
      &lt;cfset retValue.command = &quot;submit&quot;&gt;
      &lt;cfset retValue.sourceAddress = arguments.CFEVENT.gatewayid&gt;
      &lt;cfset retValue.destAddress = arguments.CFEVENT.originatorid&gt;
      &lt;cfset retValue.shortMessage = retmsg&gt;
   &lt;/cfif&gt;   

   &lt;!--- Send the return message back. ---&gt;
   &lt;cfreturn retValue&gt;

&lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00001641.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001643.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001642.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



