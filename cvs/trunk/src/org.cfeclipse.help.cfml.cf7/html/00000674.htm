<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>XmlValidate</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000673.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000675.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>XmlValidate</h1>
<h4><a name="wp140218"></a>Description</h4>
<p>Uses a Document Type Definition (DTD) or XML Schema to validate an XML text document or an XML document object. </p>
<h4><a name="wp140220"></a>Returns</h4>
<p>The following validation structure:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Field
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>Errors</p>
    </td>
    <td>
<p>An array containing any validator error messages. These messages indicate that the document does not conform to the DTD or Schema (is not valid).</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>FatalErrors</p>
    </td>
    <td>
<p>An array containing any validator fatal error messages. Fatal errors indicate that the document contains XML formatting errors (is not well-formed XML).</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Status</p>
    </td>
    <td>
<p>A Boolean value:</p>
<ul>
<li>
   True if the document is valid.
</li>
<li>
   False if the validation check failed.
</li>
</ul>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Warning</p>
    </td>
    <td>
<p>An array containing any validator warnings. A well-formed and valid document can produce warning messages.</p>
    </td>
  </tr>
</table>

<h4><a name="wp140246"></a>Category</h4>
<p><a href="00000372.htm#3468770">XML functions</a></p>
<h4><a name="wp140254"></a>Function syntax</h4>
<pre><code><strong>XmlValidate</strong></code>(<i>xmlDoc</i>[, <i>validator</i>])
</pre><h4><a name="wp140256"></a>See also</h4>
<p><a href="00000352.htm#2497244"><code>cfxml</code></a>, <a href="00000538.htm#4046340"><code>IsXmlDoc</code></a>, <a href="00000536.htm#4979215"><code>IsXML</code></a>, <a href="00000668.htm#139554"><code>XmlFormat</code></a>, <a href="00000670.htm#139785"><code>XmlNew</code></a>, <a href="00000671.htm#139864"><code>XmlParse</code></a>, <a href="00000672.htm#141075"><code>XmlSearch</code></a>, <a href="00000673.htm#140093"><code>XmlTransform</code></a>; <a href="00001505.htm#1158596">Using XML and WDDX</a> in <i>ColdFusion MX Developer's Guide</i></p>
<h4><a name="wp140288"></a>History</h4>
<p>ColdFusion&#160;MX&#160;7: Added this function.</p>
<h4><a name="wp140293"></a>Parameters</h4>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Parameter
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>xmlDoc</p>
    </td>
    <td>
<p>Any of the following:</p>
<ul>
<li>
   A string containing an XML document.
</li>
<li>
   The name of an XML file.
</li>
<li>
   The URL of an XML file; valid protocol identifiers include http, https, ftp, and file.
</li>
<li>
   An XML document object, such as one generated by the <a href="00000671.htm#139864"><code>XmlParse</code></a> function.
</li>
</ul>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>validator</p>
    </td>
    <td>
<p>Any of the following:</p>
<ul>
<li>
   A string containing a DTD or Schema.
</li>
<li>
   The name of a DTD or Schema file.
</li>
<li>
   The URL of a DTD or Schema file; valid protocol identifiers include http, https, ftp, and file.
</li>
</ul>
    </td>
  </tr>
</table>

<h4><a name="wp140318"></a>Usage</h4>
<p>If you specify a relative URL or filename in a parameter, ColdFusion uses the directory (or, for URLs, the virtual directory) that contains the current ColdFusion page as the path root. </p>
<p>The <code><i>validato</i></code><i>r</i> parameter specifies a DTD or Schema to use to validate the document. If you omit the parameter, the XML document must contain one of the following:</p>
<ul>
<li>
   A <code>!DOCTYPE</code> tag to specify the DTD or its location
</li>
<li>
   An <code>xsi:schemaLocation</code> or<code> xsi:noNamespaceSchemaLocation</code> tag to specify the Schema location 
</li>
</ul>
<p>If you use a <code><i>validator</i></code> parameter and the XML document specifies a DTD or Schema, the <code>XmlValidate</code> function uses the <code><i>validator</i></code> parameter, and ignores the specification in the XML document.</p>
<p>If you do not use a <code><i>validator</i></code> parameter, and the XML document does not specify a DTD or Schema, the function returns a structure with an error message in the Errors field.</p>
<p>This function attempts to process the complete XML document, and reports all errors found during the processing. As a result, the returned structure can have a combination of Warning, Error, and FatalError fields, and each field can contain multiple error messages.</p>
<h4><a name="wp140326"></a>Example</h4>
<p>The following example has three parts: an XML file, an XSD Schema file, and a CFML page that parses the XML file and uses the Schema for validation. The CFML file displays the value of the returned structure's Status field and displays the returned structure. To show the results of invalid XML, modify the custorder.xml file.</p>
<p><strong>Note: </strong>The Schema used in the following example represents the same XML structure as the DTD used in the <a href="00000671.htm#139864">XmlParse</a> example.</p><p>The custorder.xml file is as follows: </p>
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;order xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;http://localhost:8500/something.xsd&quot; id=&quot;4323251&quot; &gt;
   &lt;customer firstname=&quot;Philip&quot; lastname=&quot;Cramer&quot; accountNum=&quot;21&quot;/&gt;
   &lt;items&gt;
      &lt;item id=&quot;43&quot;&gt;
         &lt;name&gt;   Deluxe Carpenter&amp;apos;s Hammer&lt;/name&gt;
         &lt;quantity&gt;1&lt;/quantity&gt;
         &lt;unitprice&gt;15.95&lt;/unitprice&gt;
      &lt;/item&gt;
      &lt;item id=&quot;54&quot;&gt;
         &lt;name&gt;   36&amp;quot; Plastic Rake&lt;/name&gt;
         &lt;quantity&gt;2&lt;/quantity&gt;
         &lt;unitprice&gt;6.95&lt;/unitprice&gt;
      &lt;/item&gt;
      &lt;item id=&quot;68&quot;&gt;
         &lt;name&gt;   Standard paint thinner&lt;/name&gt;
         &lt;quantity&gt;3&lt;/quantity&gt;
         &lt;unitprice&gt;8.95&lt;/unitprice&gt;
      &lt;/item&gt;
   &lt;/items&gt;
&lt;/order&gt;
</pre><p>The custorder.xsd file is as follows:</p>
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;<br />elementFormDefault=&quot;qualified&quot;&gt;
   &lt;xs:element name=&quot;customer&quot;&gt;
      &lt;xs:complexType&gt;
         &lt;xs:attribute name=&quot;firstname&quot; type=&quot;xs:string&quot; use=&quot;required&quot;/&gt;
         &lt;xs:attribute name=&quot;lastname&quot; type=&quot;xs:string&quot; use=&quot;required&quot;/&gt;
         &lt;xs:attribute name=&quot;accountNum&quot; type=&quot;xs:string&quot; use=&quot;required&quot;/&gt;
      &lt;/xs:complexType&gt;
   &lt;/xs:element&gt;
   &lt;xs:element name=&quot;name&quot; type=&quot;xs:string&quot;/&gt;
   &lt;xs:element name=&quot;quantity&quot; type=&quot;xs:string&quot;/&gt;
   &lt;xs:element name=&quot;unitprice&quot; type=&quot;xs:string&quot;/&gt;
   &lt;xs:element name=&quot;item&quot;&gt;
      &lt;xs:complexType&gt;
         &lt;xs:sequence&gt;
            &lt;xs:element ref=&quot;name&quot;/&gt;
            &lt;xs:element ref=&quot;quantity&quot;/&gt;
            &lt;xs:element ref=&quot;unitprice&quot;/&gt;
         &lt;/xs:sequence&gt;
         &lt;xs:attribute name=&quot;id&quot; type=&quot;xs:integer&quot; use=&quot;required&quot;&gt;
         &lt;/xs:attribute&gt;
      &lt;/xs:complexType&gt;
   &lt;/xs:element&gt;
   &lt;xs:element name=&quot;items&quot;&gt;
      &lt;xs:complexType&gt;
         &lt;xs:sequence&gt;
            &lt;xs:element ref=&quot;item&quot; maxOccurs=&quot;unbounded&quot;/&gt;
         &lt;/xs:sequence&gt;
      &lt;/xs:complexType&gt;
   &lt;/xs:element&gt;
   &lt;xs:element name=&quot;order&quot;&gt;
      &lt;xs:complexType&gt;
         &lt;xs:sequence&gt;
            &lt;xs:element ref=&quot;customer&quot;/&gt;
            &lt;xs:element ref=&quot;items&quot;/&gt;
         &lt;/xs:sequence&gt;
         &lt;xs:attribute name=&quot;id&quot; type=&quot;xs:string&quot; use=&quot;required&quot;/&gt;
      &lt;/xs:complexType&gt;
   &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</pre><p>The CFML file is as follows. It uses a filename for the XML file and a URL for the Schema.  The XML and URL paths must be absolute.</p>
<pre>&lt;cfset
myResults=<code><strong>XMLValidate(&quot;C:\CFusionMX7\wwwroot\examples\custorder.xml&quot;, </strong></code>
<code><strong>&quot;http://localhost:8500/examples/custorder.xsd&quot;)</strong></code>&gt;
&lt;cfoutput&gt;
Did custorder.xml validate against custorder.xsd? #results.status#&lt;br&gt;&lt;br&gt;
&lt;/cfoutput&gt;
Dump of myResults structure returned by XMLValidate&lt;br&gt;
&lt;cfdump var=&quot;#myResults#&quot;&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00000673.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000675.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000674.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



