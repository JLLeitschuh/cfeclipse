<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>cfscript</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000328.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000330.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>cfscript</h1>
<h4><a name="wp1355861"></a>Description</h4>
<p>Encloses a code block that contains <code>cfscript</code> statements.</p>
<h4><a name="wp1960015"></a>Category</h4>
<p><a href="00000197.htm#2463072">Application framework tags</a>, <a href="00000210.htm#2460200">Other tags</a></p>
<h4><a name="wp1103058"></a>Syntax</h4>
<pre>&lt;cfscript&gt; <br />   cfscript code here <br />&lt;/cfscript&gt;
</pre><h4><a name="wp1960022"></a>See also</h4>
<p><a href="00000281.htm#2650065"><code>cfinvoke</code></a>, <a href="00000300.htm#1810047"><code>cfmodule</code></a>, <a href="00000424.htm#1102241"><code>CreateObject</code></a>; <a href="00000968.htm#1119878">Extending ColdFusion Pages with CFML Scripting</a> in <i>ColdFusion MX Developer's Guide</i></p>
<h4><a name="wp2490121"></a>History</h4>
<p>ColdFusion&#160;MX: </p>
<ul>
<li>
   Changed how to invoke component methods: this tag can now invoke component methods, using the <code>CreateObject</code> function
</li>
<li>
   Changed use of reserved words: you cannot use ColdFusion reserved words within this tag
</li>
<li>
   Added the <code>try</code> and <code>catch</code> statements.
</li>
</ul>
<h4><a name="wp1103060"></a>Usage</h4>
<p>Performs processing in CFScript. This tag uses ColdFusion functions, expressions, and operators. You can read and write ColdFusion variables within this tag. </p>
<p>For a detailed description of the CFScript scripting language, including documentation of CFScript statements and the CFScript equivalents of CFML tags, see <a href="00000968.htm#1119878">Extending ColdFusion Pages with CFML Scripting</a> in <i>ColdFusion MX Developer's Guide</i><code>.</code></p>
<p>You can use this tag to enclose a series of assignment statements that would otherwise require <code>cfset</code> statements.</p>
<p><strong>Caution: </strong>If you code a <code>cftry/cfcatch</code> block within this tag using an exception's Java class name, you must provide the fully qualified class name. </p><p>You cannot use some ColdFusion reserved words in this tag. You cannot put a user-defined function whose name begins with any of these strings within this tag: </p>
<ul>
<li>
   cf
</li>
<li>
   cf_
</li>
<li>
   _cf
</li>
<li>
   coldfusion
</li>
<li>
   coldfusion_
</li>
<li>
   _coldfusion
</li>
</ul>
<p>You cannot use the <code>elseif</code> construct within a <code>cfscript</code> tag. You can use code such as the following:</p>
<pre>else if ( condition )
{
...
}
</pre><h3><a name="wp2800845"></a>Exception handling with the cfscript tag</h3>
<p>To handle exceptions with this tag, use <code>try</code> and <code>catch</code> statements, which are equivalent to the <code>cftry</code> and <code>cfcatch</code> tags. For each <code>try</code> statement, you must have a <code>catch</code> statement. In the <code>catch</code> block, the variable <code>exceptionVariable</code> contains the exception type. This variable is the equivalent of the <code>cfcatch</code> tag built-in variable <code>cfcatch.Type</code>. For more information, see <a href="00000968.htm#1119878">Extending ColdFusion Pages with CFML Scripting</a> in <i>ColdFusion MX Developer's Guide</i>.</p>
<h3><a name="wp2497931"></a>Invoking ColdFusion components with the cfscript tag</h3>
<p>CFScript invokes component methods using the <code>CreateObject</code> function. </p>
<p>The following example shows how to invoke a component object with the <code>cfscript</code> tag, using ordered arguments:</p>
<pre>&lt;cfscript&gt;
quote = CreateObject( &quot;component&quot;, &quot;nasdaq.quote&quot; ) ;
&lt;!--- Invocation using ordered arguments. ---&gt;
res = quote.getLastTradePrice( &quot;macr&quot; ) ;
&lt;/cfscript&gt;
</pre><p>The following example shows how to use an attribute collection within the <code>cfscript</code> tag to pass parameters when invoking a component object. An attribute collection is a structure in which each key corresponds to a parameter name and each value is the parameter value passed for the corresponding key. </p>
<pre>&lt;cfscript&gt;
   stArgs = structNew();
   stArgs.translationmode = &quot;en_es&quot;;
   stArgs.sourceData= &quot;Hello world, friend&quot;;
&lt;/cfscript&gt;
...
&lt;cfinvoke
   webservice = &quot;http://www.xmethods.net/sd/2001/BabelFishService.wsdl&quot;
   method     = &quot;BabelFish&quot;
   argumentCollection = &quot;#stArgs#&quot;
   returnVariable = &quot;varName&quot;   &gt; 
&lt;cfoutput&gt;#varName#&lt;/cfoutput&gt;   
</pre><p>In this example, the structure is created in a <code>cfscript</code> block, but you can use any ColdFusion method to create the structure. </p>
<h3><a name="wp2671187"></a>Consuming web services with the cfscript tag</h3>
<p>The following example shows how to consume a web service with the <code>cfscript</code> tag. You use the <a href="00000424.htm#1102241"><code>CreateObject</code></a> function to connect to the web service.</p>
<pre>&lt;cfscript&gt;
<strong>   </strong>ws = CreateObject(&quot;webservice&quot;, <br />            &quot;http://www.xmethods.net/sd/2001/BabelFishService.wsdl&quot;);
   xlatstring = ws.BabelFish(&quot;en_es&quot;, &quot;Hello world, friend&quot;);
   writeoutput(xlatstring);
&lt;/cfscript&gt;
</pre><p>For more information, see <a href="00001530.htm#1141005">Using Web Services</a> in <i>ColdFusion MX Developer's Guide</i>.</p>
<h4><a name="wp2363560"></a>Example</h4>
<pre>&lt;p&gt;This simple example shows variable declaration and manipulation.
&lt;cfif IsDefined(&quot;form.myValue&quot;)&gt;
   &lt;cfif IsNumeric(form.myValue)&gt;
      &lt;cfset x = form.myValue&gt;
<strong>      &lt;cfscript&gt;</strong>
<strong>         y = x;</strong>
<strong>         z = 2 * y;</strong>
<strong>         StringVar = form.myString;</strong>
<strong>      &lt;/cfscript&gt;</strong>
   &lt;cfoutput&gt;      &lt;p&gt;twice #x# is #z#.
      &lt;p&gt;Your string value was: &lt;b&gt;&lt;I&gt;#StringVar#&lt;/i&gt;&lt;/b&gt;   &lt;/cfoutput&gt;
&lt;cfelse&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00000328.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000330.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000329.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



