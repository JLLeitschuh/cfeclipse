<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using client variables</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001154.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001156.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using client variables</h1>
<p>When you enable client variables for an application, you can use them to keep track of long-term information that is associated with a particular client.</p>
<p>Client variables must be simple data types: strings, numbers, lists, Booleans, or date and time values. They cannot be arrays, record sets, XML objects, query objects, or other objects. If you must store a complex data type as a client variable, you can use the <code>cfwddx</code> tag to convert the data to WDDX format (which is represented as a string), store the WDDX data, and use the <a href="00000351.htm#2682044"><code>cfwddx</code></a> tag to convert the data back when you read it. For more information on using WDDX, see <a href="00001524.htm#1117865">Using WDDX</a>.</p>
<p><strong>Note: </strong>When saving client variable data in WDDX format, in the case of the registry and SQL Server, the limit is about 4K; with ORACLE, the limit is about 2K. </p><h3><a name="wp1154573"></a>Creating a client variable</h3>
<p>To create a client variable and set its value, use the <a href="00000334.htm#1103445"><code>cfset</code></a> or <a href="00000310.htm#1101730"><code>cfparam</code></a> tag and use the Client scope identifier as a variable prefix; for example: </p>
<pre>&lt;cfset Client.FavoriteColor=&quot;Red&quot;&gt;
</pre><p>After you set a client variable this way, it is available for use within any page in your application that is accessed by the client for whom the variable is set.</p>
<p>The following example shows how to use the <code>cfparam</code> tag to check for the existence of a client parameter and set a default value if the parameter does not already exist:</p>
<pre>&lt;cfparam name=&quot;Client.FavoriteColor&quot; default=&quot;Red&quot;&gt;
</pre><h3><a name="wp1154583"></a>Accessing and changing client variables</h3>
<p>You use the same syntax to access a client variable as for other types of variables. You can use client variables anywhere you use other ColdFusion variables.</p>
<p>To display the favorite color that has been set for a specific user, for example, use the following code:</p>
<pre>&lt;cfoutput&gt;<br />   Your favorite color is #Client.FavoriteColor#.
&lt;/cfoutput&gt;
</pre><p>To change the client's favorite color, for example, use code such as the following:</p>
<pre>&lt;cfset Client.FavoriteColor = Form.FavoriteColor&gt;
</pre><h3><a name="wp1154591"></a>Standard client variables</h3>
<p>The Client scope has the following built-in, read-only variables that your application can use:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Variable
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>Client.CFID</p>
    </td>
    <td>
<p>The client ID, normally stored on the client system as a cookie.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Client.CFToken</p>
    </td>
    <td>
<p>The client security token, normally stored on the client system as a cookie.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Client.URLToken</p>
    </td>
    <td>
<p>Value depends on whether J2EE session management is enabled. </p>
<p>No session management or ColdFusion session management:&#160;A combination of the <code>CFID</code> and <code>CFToken</code> values, in the form <code>CFID</code><code><i>=IDNum</i></code><code>&amp;CFTOKEN=</code><code><i>tokenNum</i></code>. This variable is useful if the client does not support cookies and you must pass the <code>CFID</code> and <code>CFToken</code> variables from page to page.</p>
<p>J2EE session management:&#160;A combination of <code>CFID,</code> <code>CFToken</code>, and session ID values in the form <code>CFID=</code><code><i>IDNum</i></code><code>&amp;CFTOKEN=</code><code><i>tokenNum</i></code><code>&amp;jsessionid=</code><code><i>SessionID</i></code>.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Client.HitCount</p>
    </td>
    <td>
<p>The number of page requests made by the client.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Client.LastVisit</p>
    </td>
    <td>
<p>The last time the client visited the application.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Client.TimeCreated</p>
    </td>
    <td>
<p>The time the <code>CFID</code> and <code>CFToken</code> variables that identify the client to ColdFusion were first created.</p>
    </td>
  </tr>
</table>

<p><strong>Note: </strong>ColdFusion lets you delete or change the values of the built-in client variables. As a general rule, avoid doing so.</p><p>You use the <code>Client.CFID</code>, <code>Client.CFToken</code>, and <code>Client.URLToken</code> variables if your application supports browsers that do not allow cookies. For more information on supporting browsers that do not allow cookies, see <a href="00001151.htm#1162514">Using client and session variables without cookies</a>.</p>
<p>You can use the <code>Client.HitCount</code> and time information variables to customize behavior that depends on how often users visit your site and when they last visited. For example, the following code shows the date of a user&#39;s last visit to your site:</p>
<pre>&lt;cfoutput&gt;
   Welcome back to the Web SuperShop. Your last 
   visit was on #DateFormat(Client.LastVisit)#.
&lt;/cfoutput&gt;
</pre><h3><a name="wp1154627"></a>Getting a list of client variables</h3>
<p>To obtain a list of the custom client parameters associated with a particular client, use the <a href="00000473.htm#1104857"><code>GetClientVariablesList</code></a> function, as follows:</p>
<pre>&lt;cfoutput&gt;#GetClientVariablesList()#&lt;/cfoutput&gt;
</pre><p>The <code>GetClientVariablesList</code> function returns a comma-separated list of the names of the client variables for the current application. The standard system-provided client variables (<code>CFID</code>, <code>CFToken</code>, <code>URLToken</code>, <code>HitCount</code>, <code>TimeCreated</code>, and <code>LastVisit</code>) are not returned in the list.</p>
<h3><a name="wp1154635"></a>Deleting client variables</h3>
<p>To delete a client variable, use the <a href="00000637.htm#137396"><code>StructDelete</code></a> function or the <a href="00000453.htm#4994925"><code>DeleteClientVariable</code></a> function. For example, the following lines are equivalent:</p>
<pre>&lt;cfset IsDeleteSuccessful=DeleteClientVariable(&quot;MyClientVariable&quot;)&gt;
&lt;cfset IsDeleteSuccessful=StructDelete(Client, &quot;MyClientVariable&quot;)&gt;
</pre><p>The Client Variables page in the ColdFusion&#160;MX Administrator lets you set a time-out period of inactivity after which ColdFusion removes client variables stored in either the Registry or a data source. (The default value is 10 days for client variables stored in the Registry, and 90 days for client variables stored in a data source.)</p>
<p><strong>Note: </strong>You cannot delete the system-provided client variables (<code>CFID</code>, <code>CFToken</code>, <code>URLToken</code>, <code>HitCount</code>, <code>TimeCreated</code>, and <code>LastVisit</code>).</p><h3><a name="wp1154653"></a>Using client variables with cflocation</h3>
<p>If you use the <code>cflocation</code> tag to redirect ColdFusion to a path that ends with .dbm or .cfm, the <code>Client.URLToken</code> variable is automatically appended to the URL. You can prevent this behavior by adding the attribute <code>addtoken=&quot;No&quot;</code> to the <a href="00000284.htm#1100753"><code>cflocation</code></a> tag.</p>
<h3><a name="wp1192587"></a>Caching client variable </h3>
<p>When ColdFusion reads or writes client variables, it caches the variables in memory to help decrease the overhead of accessing the client data. As a result, ColdFusion only accesses the client data store when you read its value for the first time or, for values you set, when the request ends. Additional references to the client variable use the cached value in ColdFusion memory, thereby processing the page more quickly.</p>
<h3><a name="wp1154664"></a>Exporting the client variable database</h3>
<p>If your client variable database is stored in the Windows system Registry and you need to move it to another machine, you can export the Registry key that stores your client variables and take it to your new server. The system Registry lets you export and import Registry entries.</p>
<h4>To export your client variable database from the Registry in Windows:</h4>
<ol>
<li>
   Open the Registry editor.
</li>
<li>
   Find and select the following key:
<pre>
HKEY_LOCAL_MACHINE\SOFTWARE\Macromedia\ColdFusion\CurrentVersion\<br />
Clients
</pre>
</li>
<li>
   On the Registry menu, click Export Registry File.
</li>
<li>
   Enter a name for the Registry file.
</li>
</ol>
<p>After you create a Registry file, you can copy it to a new machine and import it by clicking Import Registry File on the Registry editor Registry menu.</p>
<p><strong>Note: </strong>On UNIX systems, the registry entries are kept in /opt/coldfusion/registry/cf.registry, a text file that you can copy and edit directly.</p>

<hr />
<p align="right"><p align="right"><a href="00001154.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001156.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001155.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



