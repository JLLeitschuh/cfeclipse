<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Returning results to the user</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001343.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001345.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Returning results to the user</h1>
<p>When you return your results to the user, you must make sure that your pages respond to the user's needs and are appropriate for the type and amount of information. In particular, you must consider the following situations:</p>
<ul>
<li>
   When there are no query results
</li>
<li>
   When you return partial results
</li>
</ul>
<h2><a name="wp1096685"></a>Handling no query results</h2>
<p>Your code must accommodate the cases in which a query does not return any records. To determine whether a search has retrieved records, use the <code>RecordCount</code> query variable. You can use the variable in a conditional logic expression that determines how to display search results appropriately to users.</p>
<p><strong>Note: </strong>For more information on query variables, including <code>RecordCount</code>, see <a href="00001252.htm#1127430">Accessing and Retrieving Data</a>.</p><p>For example, to inform the user when no records were found by the GetEmployees query, insert the following code before displaying the data:</p>
<pre>&lt;cfif GetEmployees.RecordCount IS &quot;0&quot;&gt;
   No records match your search criteria. &lt;BR&gt;
&lt;cfelse&gt;
</pre><p>You must do the following:</p>
<ul>
<li>
   Prefix <code>RecordCount</code> with the query name.
</li>
<li>
   Add a procedure after the <a href="00000274.htm#1100123"><code>cfif</code></a> tag that displays a message to the user.
</li>
<li>
   Add a procedure after the <a href="00000240.htm#3138301"><code>cfelse</code></a> tag to format the returned data.
</li>
<li>
   Follow the second procedure with a <code>&lt;/cfif&gt;</code> tag end to indicate the end of the conditional code.
</li>
</ul>
<h4>To return search results to users:</h4>
<ol>
<li>
   Edit the actionpage.cfm page.
</li>
<li>
   Change the page so that it appears as follows:
<pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Retrieving Employee Data Based on Criteria from Form&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;cfquery name=&quot;GetEmployees&quot; datasource=&quot;cfdocexamples&quot;&gt; 
	SELECT Departmt.Dept_Name,
		Employee.FirstName,
		Employee.LastName,
		Employee.StartDate,
		Employee.Salary
	FROM Departmt, Employee
	WHERE Departmt.Dept_ID = Employee.Dept_ID
	&lt;cfif isdefined(&quot;Form.Department&quot;)&gt;
		AND Departmt.Dept_Name = &lt;cfqueryparam value=&quot;#Form.Department#&quot; <br />
			CFSQLType=&quot;CF_SQL_VARCHAR&quot;&gt;
	&lt;/cfif&gt;
	&lt;cfif Form.LastName is not &quot;&quot;&gt;
		AND Employee.LastName = &lt;cfqueryparam value=&quot;#Form.LastName#&quot; <br />
			CFSQLType=&quot;CF_SQL_VARCHAR&quot;&gt; 
	&lt;/cfif&gt;
&lt;/cfquery&gt;

&lt;cfif GetEmployees.recordcount is &quot;0&quot;&gt;
No records match your search criteria. &lt;br&gt;
Please go back to the form and try again.
&lt;cfelse&gt;
&lt;h4&gt;Employee Data Based on Criteria from Form&lt;/h4&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;First Name&lt;/th&gt;
&lt;th&gt;Last Name&lt;/th&gt;
&lt;th&gt;Salary&lt;/th&gt;
&lt;/tr&gt;
&lt;cfoutput query=&quot;GetEmployees&quot;&gt;
&lt;tr&gt;
&lt;td&gt;#FirstName#&lt;/td&gt;
&lt;td&gt;#LastName#&lt;/td&gt;
&lt;td&gt;#Salary#&lt;/td&gt;
&lt;/tr&gt;
&lt;/cfoutput&gt;
&lt;/cfif&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
</li>
<li>
   Save the file.
</li>
<li>
   Return to the form, enter search criteria, and submit the form. 
</li>
<li>
   If no records match the criteria you specified, the message appears.
</li>
</ol>
<h2><a name="wp1115805"></a>Returning results incrementally</h2>
<p>You can use the <a href="00000255.htm#2130748"><code>cfflush</code></a> tag to incrementally display long-running requests to the browser before a ColdFusion page is fully processed. This tag lets you give the user quick feedback when it takes a long time to complete processing a request. For example, when a request takes time to return results, you can use the <code>cfflush</code> tag to display the message, &quot;Processing your request -- please wait.&quot; You can also use it to incrementally display a long list as it gets retrieved.</p>
<p>The first time you use the <code>cfflush</code> tag on a page, it sends to the browser all of the HTML headers and any other available HTML. Subsequent <code>cfflush</code> tags on the page send only the output that ColdFusion generated after the previous flush.</p>
<p>You can specify an <code>interval</code> attribute to tell ColdFusion to flush the output each time that at least the specified number of bytes become available. (The count does not include HTML headers and any data that is already available when you make this call.) You can use the <code>cfflush</code> tag in a <a href="00000290.htm#3301338"><code>cfloop</code></a> tag to incrementally flush data as it becomes available. This format is particularly useful when a query responds slowly with large amounts of data. </p>
<p>When you flush data, make sure that a sufficient amount of information is available, because some browsers might not respond if you flush only a very small amount. Similarly, if you use an <code>interval</code> attribute, set it for a reasonable size, such as a few hundred bytes or more, but not many thousands of bytes.</p>
<p><strong>Limitations of the cfflush tag&#160;</strong>Because the <code>cfflush</code> tag sends data to the browser when it executes, it has several limitations, including the following:</p>
<ul>
<li>
   Using any of the following tags or functions on a page anywhere after the <code>cfflush</code> tag can cause errors or unexpected results: <a href="00000232.htm#2850760"><code>cfcontent</code></a>, <a href="00000233.htm#3839604"><code>cfcookie</code></a>, <a href="00000256.htm#2433198"><code>cfform</code></a>, <a href="00000270.htm#1355655"><code>cfheader</code></a>, <a href="00000271.htm#1099843"><code>cfhtmlhead</code></a>, <a href="00000284.htm#1100753"><code>cflocation</code></a>, and <a href="00000624.htm#136340"><code>SetLocale</code></a>. (These tags and functions normally modify the HTML header, but cannot do so after a <code>cfflush</code> tag, because the <code>cfflush</code> tag sends the header.) 
</li>
<li>
   Using the <a href="00000334.htm#1103445">cfset</a> tag to set a cookie anywhere on a page that has a <code>cfflush</code> tag does not set the cookie in the browser. 
</li>
<li>
   Using the <code>cfflush</code> tag within the body of several tags, including <a href="00000327.htm#1844410"><code>cfsavecontent</code></a>, <a href="00000316.htm#1102316"><code>cfquery</code></a>, and custom tags, can cause errors. 
</li>
<li>
   If you save Client variables as cookies, any client variables that you set after a <code>cfflush</code> tag are not saved in the browser. 
</li>
<li>
   You can catch <code>cfflush</code> errors, except Cookie errors, with a <a href="00000225.htm#3395038"><code>cfcatch</code></a><code> type=&quot;template&quot;</code> tag. Catch cookie errors with a <code>cfcatch type=&quot;Any&quot;</code> tag. 
</li>
</ul>
<h4><a name="wp1112942"></a>Example: using the cfloop tag and Rand function</h4>
<p>The following example uses the <a href="00000290.htm#3301338"><code>cfloop</code></a> tag and the <a href="00000603.htm#134961"><code>Rand</code></a> random number generating function to artificially delay the generation of data for display. It simulates a situation in which it takes time to retrieve the first data and additional information becomes available slowly.</p>
<pre>&lt;html&gt;
&lt;head&gt;
   &lt;title&gt;Your Magic numbers&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h1&gt;Your Magic numbers&lt;/h1&gt;
&lt;P&gt;It will take us a little while to calculate your ten magic numbers.
It takes a lot of work to find numbers that truly fit your personality.
So relax for a minute or so while we do the hard work for you.&lt;/P&gt;
<strong>&lt;h2&gt;We are sure you will agree it was worth the short wait!&lt;/h2&gt;</strong>
<strong>&lt;cfflush&gt;</strong>

<strong>&lt;cfflush interval=10&gt;</strong>
&lt;!--- Delay Loop to make is seem harder. ---&gt;
&lt;cfloop index=&quot;randomindex&quot; from=&quot;1&quot; to=&quot;200000&quot; step=&quot;1&quot;&gt;
   &lt;cfset random=rand()&gt;
&lt;/cfloop&gt;

&lt;!--- Now slowly output 10 random numbers. ---&gt;
&lt;cfloop index=&quot;Myindex&quot; from=&quot;1&quot; to=&quot;10&quot; step=&quot;1&quot;&gt;
   &lt;cfloop index=&quot;randomindex&quot; from=&quot;1&quot; to=&quot;100000&quot; step=&quot;1&quot;&gt;
      &lt;cfset random=rand()&gt;
   &lt;/cfloop&gt;
   &lt;cfoutput&gt;
      Magic number #Myindex# is:&amp;nbsp;&amp;nbsp;#RandRange(<br />100000, 999999)#&lt;br&gt;&lt;br&gt;
   &lt;/cfoutput&gt;
&lt;/cfloop&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre><h4><a name="wp1113003"></a>Reviewing the code</h4>
<p>The following table describes the code and its function:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Code
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<pre>&lt;h2&gt;We are sure you will agree it was<br />   worth the short wait!&lt;/h2&gt;
&lt;cfflush&gt;
</pre>    </td>
    <td>
<p>Sends the HTML header and all HTML output to the <a href="00000255.htm#2130748"><code>cfflush</code></a> tag to the user. This displays the explanatory paragraph and H2 tag contents.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cfflush interval=10&gt;
</pre>    </td>
    <td>
<p>Flushes additional data to the user whenever at least 10 bytes are available.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>&lt;cfloop index=&quot;randomindex&quot; from=&quot;1&quot;<br />      to=&quot;200000&quot; step=&quot;1&quot;&gt;
   &lt;cfset random=Rand()&gt;
&lt;/cfloop&gt;
</pre>    </td>
    <td>
<p>Inserts an artificial delay by using the <a href="00000603.htm#134961"><code>Rand</code></a> function to calculate many random numbers.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cfloop index=&quot;Myindex&quot; from=&quot;1&quot;<br />      to=&quot;10&quot; step=&quot;1&quot;&gt;
   &lt;cfloop index=&quot;randomindex&quot;<br />      from=&quot;1&quot; to=&quot;100000&quot; step=&quot;1&quot;&gt;
   &lt;cfset random=rand()&gt;
   &lt;/cfloop&gt;
   &lt;cfoutput&gt;
   Magic number #Myindex#<br />      is:&amp;nbsp;&amp;nbsp;#RandRange<br />      (100000,999999)#&lt;br&gt;&lt;br&gt;
   &lt;/cfoutput&gt;
&lt;/cfloop&gt;
</pre>    </td>
    <td>
<p>Generates and displays 10 random numbers. This code uses two loops. The outer loop repeats ten times, once for each number to display. The inner loop uses the <code>Rand</code> function to create another delay by generating more (unused) random numbers. It then calls the <a href="00000605.htm#149587"><code>RandRange</code></a> function to generate a six-digit random number for display.</p>
    </td>
  </tr>
</table>



<hr />
<p align="right"><p align="right"><a href="00001343.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001345.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001344.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



