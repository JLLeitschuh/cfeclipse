<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Exercise 2: Avoiding the potential security risk when using dynamic SQL</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000142.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000144.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Exercise 2: Avoiding the potential security risk when using dynamic SQL</h1>
<p>To reduce round trips between the client and the database server, many SQL database servers permit the client to submit multiple SQL statements in a single request, separated by a semicolon&#160;(;). For these database managements systems, the following SQL request is valid:</p>
<pre>DELETE from trips where tripLocation = &#39;China&#39;; SELECT tripName from trips
</pre><p>This request might be an efficient way to list the trips that remain after the database management system removes the China trip. Problems arise when the SQL statement is built dynamically. </p>
<p>In the Trip Maintenance application, when the client program or user passes an ID in the URL that calls the Trip Detail page, the page displays the relevant trip information. The following code builds the correct WHERE clause that supports this behavior:</p>
<pre>&lt;cfif IsDefined(&quot;URL.ID&quot;)&gt;
   WHERE tripID = #URL.ID#
&lt;/cfif&gt;
</pre><p>If a user called the Trip Detail page using the following statement:</p>
<pre>http://localhost/cfdocs/getting_started/my_app/tripdetail.cfm?ID=24;DROP+trips
</pre><p>the SQL database management system executes the proper SQL SELECT statement, and then immediately erases the Trips table from the database. </p>
<h3><a name="wp1182293"></a>Protecting your application</h3>
<p>To ensure that your application is protected from such an attack, you can exploit the fact that the ID must be a numeric value. The CFML <code>Val</code> function returns the numeric value at the beginning of a string expression. You can use the <code>Val</code> function as follows:</p>
<pre>&lt;cfif IsDefined(&quot;URL.ID&quot;)&gt;
   WHERE tripID = #Val(URL.ID)#
&lt;/cfif&gt;
</pre><p>If nonnumeric data is passed within the URL ID field, the <code>Val</code> function returns 0, and the trip with ID 0 appears (if one exists). If the user enters the previously cited URL <br />(http://localhost/cfdocs/getting_started/my_app/tripdetail.cfm?ID=24;DROP+trips), the application ignores the non-numeric values and displays the trip information of trip ID 24.</p>
<p><strong>Warning: </strong>The exercises in this tutorial ignore the dynamic SQL risk from attack. To eliminate this risk, you should use ColdFusion functions (such as <code>Val</code>) to perform type checking on all URL parameters. For queries, you can also use the <code>cfqueryparam</code> tag, which is explained in <i>CFML Reference</i>.</p>

<hr />
<p align="right"><p align="right"><a href="00000142.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000144.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000143.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



