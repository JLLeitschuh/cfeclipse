<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Starting, stopping, and restarting the event gateway</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001693.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001695.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Starting, stopping, and restarting the event gateway</h1>
<p>Because an event gateway uses at least one listener thread, it must have <code>start</code>, <code>stop</code>, and <code>restart</code> methods to control the threads. These methods must also maintain the status variable that the Gateway class <code>getStatus</code> method checks, and change its value among <code>STARTING</code>, <code>RUNNING</code>, <code>STOPPING</code>, <code>STOPPED</code>, and <code>FAILED</code>, as appropriate.</p>
<h3><a name="wp119325"></a>The start method</h3>
<p>The <code>start</code> method initializes the event gateway. It starts one or more listener threads that monitor the gateway's event source and respond to any messages it receives from the source.</p>
<p>The <code>start</code> method should return within a time-out period that you can configure for each event gateway type in the ColdFusion&#160;MX Administrator. If it does not, the ColdFusion&#160;MX Administrator has a Kill on Startup Timeout option for each gateway type. If you select the option, and a time-out occurs, the ColdFusion starter thread calls an interrupt on the gateway thread to try to kill it, and then exits.</p>
<p><strong>Note: </strong>If the <code>start</code> method is the listener (for example, in a single-threaded gateway), the method does not return until the gateway stops. Do not set the Kill on Startup Timeout option in the ColdFusion&#160;MX Administrator for such gateways.</p><p>If the gateway uses a configuration file, the <code>start</code> method should load the configuration from the file. Doing so lets users change the configuration file and restart the gateway without restarting ColdFusion. Applications should also load the configuration file in the constructor; for more information, see <a href="00001692.htm#117858">Class constructor</a>.</p>
<p>In the SocketGateway class, the <code>start</code> method starts an initial thread. (In a single-threaded Gateway, this would be the only thread.) When the thread starts, it calls a <code>socketServer</code> method, which uses the Java ServerSocket class to implement a multithreaded socket listener and message dispatcher. For more information on the listener, see <a href="00001695.htm#117859">Responding to incoming messages</a>. </p>
<pre>public void start()
{
   status = STARTING;
   listening=true;
   // Start up event generator thread
   Runnable r = new Runnable()
   {
      public void run()
      {
         socketServer();
      }
   };
   Thread t = new Thread(r);
   t.start();
   status = RUNNING;
}
</pre><h3><a name="wp119353"></a>The stop method</h3>
<p>The <code>stop</code> method performs the event gateway shutdown tasks, including shutting down the listener thread or threads and releasing any resources. The following example shows the SocketGateway <code>stop</code> method:</p>
<pre>public void stop()
{
   // Set the status variable to indicate that the server is stopping.
   status = STOPPING;
   // The listening variable is used as a switch to stop listener activity.
   listening=false;
   // Close the listener thread sockets.
   Enumeration e = socketRegistry.elements();
   while (e.hasMoreElements()) {
      try
      {
         ((SocketServerThread)e.nextElement()).socket.close();
      }
      catch (IOException e1)
      {
         // We don&#39;t care if a close failed.
         //log.error(e1);
      }
   }
   // Close and release the serverSocket instance that gets requests from the
   // network.
   if (serverSocket != null) {
      try
      {
         serverSocket.close();
      }
      catch (IOException e1)
      {
      }
      //Release the serverSocket.
      serverSocket = null;
   }
   // Shutdown succeeded; set the status variable.
   status = STOPPED;
}
</pre><h3><a name="wp119390"></a>The restart method</h3>
<p>In most cases, you implement the <code>restart</code> method by calling the <code>stop</code> method and the <code>start</code> method consecutively, but you might be able to optimize this process for some services. The following code shows the SocketGateway class <code>restart</code> method:</p>
<pre>public void restart() {
   stop();
   start();
}
</pre>

<hr />
<p align="right"><p align="right"><a href="00001693.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001695.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001694.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



