<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>GetToken</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000501.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000503.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>GetToken</h1>
<h4><a name="wp3732033"></a>Description</h4>
<p>Determines whether a token of the list in the <code>delimiters</code> parameter is present in a string.</p>
<h4><a name="wp3732035"></a>Returns</h4>
<p>The token found at position <i>index</i> of the string, as a string. If <i>index</i> is greater than the number of tokens in the string, returns an empty string.</p>
<h4><a name="wp3732038"></a>Category</h4>
<p><a href="00000369.htm#1099887">String functions</a></p>
<h4><a name="wp3732043"></a>Function syntax</h4>
<pre><code><strong>GetToken</strong></code>(<i>string</i>, <i>index</i> [, <i>delimiters</i> ])
</pre><h4><a name="wp3732045"></a>See also</h4>
<p><a href="00000545.htm#130173">Left</a>, <a href="00000617.htm#135972">Right</a>, <a href="00000585.htm#133799">Mid</a>, <a href="00000629.htm#136759">SpanExcluding</a>, <a href="00000630.htm#136815">SpanIncluding</a></p>
<h4><a name="wp3732062"></a>Parameters</h4>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Parameter
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>string</p>
    </td>
    <td>
<p>A string or a variable that contains one. String in which to search. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>index</p>
    </td>
    <td>
<p>Positive integer or a variable that contains one. The position of a token. </p>
    </td>
  </tr>
  <tr>
    <td>
<p>delimiters</p>
    </td>
    <td>
<p>A string or a variable that contains one. A delimited list of delimiters. Elements may consist of multiple characters.</p>
<p>Default list of delimiters: space character, tab character, newline character; or their codes: &quot;chr(32)&quot;, &quot;chr(9)&quot;, chr(10). </p>
<p>Default list delimiter: comma character. </p>
    </td>
  </tr>
</table>

<h4><a name="wp3732083"></a>Usage</h4>
<p>The following examples show how this function works.</p>
<p><strong>Example A</strong>: Consider the following code:</p>
<pre>GetToken(&quot;red,blue:;red,black,tan:;red,pink,brown:;red,three&quot;, 2, &quot;:;&quot;)
</pre><p>This function call requests element number 2 from the string, using the delimiter &quot;<code>:;</code>&quot;. The output is as follows: </p>
<pre>
red,black,tan
</pre>
<p><strong>Example B</strong>: Consider the following code:</p>
<pre>&lt;cfset mystring = &quot;four,&quot; <br />&amp; #chr(32)# &amp; #chr(9)# &amp; #chr(10)# <br />&amp; &quot;,five, nine,zero:;&quot;<br />&amp; #chr(10)# <br />&amp; &quot;nine,ten:, eleven:;twelve:;thirteen,&quot; <br />&amp; #chr(32)# &amp; #chr(9)# &amp; #chr(10)# <br />&amp; &quot;,four&quot;&gt;
&lt;cfoutput&gt;<br />#mystring#&lt;br&gt;&lt;br&gt;
&lt;/cfoutput&gt;
</pre><p>The output is as follows:</p>
<pre>four,
,five, nine,zero:;
nine,ten:, eleven:;twelve:;thirteen, 
,four
</pre><p>The <code>GetToken</code> function recognizes explicit spaces, tabs, or newline characters as the parameter delimiters (To specify a space character, the code is <code>chr(32)</code>; a tab character, <code>chr(9)</code>; and a newline character, <code>chr(10)</code>.)</p>
<p>In the example string <code>mystring</code>, there is:</p>
<ul>
<li>
   A forced space between the substrings &quot;<code>four,&quot; </code>and<code> &quot;,five&quot;</code>
</li>
<li>
   A literal space between &quot;<code>five,&quot;</code> and &quot;<code>nine&quot;</code>
</li>
<li>
   A literal space between &quot;<code>ten:,&quot;</code> and &quot;<code>eleven,&quot;</code>
</li>
<li>
   A forced space between &quot;<code>thirteen,&quot;</code> and &quot;<code>,four&quot;</code>
</li>
</ul>
<p>In the following call against <code>mystring</code>, no spaces are specified in <code>delimiters</code> (it is omitted), so the function uses the space character as the <code>string</code> delimiter:</p>
<pre>&lt;br&gt;
&lt;cfoutput&gt;<br />GetToken(mystring, 3) is : #GetToken(mystring, 3)#
&lt;/cfoutput&gt;&lt;br&gt;
</pre><p>The output of this code is as follows:</p>
<pre>GetToken(mystring, 3) is : nine,zero:;
</pre><p>The function finds the third delimiter, and returns the substring just before it that is between the second and third delimiter. This substring is &quot;<code>nine,zero:;&quot;.</code></p>
<p><strong>Example C</strong>: Consider the following code:</p>
<pre>&lt;cfset mystring2 = &quot;four,&quot; <br />&amp;#chr(9)# &amp; #chr(10)# <br />&amp; &quot;,five,nine,zero:;&quot; <br />&amp; #chr(10)# <br />&amp; &quot;nine,ten:,eleven:;twelve:;thirteen,&quot;<br />&amp; #chr(9)# &amp; #chr(10)# &amp; &quot;,four&quot;&gt;
&lt;cfoutput&gt;<br />#mystring2#&lt;br&gt;
&lt;/cfoutput&gt;
</pre><p>The output is as follows:</p>
<pre>four,
,five,nine,zero:; 
nine,ten:,eleven:;twelve:;thirteen, 
,four
</pre><p>The following is a call against <code>mystring2</code>: </p>
<pre>&lt;cfoutput&gt;<br />GetToken(mystring2, 2) is : #GetToken(mystring2, 2)#
&lt;/cfoutput&gt; 
</pre><p>The output is as follows:</p>
<pre>GetToken(mystring2, 2) is : ,five,nine,zero:;
</pre><p>The function finds the second delimiter, and returns the substring just before it that is between the first and second delimiter. This substring is &quot;<code>,five,nine,zero:;</code>&quot;.</p>
<h4><a name="wp3732089"></a>Example</h4>
<pre>&lt;h3&gt;GetToken Example&lt;/h3&gt;
&lt;cfif IsDefined(&quot;FORM.yourString&quot;)&gt;
&lt;!--- set delimiter ---&gt;
&lt;cfif FORM.yourDelimiter is not &quot;&quot;&gt;
      &lt;cfset yourDelimiter = FORM.yourDelimiter&gt;
   &lt;cfelse&gt;
      &lt;cfset yourDelimiter = &quot; &quot;&gt;
&lt;/cfif&gt;
&lt;!--- check whether number of elements in list is greater than or <br />equal to the element sought to return ---&gt;
&lt;cfif ListLen(FORM.yourString, yourDelimiter) GTE FORM.returnElement&gt;
   &lt;cfoutput&gt;
   &lt;p&gt;Element #FORM.ReturnElement# in #FORM.yourString#,
   delimited by &quot;#yourDelimiter#&quot;
   &lt;br&gt;is:#<strong>GetToken(FORM.yourString, FORM.returnElement, yourDelimiter)</strong>#
   &lt;/cfoutput&gt;
...
</pre>

<hr />
<p align="right"><p align="right"><a href="00000501.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000503.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000502.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



