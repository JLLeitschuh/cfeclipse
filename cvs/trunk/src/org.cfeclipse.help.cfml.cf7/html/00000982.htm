<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Regular expression syntax</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000981.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000983.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Regular expression syntax</h1>
<p>This section describes the basic rules for creating regular expressions. </p>
<ul>
<li>
   <a href="00000982.htm#1106566">Using character sets</a>
</li>
<li>
   <a href="00000983.htm#1144006">Finding repeating characters</a>
</li>
<li>
   <a href="00000984.htm#1110938">Case sensitivity in regular expressions</a>
</li>
<li>
   <a href="00000985.htm#1106559">Using subexpressions</a>
</li>
<li>
   <a href="00000986.htm#1106005">Using special characters</a>
</li>
<li>
   <a href="00000987.htm#1144043">Using escape sequences</a>
</li>
<li>
   <a href="00000988.htm#1146274">Using character classes</a>
</li>
</ul>
<h2><a name="wp1106566"></a>Using character sets</h2>
<p>The pattern within the square brackets of a regular expression defines a character set that is used to match a single character. For example, the regular expression &quot;&#160;[A-Za-z]&#160;&quot; specifies to match any single uppercase or lowercase letter enclosed by spaces. In the character set, a hyphen indicates a range of characters. </p>
<p>The regular expression &quot; B[IAU]G &quot; matches the strings &quot; BIG &quot;, &quot; BAG &quot;, and &quot; BUG &quot;, but does not match the string &quot; BOG &quot;. </p>
<p>If you specified the regular expression as &quot;&#160;B[IA][GN]&#160;&quot;, the concatenation of character sets creates a regular expression that matches the corresponding concatenation of characters in the search string. This regular expression matches a space, followed by &quot;B&quot;, followed by an &quot;I&quot; or &quot;A&quot;, followed by a &quot;G&quot; or &quot;N&quot;, followed by a trailing space. The regular expression matches &quot; BIG &quot;, &quot; BAG &quot;, &quot;BIN &quot;, and &quot;BAN &quot;.</p>
<p>The regular expression [A-Z][a-z]* matches any word that starts with an uppercase letter and is followed by zero or more lowercase letters. The special character * after the closing square bracket specifies to match zero or more occurrences of the character set. </p>
<p><strong>Note: </strong>The * only applies to the character set that immediately precedes it, not to the entire regular expression. </p><p>A + after the closing square bracket specifies to find one or more occurrences of the character set. You interpret the regular expression <code>&quot;&#160;</code><strong>[A-Z]+</strong><code>&#160;&quot; </code>as matching one or more uppercase letters enclosed by spaces. Therefore, this regular expression matches &quot;&#160;BIG&#160;&quot; and also matches &quot;&#160;LARGE&#160;&quot;, &quot;&#160;HUGE&#160;&quot;, &quot;&#160;ENORMOUS&#160;&quot;, and any other string of uppercase letters surrounded by spaces. </p>
<h3><a name="wp1128668"></a>Considerations when using special characters</h3>
<p>Since a regular expression followed by an * can match zero instances of the regular expression, it can also match the empty string. For example,</p>
<pre><code>&lt;cfoutput&gt;REReplace(&quot;Hello&quot;,&quot;[T]*&quot;,&quot;7&quot;,&quot;ALL&quot;) -<br />#REReplace(&quot;Hello&quot;,&quot;[T]*&quot;,&quot;7&quot;,&quot;ALL&quot;)#&lt;BR&gt;</code>
<code>&lt;/cfoutput&gt;</code>
</pre><p>results in the following output:</p>
<pre><code>REReplace(&quot;Hello&quot;,&quot;[T]*&quot;,&quot;7&quot;,&quot;ALL&quot;) - 7H7e7l7l7o</code>
</pre><p>The regular expression [T]* can match empty strings. It first matches the empty string before &quot;H&quot; in &quot;Hello&quot;. The &quot;ALL&quot; argument tells <a href="00000614.htm#135742"><code>REReplace</code></a> to replace all instances of an expression. The empty string before &quot;e&quot; is matched and so on until the empty string before &quot;o&quot; is matched. </p>
<p>This result might be unexpected. The workarounds for these types of problems are specific to each case. In some cases you can use [T]+, which requires at least one &quot;T&quot;, instead of [T]*. Alternatively, you can specify an additional pattern after [T]*. </p>
<p>In the following examples the regular expression has a &quot;W&quot; at the end: </p>
<pre><code>&lt;cfoutput&gt;REReplace(&quot;Hello World&quot;,&quot;[T]*W&quot;,&quot;7&quot;,&quot;ALL&quot;) - <br />#REReplace(&quot;Hello World&quot;,&quot;[T]*W&quot;,&quot;7&quot;,&quot;ALL&quot;)#&lt;BR&gt;&lt;/cfoutput&gt;</code>
</pre><p>This expression results in the following more predictable output:</p>
<pre><code>REReplace(&quot;Hello World&quot;,&quot;[T]*W&quot;,&quot;7&quot;,&quot;ALL&quot;) - Hello 7orld</code>
</pre>

<hr />
<p align="right"><p align="right"><a href="00000981.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000983.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000982.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



