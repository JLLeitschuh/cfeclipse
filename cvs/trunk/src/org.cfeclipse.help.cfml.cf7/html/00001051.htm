<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Passing parameters to methods using the cfinvoke tag</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001050.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001052.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Passing parameters to methods using the cfinvoke tag</h1>
<p>When you use the <code>cfinvoke</code> tag, ColdFusion&#160;MX provides several methods for passing parameters to CFC methods:</p>
<ul>
<li>
   As <code>cfinvoke</code> tag attributes, in <code>name=&quot;value&quot;</code> format
</li>
<li>
   In the <code>cfinvoke</code> tag <code>argumentcollection</code> attribute
</li>
<li>
   In the <code>cfinvoke</code> tag body, using the <a href="00000282.htm#3014048"><code>cfinvokeargument</code></a> tag
</li>
</ul>
<p>You can use any combination of these methods in a single invocation. If you use the same name in two or three of these methods, ColdFusion uses the value based on the following order of precedence:</p>
<ol>
<li>
   <code>cfinvokeargument</code> tags
</li>
<li>
   <code>cfinvoke</code> attribute name-value pairs
</li>
<li>
   <code>argumentcollection</code> arguments
</li>
</ol>
<h3><a name="wp1186815"></a>Passing parameters using attribute format</h3>
<p>You can pass parameters in the <code>cfinvoke</code> tag as tag attribute name-value pairs, as the following example shows:</p>
<pre>&lt;cfinvoke component=&quot;authQuery&quot; method=&quot;getAuthSecure&quot;<br />lastName=&quot;#session.username#&quot; password=&quot;#url.password#&quot;&gt;
</pre><p>In the example, the parameters are passed as the <code>lastName</code> and <code>password</code> attributes. </p>
<p><strong>Note: </strong>The <code>cfinvoke</code> tag attribute names are reserved and cannot be used for parameter names. The reserved attribute names are: <code>component</code>, <code>method</code>, <code>argumentCollection</code>, and <code>returnVariable</code>. For more information, see <i>CFML Reference</i>.</p><h3><a name="wp1185125"></a>Passing parameters in the argumentCollection attribute</h3>
<p>If you save attributes to a structure, you can pass the structure directly using the <code>cfinvoke</code> tag's <code>argumentCollection</code> attribute. This technique is useful if an existing structure or scope (such as the Forms scope) contains values that you want to pass to a CFC as parameters, and for using conditional or looping code to create parameters.</p>
<p>When you pass an argumentCollection structure, each structure key is the name of a parameter inside the structure. </p>
<p>The following example passes the Form scope to the <code>addUser</code> method of the UserDataCFC component. In the method, each form field name is a parameter name; the method can use the contents of the form fields to add a user to a database. </p>
<pre>&lt;cfinvoke component=&quot;UserDataCFC&quot; method=&quot;addUser&quot; argumentCollection=&quot;#Form#&quot;&gt;
</pre><h3><a name="wp1185137"></a>Passing parameters using the cfinvokeargument tag</h3>
<p>To pass parameters in the <code>cfinvoke</code> tag body, use the <a href="00000282.htm#3014048"><code>cfinvokeargument</code></a> tag. Using the <code>cfinvokeargument</code> tag, for example, you can build conditional processing that passes a different parameter based on user input.</p>
<p>The following example invokes the <code>corpQuery</code> component: </p>
<pre>&lt;cfinvoke component=&quot;corpQuery&quot; method=&quot;getEmp&quot;&gt;
   &lt;cfinvokeargument name=&quot;lastName&quot; value=&quot;Wilder&quot;&gt;
&lt;/cfinvoke&gt;
</pre><p>The <code>cfinvokeargument</code> tag passes the <code>lastName</code> parameter to the component method. </p>
<p>In the following example, a form already let the user select the report to generate. After instantiating the <code>getdata</code> and <code>reports</code> components, the action page invokes the <code>doquery</code> component instance, which returns the query results in <code>queryall</code>. The action page then invokes the <code>doreport</code> component instance and uses the <code>cfinvokeargument</code> tag to pass the query results to the <code>doreport</code> instance, where the output is generated.</p>
<pre>&lt;cfobject component=&quot;getdata&quot; name=&quot;doquery&quot;&gt;
&lt;cfobject component=&quot;reports&quot; name=&quot;doreport&quot;&gt; 
   &lt;cfinvoke component=&quot;#doquery#&quot; method=&quot;#form.whichreport#&quot; returnvariable=&quot;queryall&quot;&gt;
   &lt;cfinvoke component=&quot;#doreport#&quot;method=&quot;#form.whichreport#&quot;&gt;
      &lt;cfinvokeargument name=&quot;queryall&quot; value=&quot;#queryall#&quot;&gt;
   &lt;/cfinvoke&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00001050.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001052.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001051.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



