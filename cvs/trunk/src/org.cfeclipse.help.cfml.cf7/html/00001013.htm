<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using exceptions</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001012.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001014.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using exceptions</h1>
<p>UDFs written in CFScript can handle exceptions using the <code>try</code> and <code>catch</code> statements. UDFs written using the <a href="00000263.htm#2852457"><code>cffunction</code></a> tag can use the <a href="00000349.htm#1104557"><code>cftry</code></a>, <a href="00000225.htm#3395038"><code>cfcatch</code></a>, <a href="00000343.htm#2773591"><code>cfthrow</code></a>, and <a href="00000325.htm#1102913"><code>cfrethrow</code></a> tags. Using exceptions corresponds to the way many functions in other programming languages handle errors, and can be an effective way to handle errors. In particular, it separates the functional code from the error-handling code, and it can be more efficient than other methods at runtime, because it does not require testing and branching.</p>
<p>Exceptions in UDFs have the following two dimensions:</p>
<ul>
<li>
   Handling exceptions generated by running the UDF code
</li>
<li>
   Generating exceptions when the UDF identifies invalid data or other conditions that would cause errors if processing continued
</li>
</ul>
<h3><a name="wp1194822"></a>Handling exceptions in UDFs</h3>
<p>A UDF should use try/catch blocks to handle exceptions in the same conditions that any other ColdFusion application uses try/catch blocks. These are typically circumstances where the function uses an external resource, such as a Java, COM, or CORBA object, a database, or a file. When possible, your application should prevent, rather than catch, exceptions caused by invalid application data. For example, the application should prevent users from entering a zero value for a form field that is used to divide another number, rather than handling exceptions generated by dividing by zero.</p>
<p>When ColdFusion catches an exception, the function can use any of the following methods to handle the exception:</p>
<ul>
<li>
   If the error is recoverable (for example, if the problem is a database timeout where a retry might resolve the issue), try to recover from the problem.
</li>
<li>
   Display a message, as described in <a href="00001012.htm#1194630">Displaying error messages</a>.
</li>
<li>
   Return an error status, as described in <a href="00001012.htm#1194682">Providing status information</a>.
</li>
<li>
   If the UDF is defined using the <a href="00000263.htm#2852457"><code>cffunction</code></a> tag, throw a custom exception, or rethrow the exception so that it will be caught by the calling ColdFusion page. For more information on throwing and rethrowing exceptions, see <a href="00001140.htm#1153612">Handling runtime exceptions with ColdFusion tags</a>.
</li>
</ul>
<h3><a name="wp1194841"></a>Generating exceptions in UDFs</h3>
<p>If you define your function using the <code>cffunction</code> tag, you can use the <a href="00000343.htm#2773591"><code>cfthrow</code></a> and <a href="00000325.htm#1102913"><code>cfrethrow</code></a> tags to throw errors to the page that called the function. You can use this technique whenever your UDF identifies an error, instead of displaying a message or returning an error status. For example, the following code rewrites the example from <a href="00001012.htm#1194682">Providing status information</a> to use the <code>cffunction</code> tag and CFML, and to throw and handle an exception if any of the form values are not positive numbers.</p>
<p>The lines that identify invalid data and throw the exception are in bold. The remaining lines are equivalent to the CFScript code in the previous example. However, the code that removes unwanted characters must precede the error checking code.</p>
<pre>&lt;cffunction name=&quot;TotalInterest&quot;&gt;
   &lt;cfargument name=&quot;principal&quot; required=&quot;Yes&quot;&gt;
   &lt;cfargument name=&quot;annualPercent&quot; required=&quot;Yes&quot;&gt; 
   &lt;cfargument name=&quot;months&quot; required=&quot;Yes&quot;&gt;
   &lt;cfset var years = 0&gt;
   &lt;cfset var interestRate = 0&gt;
   &lt;cfset var totalInterest = 0&gt;

   &lt;cfset principal = trim(principal)&gt;
   &lt;cfset principal = REReplace(principal,&quot;[\$,]&quot;,&quot;&quot;,&quot;ALL&quot;)&gt;
   &lt;cfset annualPercent = Replace(annualPercent,&quot;%&quot;,&quot;&quot;,&quot;ALL&quot;)&gt;
   
<code><strong>   &lt;cfif ((principal LE 0) OR (annualPercent LE 0) OR (months LE 0))&gt;</strong></code>
<code><strong>      &lt;cfthrow type=&quot;InvalidData&quot; message=&quot;All values must be greater than 0.&quot;&gt;</strong></code>
<code><strong>   &lt;/cfif&gt;</strong></code>

   &lt;cfset interestRate = annualPercent / 100&gt;
   &lt;cfset years = months / 12&gt;
   &lt;cfset totalInterest = principal*
         (((1+ interestRate)^years)-1)&gt;
   &lt;cfreturn DollarFormat(totalInterest)&gt;
&lt;/cffunction&gt;
</pre><p>The code that calls the function and handles the exception looks like the following. The changed lines are in bold.</p>
<pre><code><strong>&lt;cftry&gt;</strong></code>
   &lt;cfset status = StructNew()&gt;
   &lt;cfset myInterest = TotalInterest(Form.Principal, Form.AnnualPercent,
      Form.Months, status)&gt;
   &lt;cfoutput&gt; 
      Loan amount: #Form.Principal#&lt;br&gt;
      Annual percentage rate: #Form.AnnualPercent#&lt;br&gt;
      Loan duration: #Form.Months# months&lt;br&gt;
      TOTAL INTEREST: #myInterest#&lt;br&gt;
   &lt;/cfoutput&gt;
<code><strong>&lt;cfcatch type=&quot;InvalidData&quot;&gt;</strong></code>
<code><strong>   &lt;cfoutput&gt;</strong></code>
<code><strong>      #cfcatch.message#&lt;br&gt;</strong></code>
<code><strong>   &lt;/cfoutput&gt;</strong></code>
<code><strong>&lt;/cfcatch&gt;</strong></code>
</pre><p><code><strong>&lt;/cftry&gt;</strong></code></p>


<hr />
<p align="right"><p align="right"><a href="00001012.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001014.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001013.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



