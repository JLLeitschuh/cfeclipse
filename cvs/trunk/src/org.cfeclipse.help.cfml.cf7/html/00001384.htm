<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Validating form data with regular expressions</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001383.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001385.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Validating form data with regular expressions</h1>
<p>You can use <i>regular expressions</i> to match and validate the text that users enter in <a href="00000279.htm#1100379"><code>cfinput</code></a> and <a href="00000342.htm#2810302"><code>cftextinput</code></a> tags. Ordinary characters are combined with special characters to define the match pattern. The validation succeeds only if the user input matches the pattern.</p>
<p>Regular expressions let you check input text for a wide variety of custom conditions for which the input must follow a specific pattern. You can concatenate simple regular expressions into complex search criteria to validate against complex patterns, such as any of several words with different endings.</p>
<p>You can use ColdFusion variables and functions in regular expressions. The ColdFusion server evaluates the variables and functions before the regular expression is evaluated. For example, you can validate against a value that you generate dynamically from other input data or database values.</p>
<p><strong>Note: </strong>The rules listed in this section are for JavaScript regular expressions, and apply to the regular expressions used in <code>cfinput</code> and <code>cftextinput</code> tags only. These rules differ from those used by the ColdFusion functions <a href="00000606.htm#135102"><code>REFind</code></a>, <a href="00000614.htm#135742"><code>REReplace</code></a>, <a href="00000607.htm#135225"><code>REFindNoCase</code></a>, and <a href="00000615.htm#135829"><code>REReplaceNoCase</code></a>. For information on regular expressions used in ColdFusion functions, see <a href="00000980.htm#1100400">Using Regular Expressions in Functions</a>.</p><h2><a name="wp1150221"></a>Special characters</h2>
<p>Because special characters are the operators in regular expressions, in order to represent a special character as an ordinary one, you must escape it by preceding it with a backslash. For example, use two backslash characters (\\) to represent a backslash character.</p>
<h2><a name="wp1150229"></a>Single-character regular expressions</h2>
<p>The following rules govern regular expressions that match a single character:</p>
<ul>
<li>
   Special characters are:<code> + * ? . [ ^ $ ( ) { | \ </code>
</li>
<li>
   Any character that is not a special character or escaped by being preceded by a backslash (\) matches itself.
</li>
<li>
   A backslash (\) followed by any special character matches the literal character itself; that is, the backslash escapes the special character.
</li>
<li>
   A period (.) matches any character except newline.
</li>
<li>
   A set of characters enclosed in brackets ([]) is a one-character regular expression that matches any of the characters in that set. For example, &quot;[akm]&quot; matches an <i>a</i>, <i>k</i>, or <i>m</i>. If you include ] (closing square bracket) in square brackets, it must be the first character. Otherwise, it does not work, even if you use \].
</li>
<li>
   A dash can indicate a range of characters. For example, [a-z] matches any lowercase letter.
</li>
<li>
   If the first character of a set of characters in brackets is the caret (^), the expression matches any character except those in the set. It does not match the empty string. For example: &quot;[^akm]&quot; matches any character except <i>a</i>, <i>k</i>, or <i>m</i>. The caret loses its special meaning if it is not the first character of the set.
</li>
<li>
   You can make regular expressions case insensitive by substituting individual characters with character sets; for example, &quot;[Nn][Ii][Cc][Kk]&quot; is a case-insensitive pattern for the name Nick (or NICK, or nick, or even nIcK).
</li>
<li>
   You can use the following escape sequences to match specific characters or character classes:
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Escape<br />seq
    </th>
    <th>
Matches
    </th>
    <th>
Escape<br />seq
    </th>
    <th>
Meaning
    </th>
  </tr>
  <tr>
    <td>
<p>[\b]</p>
    </td>
    <td>
<p>Backspace.</p>
    </td>
    <td>
<p>\s</p>
    </td>
    <td>
<p>Any of the following white space characters: space, tab, form feed, and line feed.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>\b</p>
    </td>
    <td>
<p>A word boundary, such as a space.</p>
    </td>
    <td>
<p>\S</p>
    </td>
    <td>
<p>Any character except the white space characters matched by \s.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>\B</p>
    </td>
    <td>
<p>A nonword boundary.</p>
    </td>
    <td>
<p>\t</p>
    </td>
    <td>
<p>Tab.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>\cX</p>
    </td>
    <td>
<p>The control character Ctrl-x. For example, \cv matches Ctrl-v, the usual control character for pasting text.</p>
    </td>
    <td>
<p>\v</p>
    </td>
    <td>
<p>Vertical tab.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>\d</p>
    </td>
    <td>
<p>A digit character [0-9].</p>
    </td>
    <td>
<p>\w</p>
    </td>
    <td>
<p>An alphanumeric character or underscore. The equivalent of<br />[A-Za-z0-9_].</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>\D</p>
    </td>
    <td>
<p>Any character except a digit.</p>
    </td>
    <td>
<p>\W</p>
    </td>
    <td>
<p>Any character not matched by \w. The equivalent of [^A-Za-z0-9_].</p>
    </td>
  </tr>
  <tr>
    <td>
<p>\f</p>
    </td>
    <td>
<p>Form feed.</p>
    </td>
    <td>
<p>\n</p>
    </td>
    <td>
<p>Backreference to the nth expression in parentheses. See <a href="00001384.htm#1155320">Backreferences</a>.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>\n</p>
    </td>
    <td>
<p>Line feed.</p>
    </td>
    <td>
<p>\o<i>octal</i></p>
    </td>
    <td>
<p>The character represented in the ASII character table by the specified octal number.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>\r</p>
    </td>
    <td>
<p>Carriage return.</p>
    </td>
    <td>
<p>\x<i>hex</i></p>
    </td>
    <td>
<p>The character represented in the ASCII character table by the specified hexadecimal number.</p>
    </td>
  </tr>
</table>
 
</li>
</ul>
<h2><a name="wp1150326"></a>Multicharacter regular expressions</h2>
<p>Use the following rules to build a multicharacter regular expression:</p>
<ul>
<li>
   Parentheses group parts of regular expressions together into a subexpression that can be treated as a single unit. For example, &quot;(ha)+&quot; matches one or more instances of <i>ha</i>.
</li>
<li>
   A one-character regular expression or grouped subexpression followed by an asterisk (*) matches zero or more occurrences of the regular expression. For example, &quot;[a-z]*&quot; matches zero or more lowercase characters.
</li>
<li>
   A one-character regular expression or grouped subexpression followed by a plus sign (+) matches one or more occurrences of the regular expression. For example, &quot;[a-z]+&quot; matches one or more lowercase characters.
</li>
<li>
   A one-character regular expression or grouped subexpression followed by a question mark (?) matches zero or one occurrences of the regular expression. For example, &quot;xy?z&quot; matches either <i>xyz</i> or <i>xz</i>.
</li>
<li>
   The carat (^) at the beginning of a regular expression matches the beginning of the field.
</li>
<li>
   The dollar sign ($) at the end of a regular expression matches the end of the field.
</li>
<li>
   The concatenation of regular expressions creates a regular expression that matches the corresponding concatenation of strings. For example, &quot;[A-Z][a-z]*&quot; matches any capitalized word.
</li>
<li>
   The OR character (|) allows a choice between two regular expressions. For example, &quot;jell(y|ies)&quot; matches either <i>jelly</i> or <i>jellies</i>.
</li>
<li>
   Braces ({}) indicate a range of occurrences of a regular expression. You use them in the form &quot;{m, n}&quot; where <i>m</i> is a positive integer equal to or greater than zero indicating the start of the range and <i>n</i> is equal to or greater than <i>m</i>, indicating the end of the range. For example, &quot;(ba){0,3}&quot; matches up to three pairs of the expression <i>ba</i>. The form &quot;{m,}&quot; requires at least <i>m</i> occurrences of the preceding regular expression. The form &quot;{m}&quot; requires exactly <i>m</i> occurrences of the preceding regular expression. The form &quot;{,n}&quot; is not allowed.
</li>
</ul>
<h2><a name="wp1155320"></a>Backreferences</h2>
<p>Backreferencing lets you match text in previously matched sets of parentheses. A slash followed by a digit n (\n) refers to the <i>n</i>th parenthesized subexpression.</p>
<p>One example of how you can use backreferencing is searching for doubled words; for example, to find instances of &quot;the the&quot; or &quot;is is&quot; in text. The following example shows backreferencing in a regular expression:</p>
<pre>(\b[A-Za-z]+)[ ]+\1
</pre><p>This code matches text that contains a word that is repeated twice; that is, it matches a word, (specified by the \b word boundary special character and the &quot;[A-Za-z]+)&quot; followed by one or more spaces (specified by &quot;[&#160;]+&quot;), followed by the first matched subexpression, the first word, in parentheses. For example, it would match &quot;is is&quot;, but not &quot;This is&quot;.</p>
<h2><a name="wp1163075"></a>Exact and partial matches</h2>
<p>ColdFusion validation normally considers a value to be valid if any of it matches the regular expression pattern. Often you might want to ensure that the entire entry matches the pattern. If so, you must &quot;anchor&quot; it to the beginning and end of the field, as follows:</p>
<ul>
<li>
   If a caret (^) is at the beginning of a pattern, the field must begin with a string that matches the pattern.
</li>
<li>
   If a dollar sign ($) is at the end of a pattern, the field must end with a string that matches the pattern.
</li>
<li>
   If the expression starts with a caret and ends with a dollar sign, the field must exactly match the pattern.
</li>
</ul>
<h2><a name="wp1150354"></a>Expression examples</h2>
<p>The following examples show some regular expressions and describe what they match:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Expression
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>[\?&amp;]value=</p>
    </td>
    <td>
<p>Any string containing a URL parameter value.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>^[A-Z]:(\\[A-Z0-9_]+)+$</p>
    </td>
    <td>
<p>An uppercase Windows directory path that is not the root of a drive and has only letters, numbers, and underscores in its text.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>^(\+|-)?[1-9][0-9]*$</p>
    </td>
    <td>
<p>An integer that does not begin with a zero and has an optional sign.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>^(\+|-)?[1-9][0-9]*(\.[0-9]*)?$</p>
    </td>
    <td>
<p>A real number.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>^(\+|-)?[1-9]\.[0-9]*E(\+|-)?[0-9]+$</p>
    </td>
    <td>
<p>A real number in engineering notation.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>a{2,4}</p>
    </td>
    <td>
<p>A string containing two to four occurrences of <i>a</i>: aa, aaa, aaaa; for example, aardvark, but not automatic.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>(ba){2,}</p>
    </td>
    <td>
<p>A string containing least two <i>ba</i> pairs; for example, Ali baba, but not Ali Baba.</p>
    </td>
  </tr>
</table>

<p><strong>Note: </strong>An excellent reference on regular expressions is <i>Mastering Regular Expressions</i> by Jeffrey E.F. Friedl, published by O&#39;Reilly &amp; Associates, Inc.</p>

<hr />
<p align="right"><p align="right"><a href="00001383.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001385.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001384.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



