<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Creating and using objects</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001572.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001574.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Creating and using objects</h1>
<p>You use the <a href="00000302.htm#2820239"><code>cfobject</code></a> tag or the <a href="00000424.htm#1102241"><code>CreateObject</code></a> function to create a named instance of an object. You use other ColdFusion tags, such as <a href="00000334.htm#1103445"><code>cfset</code></a> and <a href="00000309.htm#1101659"><code>cfoutput</code></a>, to invoke the object's properties and methods.</p>
<p>The following sections provide information about creating and using objects that applies to both COM and CORBA objects. The examples assume a sample object named &quot;obj&quot;, and that the object has a property called &quot;Property&quot;, and methods called &quot;Method1&quot;, &quot;Method2&quot;, and &quot;Method3&quot;.</p>
<h2><a name="wp1138698"></a>Creating objects</h2>
<p>You create, or <i>instantiate</i> (create a named instance of) an object in ColdFusion with the <a href="00000302.htm#2820239"><code>cfobject</code></a> tag or <a href="00000424.htm#1102241"><code>CreateObject</code></a> function. The specific attributes or parameters that you use depend on the type of object you use, and are described in detail in <a href="00001578.htm#1127184">Creating and using COM objects</a> and <a href="00001587.htm#1128389">Creating CORBA objects</a>. The following examples use a <code>cfobject</code> tag to create a COM object and a <code>CreateObject</code> function to create a CORBA object:</p>
<pre>&lt;<code>cfobject</code> type=&quot;COM&quot; action=&quot;Create&quot; name=&quot;obj&quot; class=&quot;sample.MyObject&quot;&gt;
obj = CreateObject(&quot;CORBA&quot;, &quot;d:\temp\tester.ior&quot;, &quot;IOR&quot;, &quot;Visibroker&quot;)
</pre><p>ColdFusion releases any object created by <code>cfobject</code> or <code>CreateObject</code>, or returned by other objects, at the end of the ColdFusion page execution.</p>
<h2><a name="wp1127111"></a>Using properties</h2>
<p>Use standard ColdFusion statements to access properties as follows:</p>
<ul>
<li>
   To set a property, use a statement or <a href="00000334.htm#1103445"><code>cfset</code></a> tag, such as the following:
<pre>
&lt;cfset obj.property = &quot;somevalue&quot;&gt;
</pre>
</li>
<li>
   To get a property, use a statement or <code>cfset</code> tag, such as the following:
<pre>
&lt;cfset value = obj.property&gt;
</pre>
</li>
</ul>
<p>As shown in this example, you do not use parentheses on the right side of the equation to get a property value.</p>
<h2><a name="wp1127120"></a>Calling methods</h2>
<p>Object methods usually take zero or more arguments. You send In arguments, whose values are not returned to the caller by value. You send Out and In,Out arguments, whose values are returned to the caller, by reference. Arguments sent by reference usually have their value changed by the object. Some methods have return values, while others might not.</p>
<p>Use the following techniques to call methods:</p>
<ul>
<li>
   If the method has no arguments, follow the method name with empty parentheses, as in the following <a href="00000334.htm#1103445"><code>cfset</code></a> tag:
<pre>
&lt;cfset retVal = obj.Method1()&gt;
</pre>
</li>
<li>
   If the method has one or more arguments, put the arguments in parentheses, separated by commas, as in the following example, which has one integer argument and one string argument:
<pre>
&lt;cfset x = 23&gt;
&lt;cfset retVal = obj.Method1(x, &quot;a string literal&quot;)&gt;
</pre>
</li>
<li>
   If the method has reference (Out or In,Out) arguments, use double quotation marks (&quot;) around the name of the variable you are using for these arguments, as shown for the variable x in the following example:
<pre>
&lt;cfset x = 23&gt;
&lt;cfset retVal = obj.Method2(&quot;x&quot;,  &quot;a string literal&quot;)&gt;
&lt;cfoutput&gt; #x#&lt;/cfoutput&gt;
</pre>
<p>In this example, if the object changes the value of x, it now contains a value other than 23.</p>
</li>
</ul>
<h2><a name="wp1127135"></a>Calling nested objects</h2>
<p>ColdFusion supports nested (scoped) object calls. For example, if an object method returns another object, and you must invoke a property or method on that object, you can use the syntax in either of the following examples:</p>
<pre><code>&lt;cfset prop = myObj.X.Property&gt;</code>
</pre><p>or</p>
<pre>&lt;cfset objX = myObj.X&gt;
&lt;cfset prop = objX.Property&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00001572.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001574.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001573.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



