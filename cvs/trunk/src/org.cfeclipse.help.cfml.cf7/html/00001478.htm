<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>About using the Flash Remoting service with ColdFusion</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001477.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001479.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>About using the Flash Remoting service with ColdFusion</h1>
<p>Using the Flash Remoting service of ColdFusion&#160;MX, ColdFusion developers can work together with Flash MX 2004 designers to build Flash user interfaces (UIs) for ColdFusion applications. Building Flash UIs requires the separation of UI code from business logic code. You build user interface controls in Flash MX, and you build the business logic in ColdFusion&#160;MX.</p>
<p>The following is a simplified representation of the relationship between Flash and ColdFusion: </p>
<p><br />
<img src="images/remoting.jpg" alt="Simplifed representation of the relationship between Flash and ColdFusion" border="0" hspace="0" vspace="0"/>
<br />
</p>
<h2><a name="wp1160341"></a>Planning your Flash application</h2>
<p>When you are planning ColdFusion&#160;MX application development with Flash UIs, remember the importance of separating display code from business logic. Separating display code from business logic enables your ColdFusion applications to interact with multiple client types, such as Flash applications, web browsers, and web services.</p>
<p>When you build ColdFusion&#160;MX applications for multiple clients, your ColdFusion pages and components return common data types, including strings, integers, query objects, structures, and arrays. Clients that receive the results can process the passed data according to the client type, such as ActionScript with Flash, or CFML with ColdFusion&#160;MX.</p>
<p>To use the Macromedia Flash Remoting service with Macromedia ColdFusion&#160;MX, you build ColdFusion pages and components or deploy Java objects. In ColdFusion pages, you use the Flash variable scope to interact with Flash applications. ColdFusion components (CFCs) natively support Flash interaction. The public methods of Java objects are also available to the Flash Remoting service.</p>
<p>The Flash Remoting ActionScript API has been updated to comply with ActionScript 2.0. The ActionScript 2.0 version of the API consists of the following significant features:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Flash Remoting MX 2004 ActionScript 2.0 API Features
    </th>
  </tr>
  <tr>
    <td>
<p>Enforcement of strict data typing, which requires you to declare the data types of variables and prohibits you from assigning different types of data to them.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Enforcement of case sensitivity, which means that <code>myvar</code> and <code>myVar</code> are two different variables, though they were considered the same variable with different spellings in ActionScript 1.0.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>A new Service class, which lets you create a gateway connection and at the same time obtain a reference to a service and its methods. It includes the <code>connection</code> property, which returns the connection and also lets you set credentials for authorization on the remote server.</p>
<p>Note: The NetServices class is still supported but has been deprecated in favor of the new Service and Connection classes</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>A new Connection class that helps you create and use Flash Remoting connections.</p>
<p>Note: The Connection class supersedes the former NetConnection class.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>A new PendingCall object returned on each call to a service method that is invoked using the Service object. The PendingCall object contains the responder property, which you use to specify the methods to handle the results of the service call.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>A new RelayResponder class, which specifies the methods to which the result and fault outcomes of a service call are relayed.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>A RecordSet object that contains new properties (<code>columnNames</code>, <code>items</code>, and <code>length</code>), new methods (<code>clear()</code>, <code>contains()</code>, <code>editField()</code>, <code>getEditingData()</code>, <code>getIterator()</code>, <code>getLocalLength()</code>, <code>getRemoteLength()</code>, <code>isEmpty()</code>, and <code>sortItems()</code>), and the new <code>modelChanged</code> event.</p>
    </td>
  </tr>
</table>

<p>For more information on the ActionScript 2.0 Flash Remoting API, see Flash Remoting ActionScript Dictionary Help.</p>
<p>The remaining sections in this chapter explain how ColdFusion&#160;MX interacts with Flash Remoting applications.</p>


<hr />
<p align="right"><p align="right"><a href="00001477.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001479.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001478.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



