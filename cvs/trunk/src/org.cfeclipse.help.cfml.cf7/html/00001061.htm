<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using component packages</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001060.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001062.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using component packages</h1>
<p>Components stored in the same directory are members of a component <i>package</i>. Component packages help prevent naming conflicts, and facilitate easy component deployment; for example:</p>
<ul>
<li>
   ColdFusion searches the current directory first for a CFC. If you put two components in a single directory as a package, and one component refers to the other with only the component name, not a qualified path, ColdFusion always searches the package directory first for the component. As a result, if you structure each application's components into a package, your applications can use the same component names without sharing the component code.
</li>
<li>
   If you use the <code>access=&quot;package&quot;</code> attribute in a method's <a href="00000263.htm#2852457"><code>cffunction</code></a> tag, access to the method is limited to components in the same package. Components in other packages cannot use this method, even if they specify it with a fully qualified component name. For more information on access security, see <a href="00001063.htm#1215162">Using access security</a>.
</li>
</ul>
<h4>To invoke a packaged component method using the cfinvoke tag:</h4>
<ol>
<li>
   In your web root directory, create a directory named <i>appResources</i>.
</li>
<li>
   In the appResources directory, create a directory named <i>components</i>.
</li>
<li>
   Copy the tellTime2.cfc file you created in <a href="00001041.htm#1183565">Invoking methods of a CFC instance</a> and the getUTCTime.cfm file that you created in <a href="00001029.htm#1213452">Putting executable code in a separate file</a> to the components directory.
</li>
<li>
   Create the timeDisplay.cfm file with the following content and save it in your web root directory:
<pre>
&lt;!--- Create the component instance. ---&gt;
&lt;cfobject component=&quot;appResources.components.tellTime2&quot; name=&quot;tellTimeObj&quot;&gt;
&lt;!--- Invoke the methods. ---&gt;
&lt;cfinvoke component=&quot;#tellTimeObj#&quot; method=&quot;getLocalTime&quot;
	returnvariable=&quot;localTime&quot; &gt;
&lt;cfinvoke component=&quot;#tellTimeObj#&quot; method=&quot;getUTCTime&quot;
	returnvariable=&quot;UTCTime&quot; &gt;
&lt;!--- Display the results. ---&gt;
&lt;h3&gt;Time Display Page&lt;/h3&gt;
&lt;cfoutput&gt;
	Server&#39;s Local Time: #localTime#&lt;br&gt;
	Calculated UTC Time: #UTCTime#
&lt;/cfoutput&gt;
</pre>
<p>You use dot syntax to navigate directory structures. Place the directory name before the component name.</p>
</li>
<li>
   Browse the timeDisplay.cfm file in your browser.
</li>
</ol>
<p>The following example shows a CFScript invocation:</p>
<pre>&lt;cfscript&gt;
helloCFC = createObject(&quot;component&quot;, &quot;appResources.components.catQuery&quot;);
helloCFC.getSaleItems();
&lt;/cfscript&gt;
</pre><p>The following example shows a URL invocation:</p>
<pre>http://localhost/appResources/components/catQuery.cfc?method=getSalesItems
</pre>

<hr />
<p align="right"><p align="right"><a href="00001060.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001062.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001061.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



