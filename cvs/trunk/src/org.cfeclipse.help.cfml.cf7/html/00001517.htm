<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Adding, deleting, and modifying XML elements</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001516.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001518.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Adding, deleting, and modifying XML elements</h1>
<p>The following sections describe the basic techniques for adding, deleting, and modifying XML elements. The example code uses the XML document described in <a href="00001507.htm#1127213">A simple XML document</a>.</p>
<h3><a name="wp1154064"></a>Counting and finding the position of child elements</h3>
<p>Often, an XML element has several children with the same name. For example, in the XML document defined in the simple XML document, the employee root element has multiple name elements. </p>
<p>To manipulate such an object, you often need to know the number of children of the same name, and you might need to know the position in the <code>XmlChildren</code> array of a specific child name that is used for multiple children. The following sections describe how to get this information.</p>
<h4><a name="wp1154070"></a>Counting child elements</h4>
<p>The following user-defined function determines the number of child elements with a specific name in an element:</p>
<pre>&lt;cfscript&gt;
function NodeCount (xmlElement, nodeName)
{
   nodesFound = 0;
   for (i = 1; i LTE ArrayLen(xmlElement.XmlChildren); i = i+1)
   {
      if (xmlElement.XmlChildren[i].XmlName IS nodeName)
         nodesFound = nodesFound + 1;
   }
   return nodesFound;
}
&lt;/cfscript&gt;
</pre><p>The following lines use this function to display the number of nodes named &quot;name&quot; in the mydoc.employee element:</p>
<pre>&lt;cfoutput&gt;
Nodes Found: #NodeCount(mydoc.employee, &quot;name&quot;)#
&lt;/cfoutput&gt;
</pre><h4><a name="wp1154088"></a>Determining the position of a child element with a common name</h4>
<p>The <a href="00000666.htm#139381"><code>XmlChildPos</code></a> function determines the location in the <code>XmlChildren</code> array of a specific element with a common name. You use this index when you need to tell ColdFusion where to insert or delete child elements. For example, if there are several name elements in mydoc.employee, use the following code to locate name[2] in the <code>XmlChildren</code> array:</p>
<pre>&lt;cfset nameIndex = XmlChildPos(mydoc.employee, &quot;name&quot;, 2)&gt;
</pre><h3><a name="wp1132966"></a>Adding an element</h3>
<p>You can add an element by creating a new element or by using an existing element. </p>
<p>Use the <a href="00000667.htm#139471"><code>XmlElemNew</code></a> function to create a new, empty element. This function has the following form:</p>
<pre>XmlElemNew(<i>docObject</i>, <i>elementName</i>)
</pre><p>where <i>docObject</i> is the name of the XML document object in which you are creating the element, and <i>elementName</i> is the name you are giving the new element.</p>
<p>Use an assignment statement with an existing element on the right side to create a new element using an existing element. See <a href="00001517.htm#1152384">Copying an existing element</a> for more information on adding elements using existing elements.</p>
<h4><a name="wp1151339"></a>Adding an element using a function</h4>
<p>You can use the <a href="00000385.htm#1100451"><code>ArrayInsertAt</code></a> or <a href="00000381.htm#1100231"><code>ArrayAppend</code></a> functions to add an element to an XML document object. For example, the following line adds a phoneNumber element after the last element for employee.name[2]:</p>
<pre>&lt;cfset ArrayAppend(mydoc.employee.name[2].XmlChildren, XmlElemNew(mydoc,
         &quot;phoneNumber&quot;))&gt;
</pre><p>The following line adds a new department element as the first element in employee. The name elements become the second and third elements.</p>
<pre>&lt;cfset ArrayInsertAt(mydoc.employee.XmlChildren, 1, XmlElemNew(mydoc,
         &quot;department&quot;))&gt;
</pre><p>You must use the format <code><i>parentElement</i></code><i>.</i><code>XmlChildren</code> to specify the array of elements to which you are adding the new element. For example, the following line causes an error:</p>
<pre>&lt;cfset ArrayInsertAt(mydoc.employee.name, 2, XmlElemNew(mydoc, &quot;PhoneNumber&quot;)&gt;
</pre><p>If you have multiple child elements with the same name, and you want to insert a new element in a specific position, use the <a href="00000666.htm#139381"><code>XmlChildPos</code></a> function to determine the location in the <code>XmlChildren</code> array where you want to insert the new element. For example, the following code determines the location of mydoc.employee.name[1] and inserts a new name element as the second name element:</p>
<pre>&lt;cfscript&gt;
nameIndex = XmlChildPos(mydoc.employee, &quot;name&quot;, 1);
ArrayInsertAt(mydoc.employee.XmlChildren, nameIndex + 1, XmlElemNew(mydoc,
               &quot;name&quot;));
&lt;/cfscript&gt;
</pre><p><strong>Using a namespace&#160;</strong>When you use a function to add an element, you can assign the element to a namespace by including the namespace prefix in the element name. If you have not yet associated the prefix with a namespace URI, you must also include a parameter with the namespace URI in the <code>XmlElemNew</code> function. This parameter must be the <i>second</i> parameter in the method, and the element name must be the third parameter. ColdFusion&#160;MX then associates the namespace prefix with the URI, and you can omit the URI parameter in further <code>xmlElemNew</code> functions. </p>
<p>The following example adds two to the supplies document root two elements in the Prod namespace. The first <code>XmlElemNew</code> function use sets the association between the Prod namespace prefix and the URI; the second use only needs to specify the prefix on the element name.</p>
<pre>&lt;cfscript&gt;
   mydoc.supplies.XmlChildren[1] = XmlElemNew(mydoc, <br />   &quot;http://www.foo.com/Products&quot;, &quot;Prod:soap&quot;);
   mydoc.supplies.XmlChildren[2] = XmlElemNew(mydoc, &quot;Prod:shampoo&quot;);
&lt;/cfscript&gt;
</pre><h4><a name="wp1209753"></a>Adding an element using direct assignment</h4>
<p>You can use direct assignment to append a new element to an array of elements. You cannot use direct assignment to insert an element into an array of elements. </p>
<p>When you use direct assignment, you can specify on the left side an index into the <code>XmlChildren</code> array greater than the last child in the array. For example, if there are two elements in mydoc.employee, you can specify any number greater than two, such as mydoc.employee.XmlChildren[6]. The element is always added as the last (in this case, third) child.</p>
<p>For example, the following line appends a name element to the end of the child elements of mydoc.employee:</p>
<pre>&lt;cfset mydoc.employee.XmlChildren[9] = XmlElemNew(mydoc, &quot;name&quot;)&gt;
</pre><p>If the parent element does not have any children with the same name as the new child, you can specify the name of the new node or the left side of the assignment. For example, the following line appends a phoneNumber element to the children of the first name element in mydoc.employee:</p>
<pre>&lt;cfset mydoc.employee.name[1].phoneNumber = XmlElemNew(mydoc, &quot;phoneNumber&quot;)&gt;
</pre><p>You cannot use the node name on the left to add an element with the same name as an existing element in the parent. For example, if mydoc.employee has two name nodes, the following line causes an error:</p>
<pre>&lt;cfset mydoc.employee.name[3] = XmlElemNew(mydoc, &quot;name&quot;)&gt;
</pre><p>However, the following line does work:</p>
<pre>&lt;cfset mydoc.employee.XmlChilren[3] = XmlElemNew(mydoc, &quot;name&quot;)&gt;
</pre><h4><a name="wp1152384"></a>Copying an existing element</h4>
<p>You can add a copy of an existing element elsewhere in the document. For example, if there is a mydoc.employee.name[1].phoneNumber element, but no mydoc.employee. name[2].phoneNumber, the following line creates a new mydoc.employee. name[2]. phoneNumber element with the same value as the original element. This assignment copies the original element. Unlike with standard ColdFusion structures, you get a true copy, not a reference to the original structure. You can change the copy without changing the original. </p>
<pre>&lt;cfset mydoc.employee.name[2].phoneNumber = mydoc.employee.name[1].phoneNumber&gt;
</pre><p>When you copy an element, the new element must have the same name as the existing element. If you specify the new element by name on the left side of an assignment, the element name must be the same as the name on the right side. For example, the following expression causes an error:</p>
<pre>&lt;cfset mydoc.employee.name[2].telephne = mydoc.employee.name[1].phoneNumber&gt;
</pre><h3><a name="wp1132967"></a>Deleting elements</h3>
<p>There are many ways to delete individual or multiple elements.</p>
<h4><a name="wp1182918"></a>Deleting individual elements</h4>
<p>Use the <a href="00000384.htm#1100409"><code>ArrayDeleteAt</code></a> function to delete a specific element from an XML document object. For example, the following line deletes the second child element in the mydoc.employee element:</p>
<pre>&lt;cfset ArrayDeleteAt(mydoc.employee.XmlChildren, 2)&gt;
</pre><p>If an element has only one child element with a specific name, you can also use the <a href="00000637.htm#137396"><code>StructDelete</code></a> function to delete the child element. For example, the following line deletes the phoneNumber element named in the second employee.name element:</p>
<pre>&lt;cfset StructDelete(mydoc.employee.name[2], &quot;phoneNumber&quot;)&gt; 
</pre><p>When there are multiple child elements of the same name, you must specify the element position, either among the elements of the same name, or among all child elements. Fore example, you can use the following line to delete the second name element in mydoc.employee:</p>
<pre>&lt;cfset ArrayDeleteAt(mydoc.employee.name, 2)&gt;
</pre><p>You can also determine the position in the <code>XmlChildren</code> array of the element you want to delete and use that position. To do so, use the <a href="00000666.htm#139381"><code>XmlChildPos</code></a> function. For example, the following lines determine the location of mydoc.employee.name[2] and delete the element:</p>
<pre>&lt;cfset idx = <code>XmlChildPos(mydoc.employee, &quot;name&quot;, 2)</code>&gt;
&lt;cfset ArrayDeleteAt(mydoc.employee.XmlChildren, idx)&gt;
</pre><h4><a name="wp1182882"></a>Deleting multiple elements</h4>
<p>If an element has multiple children with the same name, use the <code>StructDelete</code> function or <a href="00000383.htm#1100366"><code>ArrayClear</code></a> function with an element name to delete all of an element's child elements with that name. For example, both of the following lines delete all name elements from the employee structure:</p>
<pre>&lt;cfset StructDelete(mydoc.employee, &quot;name&quot;)&gt;
&lt;cfset ArrayClear(mydoc.employee.name)&gt;
</pre><p>Use the <code>StructDelete</code> or <code>ArrayClear</code> function with <code>XmlChildren</code> to delete all of an element's child elements. For example, each of the following lines deletes all child elements of the mydoc.employee.name[2] element:</p>
<pre>&lt;cfset StructDelete(mydoc.employee.name[2], &quot;XmlChildren&quot;)&gt;
&lt;cfset ArrayClear(mydoc.employee.name[2].XmlChildren)&gt;
</pre><h3><a name="wp1153873"></a>Adding, changing, and deleting element attributes</h3>
<p>You modify an element's attributes the same way you change the contents of any structure. For example, each of the following lines adds a Status attribute the second mydoc.employee.name element:</p>
<pre>&lt;cfset mydoc.employee.name[2].XmlAttributes.Status=&quot;Inactive&quot;&gt;
&lt;cfset StructInsert(mydoc.employee.name[2].XmlAttributes, &quot;Status&quot;, &quot;Inactive&quot;)&gt;
</pre><p>To change an attribute, use a standard assignment statement; for example:</p>
<pre>&lt;cfset mydoc.employee.name[2].XmlAttributs.Status=&quot;Active&quot;&gt;
</pre><p>To delete an attribute, use StructDelete; for example:</p>
<pre>&lt;cfset StructDelete(mydoc.employee.name[1].XmlAttributes, &quot;Status&quot;)&gt;
</pre><h3><a name="wp1132549"></a>Changing element properties</h3>
<p>To change an element's properties, including its text and comment, use a standard assignment expression. For example, use the following line to add &quot;in the MyCompany Documentation Department&quot; to the mydoc.employee XML comment:</p>
<pre>&lt;cfset mydoc.employee.XmlComment = mydoc.employee.XmlComment &amp; &quot;in the
MyCompany Documentation Department&quot;&gt;
</pre><h4><a name="wp1151622"></a>Changing an element name</h4>
<p>The XML DOM does not support changing an element name directly. To change the name of an element, you must create a new element with the new name, insert it into the XML document object before or after the original element, copy all the original element's contents to the new element, and then delete the original element.</p>
<h4><a name="wp1151634"></a>Clearing an element property value</h4>
<p>To clear an element property value, either assign the empty string to the property or use the <a href="00000637.htm#137396"><code>StructDelete</code></a> function. For example, each of the following lines clears the comment string from mydoc.employee:</p>
<pre>&lt;cfset mydoc.employee.XmlComment = &quot;&quot;&gt;
&lt;cfset StructDelete(mydoc.employee, &quot;XmlComment&quot;)&gt;
</pre><h3><a name="wp1153521"></a>Replacing or moving an element</h3>
<p>To replace an element with a new element, use a standard replacement expression. For example, to replace the mydoc.employee.department element with a new element named organization, use either of the following lines:</p>
<pre>&lt;cfset mydoc.employee.department = XmlElemNew(mydoc, &quot;Organization&quot;)&gt;
&lt;cfset mydoc.employee.XmlChildren[1] = XmlElemNew(mydoc, &quot;Organization&quot;)&gt;
</pre><p>To replace an element with a copy of an existing element, use the existing element on the right side of an expression. For example, the following line replaces the phoneNumber element for mydoc.employee.name[2] with the phoneNumber element from mydoc.employee.name[1]:</p>
<pre>&lt;cfset mydoc.employee.name[2].phoneNumber=mydoc.employee.name[1].phoneNumber&gt;
</pre><p>This creates a true copy of the name[1].phoneNumber element as name[2].phoneNumber.</p>
<p>To move an element, you must assign it to its new location, then delete it from its old location. For example, the following lines move the phoneNumber element from mydoc.employee.name[1] to mydoc.employee.name[2]:</p>
<pre>&lt;cfset mydoc.employee.name[2].phoneNumber=mydoc.employee.name[1].phoneNumber&gt;
&lt;cfset StructDelete(mydoc.employee.name[1], &quot;phoneNumber&quot;)&gt;
</pre><p><strong>Note: </strong>You cannot copy or move an element from one document object to another document object.</p>

<hr />
<p align="right"><p align="right"><a href="00001516.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001518.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001517.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



