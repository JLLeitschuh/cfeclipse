<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using components directly in CFScript and CFML</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001044.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001046.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using components directly in CFScript and CFML</h1>
<p>You can invoke methods of a component instance directly using CFScript or in CFML tags. To invoke component methods directly, use the <a href="00000424.htm#1102241"><code>CreateObject</code></a> function or <a href="00000302.htm#2820239"><code>cfobject</code></a> tag to instantiate the component. Thereafter, use the instance name followed by a period and the method that you are calling to invoke an instance of the method. You must always use parentheses after the method name, even if the method does not take any parameters. </p>
<p>You can use this syntax anywhere that you can use a ColdFusion function, such as in <code>cfset</code> tags or surrounded by number signs in the body of a <a href="00000309.htm#1101659"><code>cfoutput</code></a> tag.</p>
<h3><a name="wp1217904"></a>Invoking component methods in CFScript</h3>
<p>The following example shows how to invoke component methods in CFScript:</p>
<pre>&lt;!--- Instantiate once and reuse the instance.---&gt;
&lt;cfscript&gt;
   tellTimeObj=CreateObject(&quot;component&quot;,&quot;tellTime&quot;);
   WriteOutput(&quot;Server&#39;s Local Time: &quot; &amp; tellTimeObj.getLocalTime());
   WriteOutput(&quot;&lt;br&gt; Calculated UTC Time: &quot; &amp; tellTimeObj.getUTCTime());
&lt;/cfscript&gt;
</pre><p>In the example, the three CFScript statements do the following:</p>
<ol>
<li>
   The <code>CreateObject</code> function instantiates the tellTime CFC as tellTimeObj.
</li>
<li>
   The first <a href="00000665.htm#139339"><code>WriteOutput</code></a> function displays text followed by the results returned by the <code>getLocalTime</code> method of the tellTimeObj instance.
</li>
<li>
   The second <code>WriteOutput</code> function displays text followed by the results returned by the <code>getUTCTime</code> method of the tellTimeObj instance.
</li>
</ol>
<p>In CFScript, you use the method name in standard function syntax, such as <code>methodName()</code>.</p>
<h3><a name="wp1217930"></a>Invoking component methods in CFML</h3>
<p>The following example uses CFML tags to produce the same results as the CFScript example:</p>
<pre>&lt;cfobject name=&quot;tellTimeObj&quot; component=&quot;tellTime&quot;&gt;
&lt;cfoutput&gt;
   Server&#39;s Local Time: #tellTimeObj.getLocalTime()#&lt;br&gt;
   Calculated UTC Time: #tellTimeObj.getUTCTime()#
&lt;/cfoutput&gt;
</pre><h3><a name="wp1217869"></a>Accessing component data directly</h3>
<p>You can access data in the component's This scope directly in CFScript and <a href="00000334.htm#1103445"><code>cfset</code></a> assignment statements. For example, if a user data CFC has a <code>This.lastUpdated</code> property, you could have code such as the following:</p>
<pre>&lt;cfobject name=&quot;userDataCFC&quot; component=&quot;userData&quot;&gt;
&lt;cfif DateDiff(&quot;d&quot;, userDataCFC.lastUpdated, Now()) GT 30&gt;
   &lt;!--- Code to deal with older data goes here. ---&gt;
&lt;/cfif&gt;
</pre><p>For more information, see <a href="00001054.htm#1214884">The This scope</a>.</p>


<hr />
<p align="right"><p align="right"><a href="00001044.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001046.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001045.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



