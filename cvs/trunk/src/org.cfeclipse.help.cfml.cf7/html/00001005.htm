<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Defining functions using the cffunction tag</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001004.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001006.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Defining functions using the cffunction tag</h1>
<p>The <a href="00000263.htm#2852457"><code>cffunction</code></a> and <a href="00000218.htm#2855190"><code>cfargument</code></a> tags let you define functions in CFML without using CFScript. </p>
<p><strong>Note: </strong>This chapter describes how to use the <code>cffunction</code> tag to define a function that is <code><strong>not</strong></code> part of a ColdFusion component. For information on ColdFusion components, see <a href="00001022.htm#1170255">Building and Using ColdFusion Components</a>. For more information on the <a href="00000263.htm#2852457"><code>cffunction</code></a> tag, see <i>CFML Reference</i>.</p><h3><a name="wp1194118"></a>The cffunction tag function definition format</h3>
<p>A <code>cffunction</code> tag function definition has the following format:</p>
<pre>&lt;cffunction name=&quot;<i>functionName</i>&quot; [returnType=&quot;<i>type</i>&quot; roles=&quot;<i>roleList</i>&quot; 
      access=&quot;<i>accessType</i>&quot; output=&quot;<i>Boolean</i>&quot;]&gt;
   &lt;cfargument name=&quot;<i>argumentName</i>&quot; [Type=&quot;<i>type</i>&quot; required=&quot;<i>Boolean</i>&quot;
      default=&quot;<i>defaultValue</i>&quot;&gt;]
   &lt;!--- Function body code goes here. ---&gt;
   &lt;cfreturn <i>expression&gt;</i>
&lt;/cffunction&gt;
</pre><p>where square brackets ([]) indicate optional arguments. You can have any number of <a href="00000218.htm#2855190"><code>cfargument</code></a> tags.</p>
<p>The <code>cffunction</code> tag specifies the name you use when you call the function. You can optionally specify other function characteristics, as described in the following table:<code> </code></p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>name</p>
    </td>
    <td>
<p>The function name.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>returnType</p>
    </td>
    <td>
<p>(Optional) The type of data that the function returns. The valid standard type names are: any, array, binary, boolean, date, guid, numeric, query, string, struct, uuid, variableName, xml, and void. If you specify any other name, ColdFusion requires the argument to be a ColdFusion component with that name. </p>
<p>ColdFusion throws an error if you specify this attribute and the function tries to return data with a type that ColdFusion cannot automatically convert to the one you specified. For example, if the function returns the result of a numeric calculation, a returnType attribute of string or numeric is valid, but array is not.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>roles</p>
    </td>
    <td>
<p>(Optional) A comma-delimited list of security roles that can invoke this method. If you omit this attribute, ColdFusion does not restrict user access to the function.</p>
<p>If you use this attribute, the function executes only if the current user is logged in using the <code>cfloginuser</code> tag and is a member of one or more of the roles specified in the attribute. Otherwise, ColdFusion throws an unauthorized access exception. For more information on user security, see <a href="00001175.htm#1100022">Securing Applications</a>. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>output</p>
    </td>
    <td>
<p>(Optional) Determines how ColdFusion processes displayable output in the function body.</p>
<p>If you do not specify this option, ColdFusion treats the body of the function as normal CFML. As a result, text and the result of any <code>cfoutput</code> tags in the function definition body are displayed each time the function executes.</p>
<p>If you specify True or &quot;yes&quot;, the body of the function is processed as if it were in a <code>cfoutput</code> tag. ColdFusion displays variable values and expression results if you surround the variables and expressions with number signs (#).</p>
<p>If you specify False or &quot;no&quot;, the function is processed as if it were in a <code>cfsilent</code> tag. The function does not display any output. The code that calls the function is responsible for displaying any function results.</p>
    </td>
  </tr>
</table>

<p>You must use <code>cfargument</code> tags for required function arguments. All <code>cfargument</code> tags must precede any other CFML code in a <code>cffunction</code> tag body. Therefore, put the <code>cfargument</code> tags immediately following the <code>cffunction</code> opening tag. The <code>cfargument</code> tag takes the following attributes:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>name</p>
    </td>
    <td>
<p>The argument name. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>type </p>
    </td>
    <td>
<p>(Optional) The data type of the argument. The type of data that is passed to the function. The valid standard type names are any, array, binary, boolean, date, guid, numeric, query, string, struct, uuid, and variableName. If you specify any other name, ColdFusion requires the argument to be a ColdFusion component with that name. </p>
<p>ColdFusion throws an error if you specify this attribute and the function is called with data of a type that ColdFusion cannot automatically convert to the one you specified. For example, if the argument <code>type</code> attribute is numeric, you cannot call the function with an array.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>required</p>
    </td>
    <td>
<p>(Optional) A Boolean value specifying whether the argument is required, If set to True and the argument is omitted from the function call, ColdFusion throws an error. The default is False. The required attribute is not required if you specify a <code>default</code> attribute.</p>
<p>Because you do not identify arguments when you call a function, all <code>cfargument</code> tags that specify required arguments must precede any <code>cfargument</code> tags that specify optional arguments in the <code>cffunction</code> definition.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>default</p>
    </td>
    <td>
<p>(Optional) The default value for an optional argument if no argument value is passed. If you specify this attribute, ColdFusion ignores the <code>required</code> attribute. </p>
    </td>
  </tr>
</table>

<p><strong>Note: </strong>The <code>cfargument</code> tag is not required for optional arguments. This feature is useful if a function can take an indeterminate number of arguments. If you do not use the <code>cfargument</code> tag for an optional argument, reference it using its position in the Arguments scope array. For more information see <a href="00001008.htm#1194005">Using the Arguments scope as an array</a>.</p><h3><a name="wp1194198"></a>Using a CFML tag in a user-defined function</h3>
<p>The most important advantage of using the <a href="00000263.htm#2852457"><code>cffunction</code></a> tag over defining a function in CFScript is that you can include CFML tags in the function. Thus, UDFs can encapsulate activities, such as database lookups, that require ColdFusion tags. Also, you can use the <code>cfoutput</code> tag to display output on the calling page with minimal coding.</p>
<p><strong>Tip: </strong>To improve performance, avoid using the <code>cfparam</code> tag in ColdFusion functions. Instead, use the <code>cfset</code> tag.</p><p>The following example function looks up and returns an employee's department ID. It takes one argument, the employee ID, and looks up the corresponding department ID in the cfdocexamples Employee table: </p>
<pre><code>&lt;cffunction name=&quot;getDeptID&quot; &gt;</code>
<code>   &lt;cfargument name=&quot;empID&quot; required=&quot;true&quot; type=&quot;numeric&quot;&gt;</code>
   &lt;cfset var cfdocexamples=<code>&quot;&quot;&gt;</code>
<code>   &lt;cfquery dataSource=&quot;cfdocexamples&quot; name=&quot;deptID&quot;&gt;</code>
<code>      SELECT Dept_ID</code>
<code>      FROM Employee</code>
<code>      WHERE Emp_ID = #empID#</code>
<code>   &lt;/cfquery&gt;</code>
<code>   &lt;cfreturn deptID.Dept_ID&gt;</code>
<code>&lt;/cffunction&gt;</code>
</pre>

<hr />
<p align="right"><p align="right"><a href="00001004.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001006.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001005.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



