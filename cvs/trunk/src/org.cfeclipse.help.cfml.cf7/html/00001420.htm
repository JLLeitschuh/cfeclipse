<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Creating XSLT skins</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001419.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001421.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Creating XSLT skins</h1>
<p>This section provides information to help you create your own XSLT skins to process the XML that ColdFusion&#160;MX generates. It assumes that you are familiar with XSLT and CSS programming, and does not provide general information on writing XSLT transformations or CSS styles. It does provide information about the following areas:</p>
<ul>
<li>
   How ColdFusion passes form attribute values to the XML file
</li>
<li>
   How extend XSLT skins that ColdFusion&#160;MX provides as templates
</li>
<li>
   Basic techniques for extending the basic.xsl file to support additional <code>cfformgroup</code> and <code>cfformitem</code> tag <code>type</code> attributes
</li>
<li>
   How to extend the ColdFusion CSS files to enhance form appearance.
</li>
</ul>
<h2><a name="wp135536"></a>XSLT skin file locations</h2>
<p>If you specify an XSLT skin by name and omit the .xsl suffix, ColdFusion&#160;MX looks for the file in the <code>cfform</code> script source directory and its subdirectories. You can specify the script source directory in your <code>cfform</code> tag <code>scriptsrc</code> attribute, and you can set a default location on the Settings page in the ColdFusion&#160;MX Administrator. When you install ColdFusion&#160;MX, the default location is set to /CFIDE/scripts/ (relative to the web root).</p>
<p>You can also use a relative or absolute file path, or a URL, to specify the XSLT skin location. ColdFusion MX uses the CFML page's directory as the root of relative paths. The following formats are valid:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Format
    </th>
    <th>
Location
    </th>
  </tr>
  <tr>
    <td>
<p>&lt;cfform format=&quot;xml&quot; skin=&quot;basic&quot;&gt;</p>
    </td>
    <td>
<p>Searches for XML/CSS in the default directory and its subdirectories.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>&lt;cfform format=&quot;xml&quot; skin=&quot;c:\foo\bar\basic.xsl&quot;&gt;</p>
    </td>
    <td>
<p>Uses the absolute path.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>&lt;cfform format=&quot;xml&quot; skin=&quot;basic.xsl&quot;&gt;</p>
    </td>
    <td>
<p>Searches in the current directory.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>&lt;cfform format=&quot;xml&quot; skin=&quot;..\basic.xsl:&quot;&gt;</p>
    </td>
    <td>
<p>Searches the parent of the current directory.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>&lt;cfform format=&quot;xml&quot; <br />skin=&quot;http://anywhereOnTheWeb/basic.xsl&quot;&gt;</p>
    </td>
    <td>
<p>Uses the specified URL.</p>
    </td>
  </tr>
</table>

<p><strong>Note: </strong>Hosting companies might move the default skin location folder out of CFIDE; this lets them secure the CFIDE while giving site developers access to the files that you need for <code>cfform</code>.</p><h2><a name="wp145894"></a>Attribute and value passthrough</h2>
<p>ColdFusion passes form tag attributes or attribute values that it does not specifically process directly to the XML, as follows:</p>
<ul>
<li>
   It converts <code>cfformitem</code> and <code>cfformgroup</code> <code>type</code> attributes to <code>xf:group</code> element <code>appearance</code> attributes. 
</li>
<li>
   It passes the name and value of tag attributes that it does not recognize or process in <code>cf:attribute</code> elements.
</li>
</ul>
<p>This passthrough feature lets you create custom versions of any of the following items for your XSLT to process:</p>
<ul>
<li>
   The <code>cfformitem</code> types, such as rules, spacers, or other display elements
</li>
<li>
   The <code>cfgroup</code> types, such as divided boxes or tabbed dialog boxes
</li>
<li>
   The custom <code>cfinput</code> types, such as a custom year chooser element
</li>
<li>
   ColdFusion tag attributes, such as those used to control validation
</li>
</ul>
<h2><a name="wp122449"></a>Extending ColdFusion XSLT skins</h2>
<p>ColdFusion&#160;MX&#160;7 provides basic XSLT transforms that you can use as templates and extend for making your own skin. Each skin has a base XSL file, which include several utility XSL files. Utility file names start with an underscore (_), and the files are shared by multiple base skins. The following tables describes the XSL files, which are located in the <i>cf_webroot</i>\CFIDE\scripts\xsl directory:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
File
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>default.xsl</p>
    </td>
    <td>
<p>The default transform that ColdFusion&#160;MX uses if you do not specify a <code>skin</code> attribute for an XML format form. Identical to the basic.xsl file.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>basic.xsl</p>
    </td>
    <td>
<p>A basic form format that arranges form elements using a table.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>basiccss.xsl</p>
    </td>
    <td>
<p>A basic form format that arranges form elements using HTML <code>div</code> and <code>span</code> tags.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p><i>colorname</i>.xsl</p>
    </td>
    <td>
<p>A basic form format that arranges form elements using a table and applies a color scheme determined by the <i>colorname</i> to the form. Based on the basic.xsl file.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>_cfformvalidation.xsl</p>
    </td>
    <td>
<p>Applies ColdFusion MX validation rules. Used by all skins.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>_formelements.xsl</p>
    </td>
    <td>
<p>Transformation rules for form elements except for those defined using <code>cfformgroup</code> tags. Used by all skins</p>
    </td>
  </tr>
  <tr>
    <td>
<p>_group_<i>type</i>.xsl</p>
<p>_group_<i>type</i>_table.xsl</p>
<p>_group_<i>type</i>_css.xsl</p>
    </td>
    <td>
<p>Transformation rules for <code>cfformgroup</code> tags. The tag <code><i>type</i></code> attribute is part of the file name. Files with <i>table</i> in the name are used by basic.xsl and its derivatives. Files with <i>css</i> in the name are used by basiccss.xsl.</p>
    </td>
  </tr>
</table>

<p>All skins support the same set of CFML tags and tag types, and do a relatively simple transformation from XML to HTML. For example, they do not support horizontal or vertical rules. </p>
<p>The ColdFusion MX skin XSL files have several features that you can use when designing and developing your own transformation. They do the following:</p>
<ul>
<li>
   Provide an overall structure and initial templates for implementing custom transformations.
</li>
<li>
   Show how you can handle the various elements in the ColdFusion-generated XML.
</li>
<li>
   Use a structure of included files that can form a template for your XSLT code.
</li>
<li>
   The base XSL files include a separate file, _cfformvalidation.xsl, with complete code for generating the hidden fields required for ColdFusion onServer validation and the JavaScript for performing ColdFusion onSubmit and onBlur validation. You can include this file without modification to do ColdFusion validation in your XSLT template, or you can change it to add other forms of validation or to change the validation rules.
</li>
<li>
   The base XSL files include files, that implement several form groups, laying out the child tags and applying a label to the group. These files can serve as templates for implementing additional form group types or you can expand them to provide more sophisticated horizontal and vertical form groups. 
</li>
<li>
   You can add custom <code>cfformgroup</code> and <code>cfformitem</code> <code>type</code> attributes by including additional XSL files.
</li>
</ul>
<h3><a name="wp135150"></a>Extending basic.xsl cfformgroup and cfformitem support</h3>
<p>The following procedure describes the steps for extending the basic.xsl file to support additional <code>cfformgroup</code> and <code>cfformitem</code> types. You can use similar procedures to extend other xsl files.</p>
<h4>To add support for cfformgroup and cfformitem types to the basic.xsl:</h4>
<ol>
<li>
   Create an XSL file.
</li>
<li>
   For each <code>type</code> attribute that you want to support, create an <code>xsl:template</code> element to do the formatting. The element's <code>match</code> attribute must have the following format:
<pre>
match=&quot;xf:group[@appearance=&#39;type_attribute_name&#39;]&quot;
</pre>
<p>For example, to add a panel <code>cfformgroup</code> type, add an element with a start tag such as the following:</p>
<pre>
&lt;xsl:template match=&quot;xf:group[@appearance=&#39;panel&#39;]&quot;&gt;
</pre>
</li>
<li>
   Deploy your XSL file or files to the <i>cf_webroot</i>\CFIDE\scripts\xsl directory.
</li>
<li>
   Add an include statement to the basic.xsl file at the end of the Supported groups section; for example, if you create a my_group_panel.xsl file to handle a panel <code>cfformgroup</code> type, your basic.xsl file would include the following lines:
<pre>
&lt;!-- include groups that will be supported for this skin--&gt;
&lt;xsl:include href=&quot;_group_vertical_table.xsl&quot; /&gt;
&lt;xsl:include href=&quot;_group_horizontal_table.xsl&quot; /&gt;
&lt;xsl:include href=&quot;_group_fieldset.xsl&quot;/&gt;
&lt;xsl:include href=&quot;my_group_panel.xsl&quot; /&gt;	
</pre>
</li>
</ol>
<h3><a name="wp134761"></a>Styling forms by extending the ColdFusion&#160;MX CSS files</h3>
<p>Each ColdFusion&#160;MX skinnable form XSL file uses a corresponding CSS style sheet to specify the form style and layout characteristics. The following CSS files are located in the <i>cf_webroot</i>\CFIDE\scripts\css directory:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
File
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>basic_style.css</p>
<p>default_style.css</p>
    </td>
    <td>
<p>Provides a plain style for ColdFusion XSL files that use table-based formatting. These files are identical and are used by the basic.xsl and default.xsl transforms. ColdFusion uses the default_style.css if you do not specify a skin in your <code>cfform</code> tag.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>basic2_style.css</p>
    </td>
    <td>
<p>The basic_style with limited positioning changes for use with XSL files that have div-based formatting. Used by the basiccss.xsl transform.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>css_layout.css</p>
    </td>
    <td>
<p>Style specifications for laying out forms that use div-based formatting. Used by the basiccss.xsl transform.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p><i>colorname</i>_style.css</p>
    </td>
    <td>
<p>Used by the color-formatted ColdFusion MX skins. Defines the same classes as basic_style.css, with additional property specifications.</p>
    </td>
  </tr>
</table>

<p>The ColdFusion XSL files and their corresponding CSS style sheets use classes extensively to format the form. The basic.xsl file, for example, has only one element style; all other styles are class-based. Although the CSS files contain specifications for all classes used in the XSL files, they do not always contain formatting information. The horizontal class definition in basic_style.css, which is used for horizontal form groups, for example, is empty.</p>
<p>You can enhance the style of XML skinnable forms without changing the XSL transform by enhancing the style sheets that ColdFusion&#160;MX provides. </p>
<p></p>


<hr />
<p align="right"><p align="right"><a href="00001419.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001421.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001420.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



