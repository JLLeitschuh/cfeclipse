<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using backreferences</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000988.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000990.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using backreferences</h1>
<p>You use parenthesis to group components of a regular expression into subexpressions. For example, the regular expression &quot;(ha)+&quot; matches one or more occurrences of the string &quot;ha&quot;.</p>
<p>ColdFusion performs an additional operation when using subexpressions; it automatically saves the characters in the search string matched by a subexpression for later use within the regular expression. Referencing the saved subexpression text is called <i>backreferencing</i>. </p>
<p>You can use backreferencing when searching for repeated words in a string, such as &quot;the the&quot; or &quot;is is&quot;. The following example uses backreferencing to find all repeated words in the search string and replace them with an asterisk:</p>
<pre>REReplace(&quot;There is is coffee in the the kitchen&quot;,<br />&quot;<strong>[ ]+([A-Za-z]+)[ ]+\1</strong>&quot;,&quot; * &quot;,&quot;ALL&quot;)
</pre><p>Using this regular expression, ColdFusion detects the two occurrences of &quot;is&quot; as well as the two occurrences of &quot;the&quot;, replaces them with an asterisk enclosed in spaces, and returns the following string:</p>
<pre>There * coffee in * kitchen
</pre><p>You interpret the regular expression [ ]+([A-Za-z]+)[ ]+\1 as follows:</p>
<p>Use the subexpression ([A-Za-z]+) to search for character strings consisting of one or more letters, enclosed by one or more spaces, [ ]+, followed by the same character string that matched the first subexpression, \1. </p>
<p>You reference the matched characters of a subexpression using a slash followed by a digit <i>n</i> (\<i>n</i>) where the first subexpression in a regular expression is referenced as \1, the second as \2, etc. The next section includes an example using multiple backreferences. </p>
<h2><a name="wp1107924"></a>Using backreferences in replacement strings</h2>
<p>You can use backreferences in the replacement string of both the <a href="00000614.htm#135742"><code>REReplace</code></a> and <a href="00000615.htm#135829"><code>REReplaceNoCase</code></a> functions. For example, to replace the first repeated word in a text string with a single word, use the following syntax:</p>
<pre>REReplace(&quot;There is is a cat in in the kitchen&quot;,<br />&quot;([A-Za-z ]+)\1&quot;,&quot;\1&quot;)
</pre><p>This results in the sentence:</p>
<pre>&quot;There is a cat in in the kitchen&quot;
</pre><p>You can use the optional fourth parameter to <code>REReplace</code>, scope, to replace all repeated words, as in the following code:</p>
<pre>REReplace(&quot;There is is a cat in in the kitchen&quot;,<br />&quot;([A-Za-z ]+)\1&quot;,&quot;\1&quot;,&quot;ALL&quot;) 
</pre><p>This results in the following string:</p>
<pre>&quot;There is a cat in the kitchen&quot;
</pre><p>The next example uses two backreferences to reverse the order of the words &quot;apples&quot; and &quot;pears&quot; in a sentence: </p>
<pre>&lt;cfset astring = &quot;apples and pears, apples and pears, apples and pears&quot;&gt;
&lt;cfset newString = REReplace(&quot;#astring#&quot;, &quot;(apples) and (pears)&quot;,<br />&quot;\2 and \1&quot;,&quot;ALL&quot;)&gt;
</pre><p>In this example, you reference the subexpression (apples) as \1 and the subexpression (pears) as \2. The <code>REReplace</code> function returns the string:</p>
<pre>&quot;pears and apples, pears and apples, pears and apples&quot;
</pre><p><strong>Note: </strong>To use backreferences in either the search string or the replace string, you must use parentheses within the regular expression to create the corresponding subexpression. Otherwise, ColdFusion throws an exception.</p><h3><a name="wp1136495"></a>Using backreferences to perform case conversions in replacement strings</h3>
<p>The <a href="00000614.htm#135742"><code>REReplace</code></a> and <a href="00000615.htm#135829"><code>REReplaceNoCase</code></a> functions support special characters in replacement strings to convert replacement characters to uppercase or lowercase. The following table describes these special characters:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Special character
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>\u</p>
    </td>
    <td>
<p>Converts the next character to uppercase.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>\l</p>
    </td>
    <td>
<p>Converts the next character to lowercase.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>\U</p>
    </td>
    <td>
<p>Converts all characters to uppercase until encountering \E.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>\L</p>
    </td>
    <td>
<p>Converts all characters to lowercase until encountering \E.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>\E</p>
    </td>
    <td>
<p>End \U or \L.</p>
    </td>
  </tr>
</table>

<p>To include a literal \u, or other code, in a replacement string, escape it with another backslash; for example \\u .</p>
<p>For example, the following statement replaces the uppercase string &quot;HELLO&quot; with a lowercase &quot;hello&quot;. This example uses backreferences to perform the replacement. For more information on using backreferences, see <a href="00000989.htm#1107924">Using backreferences in replacement strings</a>.</p>
<pre>reReplace(&quot;HELLO&quot;, &quot;([[:upper:]]*)&quot;, &quot;Don&#39;t shout\scream \L\1&quot;)
</pre><p>The result of this example is the string &quot;Don&#39;t shout\scream hello&quot;.</p>
<h3><a name="wp1136714"></a>Escaping special characters in replacement strings</h3>
<p>You use the backslash character, \, to escape backreference and case-conversion characters in replacement strings. For example, to include a literal &quot;\u&quot; in a replacement string, escape it, as in &quot;\\u&quot;.</p>
<h2><a name="wp1112941"></a>Omitting subexpressions from backreferences</h2>
<p>By default, a set of parentheses will both group the subexpression and capture its matched text for later referral by backreferences. However, if you insert &quot;?:&quot; as the first characters of the subexpression, ColdFusion performs all operations on the subexpression except that it will not capture the corresponding text for use with a back reference.</p>
<p>This is useful when alternating over subexpressions containing differing numbers of groups would complicate backreference numbering. For example, consider an expression to insert a &quot;Mr.&quot; in between Bonjour|Hi|Hello and Bond, using a nested group for alternating between Hi &amp; Hello:</p>
<pre>&lt;cfset regex = &quot;(Bonjour|H(?:i|ello))( Bond)&quot;&gt;
&lt;cfset replaceString = &quot;\1 Mr.\2&quot;&gt;
&lt;cfset string = &quot;Hello Bond&quot;&gt;
#reReplace(string, regex, replaceString)#
</pre><p>This example returns &quot;Hello Mr. Bond&quot;. If you did not prohibit the capturing of the Hi/Hello group, the \2 backreference would end up referring to that group instead of &quot; Bond&quot;, and the result would be &quot;Hello Mr.ello&quot;.</p>


<hr />
<p align="right"><p align="right"><a href="00000988.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000990.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000989.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



