<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>About ColdFusion exceptions</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001133.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001135.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>About ColdFusion exceptions</h1>
<p>You can categorize ColdFusion exceptions in two ways: </p>
<ul>
<li>
   When they occur
</li>
<li>
   Their type
</li>
</ul>
<h3><a name="wp1151132"></a>When exceptions occur</h3>
<p>ColdFusion errors can occur at two times, when the CFML is compiled into Java and when the resulting Java executes, called runtime exceptions.</p>
<h4><a name="wp1150472"></a>Compiler exceptions</h4>
<p>Compiler exceptions are programming errors that ColdFusion identifies when it compiles CFML into Java. Because compiler exceptions occur before the ColdFusion page is converted to executable code, you cannot handle them on the page that causes them. However, other pages can handle these errors. For more information, see <a href="00001137.htm#1139370">Handling compiler exceptions</a></p>
<h4><a name="wp1150476"></a>Runtime exception</h4>
<p>A runtime exception occurs when the compiled ColdFusion Java code runs. It is an event that disrupts the application's normal flow of instructions. Exceptions can result from system errors or program logic errors. Runtime exceptions include:</p>
<ul>
<li>
   Error responses from external services, such as an ODBC driver or CORBA server
</li>
<li>
   CFML errors or the results of <code>cfthrow</code> or <code>cfabort</code> tags
</li>
<li>
   Internal errors in ColdFusion&#160;MX
</li>
</ul>
<h3><a name="wp1150346"></a>ColdFusion exception types</h3>
<p>ColdFusion exceptions have types that you specify in the <code>cferror</code>, <code>cfcatch</code>, and <code>cfthrow</code> error-handling tags. A <code>cferror</code> or <code>cfcatch</code> tag will handle only exceptions of the specified type. You identify an exception type by using an identifier from one (or more) of the following type categories:</p>
<ul>
<li>
   Basic
</li>
<li>
   Custom
</li>
<li>
   Advanced
</li>
<li>
   Java class
</li>
</ul>
<p><strong>Note: </strong>Use only custom error type names and the <code>Application</code> basic type name in <code>cfthrow</code> tags. All other built-in exception type names identify specific types of system-identified errors, so you should not use them for errors that you identify yourself.</p><h4><a name="wp1132086"></a>Basic exception types</h4>
<p>All ColdFusion exceptions except for custom exceptions belong to a basic type category. These types consist of a broadly-defined categorization of ColdFusion exceptions. The following table describes the basic exception types:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Type
    </th>
    <th>
Type name
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>Database failures</p>
    </td>
    <td>
<p>Database</p>
    </td>
    <td>
<p>Failed database operations, such as failed SQL statements, ODBC problems, and so on.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Missing include file errors</p>
    </td>
    <td>
<p>MissingInclude</p>
    </td>
    <td>
<p>Errors where files specified by the <a href="00000277.htm#1100248"><code>cfinclude</code></a>, <a href="00000300.htm#1810047"><code>cfmodule</code></a>, and <a href="00000242.htm#2022557"><code>cferror</code></a> tags are missing. (A <code>cferror</code> tag generates a missingInclude error only when an error of the type specified in the tag occurs.)</p>
<p>The <code>MissingInclude</code> error type is a subcategory of Template error. If you do not specifically handle the MissingInclude error type, but do handle the Template error type, the Template error handler catches these errors. <code>MissingInclude</code> errors are caught at runtime.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Template errors</p>
    </td>
    <td>
<p>Template</p>
    </td>
    <td>
<p>General application page errors, including invalid tag and attribute names. Most <code>Template</code> errors are caught at compile time, not runtime. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Object exceptions</p>
    </td>
    <td>
<p>Object</p>
    </td>
    <td>
<p>Exceptions in ColdFusion code that works with objects.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Security exceptions</p>
    </td>
    <td>
<p>Security</p>
    </td>
    <td>
<p>Catchable exceptions in ColdFusion code that works with security.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Expression exceptions</p>
    </td>
    <td>
<p>Expression</p>
    </td>
    <td>
<p>Failed expression evaluations; for example, if you try to add 1 and &quot;a&quot;.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Locking exceptions</p>
    </td>
    <td>
<p>Lock</p>
    </td>
    <td>
<p>Failed locking operations, such as when a <a href="00000285.htm#1100787"><code>cflock</code></a> critical section times out or fails at runtime.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Verity Search engine exception</p>
    </td>
    <td>
<p>SearchEngine </p>
    </td>
    <td>
<p>Exceptions generated by the Verity search engine when processing <a href="00000278.htm#1100286"><code>cfindex</code></a>, <a href="00000230.htm#1097667"><code>cfcollection</code></a>, or <a href="00000330.htm#1103106"><code>cfsearch</code></a> tags.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Application-defined exception events raised by <code>cfthrow</code></p>
    </td>
    <td>
<p>Application</p>
    </td>
    <td>
<p>Custom exceptions generated by a <a href="00000343.htm#2773591"><code>cfthrow</code></a> tag that do not specify a type, or specify the type as <code>Application</code>.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>All exceptions</p>
    </td>
    <td>
<p>Any</p>
    </td>
    <td>
<p>Any exceptions. Includes all types in this table and any exceptions that are not specifically handled in another error handler, including unexpected internal and external errors.</p>
    </td>
  </tr>
</table>

<p><strong>Note: </strong>The Any type includes all error with the Java object type of java.lang.Exception. It does not include java.lang.Throwable errors. To catch Throwable errors, specify java.lang.Throwable in the <a href="00000225.htm#3395038"><code>cfcatch</code></a> tag <code>type</code> attribute.</p><h4><a name="wp1194315"></a>Custom exceptions</h4>
<p>You can generate an exception with your own type by specifying a custom exception type name, for example MyCustomErrorType, in a <a href="00000343.htm#2773591"><code>cfthrow</code></a> tag. You then specify the custom type name in a <a href="00000225.htm#3395038"><code>cfcatch</code></a> or <a href="00000242.htm#2022557"><code>cferror</code></a> tag to handle the exception. Custom type names must be different from any built-in type names, including basic types and Java exception classes.</p>
<h4><a name="wp1125034"></a>Advanced exception types</h4>
<p>The Advanced exceptions consist of a set of specific, narrow exception types. These types are supported in ColdFusion MX for backward-compatibility. For a list of advanced exception types, see <a href="00000225.htm#3400885">Advanced Exception types</a> in <a href="00000195.htm#2501150">ColdFusion Tags</a> in <i>CFML Reference</i>.</p>
<h4><a name="wp1207993"></a>Java exception classes</h4>
<p>Every ColdFusion exception belongs to, and can be identified by, a specific Java exception class in addition to its basic, custom, or advanced type. The first line of the stack trace in the standard error output for an exception identifies the exception's Java class.</p>
<p>For example, if you attempt to use an array function such as <a href="00000386.htm#1100494"><code>ArrayIsEmpty</code></a> on an integer variable, ColdFusion generates an exception that belongs to the <code>Expression</code> exception basic type and the <code>coldfusion.runtime.NonArrayException</code> Java class.</p>
<p>In general, most applications do not need to use Java exception classes to identify exceptions. However, you can use Java class names to catch exceptions in non-CFML Java objects; for example, the following line catches all Java input/output exceptions:</p>
<pre>&lt;cfcatch type=&quot;java.io.IOException&quot;&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00001133.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001135.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001134.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



