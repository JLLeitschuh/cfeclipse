<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Managing requests in Application.cfc</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001119.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001121.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Managing requests in Application.cfc</h1>
<p>ColdFusion MX provides three methods for managing requests: <code>onRequestStart</code>, <code>onRequest</code>, and <code>onRequestEnd</code>. ColdFusion processes requests, including these methods, as follows:</p>
<ol>
<li>
   ColdFusion always processes <code>onRequestStart</code> at the start of the request.
</li>
<li>
   If you implement an <code>onRequest</code> method, ColdFusion processes it; otherwise, it processes the requested page. If you implement an <code>onRequest</code> method, you must explicitly call the requested page in your <code>onRequest</code> method.
</li>
<li>
   ColdFusion always processes <code>onRequestEnd</code> at the end of the request.
</li>
</ol>
<p>The following sections explain how you can use each of the Application.cfc request methods to manage requests. For more information, see entries for <a href="00000700.htm#1188711"><code>onRequestStart</code></a>, <a href="00000698.htm#1186087"><code>onRequest</code></a>, and <a href="00000699.htm#1186124"><code>onRequestEnd</code></a> in <i>CFML Reference</i>.</p>
<h3><a name="wp1192352"></a>Using the onRequestStart method</h3>
<p>This method runs at the beginning of the request. It is useful for user authorization (login handling), and for request-specific variable initialization, such as gathering performance statistics.</p>
<p>If you use the <code>onRequestStart</code> method and do not use the <code>onRequest</code> method, ColdFusion&#160;MX automatically processes the request when it finishes processing the <code>onRequestStart</code> code.</p>
<p><strong>Note: </strong>If you do not include an <code>onRequest</code> method in Application.cfm file, the <code>onRequestStart</code> method does not share a Variables scope with the requested page, but it does share Request scope variables.</p><h4><a name="wp1194101"></a>User authentication</h4>
<p>When an application requires a user to log in, put the authentication code, including the <code>cflogin</code> tag or code that calls this tag, in the <code>onRequestStart</code> method. Doing so ensures that the user is authenticated at the start of each request. For detailed information on security and creating logins, see <a href="00001175.htm#1100022">Securing Applications</a>. For an example that uses authentication code generated by the Macromedia Dreamweaver CF Login Wizard, see <a href="00000700.htm#1188711"><code>onRequestStart</code></a> in <i>CFML Reference</i>.</p>
<h3><a name="wp1191854"></a>Using the onRequest method</h3>
<p>The <code>onRequest</code> method differs from the <code>onRequestStart</code> method in one major way: the <code>onRequest</code> method intercepts the user's request. This difference has two implications:</p>
<ul>
<li>
   ColdFusion does not process the request unless you explicitly call it, for example, by using a <code>cfinclude</code> tag. This behavior lets you use the <code>onRequest</code> method to filter requested page content or to implement a switch that determines the pages or page contents to be displayed.
</li>
<li>
   When you use <code>cfinclude</code> to process request, the CFC instance shares the Variables scope with the requested page. As a result, any method in the CFC that executes can set the page's Variables scope variables, and the <code>onRequestEnd</code> method can access any Variable scope values that the included page has set or changed. Therefore, for example, the <code>onRequestStart</code> or <code>onRequest</code> method can set variables that are used on the page.
</li>
</ul>
<p>To use this method as a filter, put the <code>cfinclude</code> tag inside a <code>cfsavecontent</code> tag, as the following example shows:</p>
<pre>&lt;cffunction name=&quot;onRequest&quot;&gt;
   &lt;cfargument name = &quot;targetPage&quot; type=&quot;String&quot; required=true/&gt;
   &lt;cfsavecontent variable=&quot;content&quot;&gt;
      &lt;cfinclude template=#Arguments.targetPage#&gt;
   &lt;/cfsavecontent&gt;
   &lt;cfoutput&gt;
      #replace(content, &quot;report&quot;, &quot;MyCompany Quarterly Report&quot;, &quot;all&quot;)#
   &lt;/cfoutput&gt;
&lt;/cffunction&gt;
</pre><h3><a name="wp1191861"></a>Using the onRequestEnd method</h3>
<p>You use the <code>onRequestEnd</code> method for code that should run at the end of each request. (In ColdFusion versions through ColdFusion MX 6.1, you would use the OnRequestEnd.cfm page for such code.) Typical uses include displaying dynamic footer pages. For an example, see <a href="00000701.htm#1188499"><code>onSessionEnd</code></a> in <i>CFML Reference</i>.</p>
<p><strong>Note: </strong>If you do not include an <code>onRequest</code> method in Application.cfm file, the <code>onRequestEnd</code> method does not share a Variables scope with the requested page, but it does share Request scope variables.</p>

<hr />
<p align="right"><p align="right"><a href="00001119.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001121.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001120.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



