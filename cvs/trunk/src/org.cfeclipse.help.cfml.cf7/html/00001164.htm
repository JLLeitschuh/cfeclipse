<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Configuring and using application variables</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001163.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001165.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Configuring and using application variables</h1>
<p>Application variables are available to all pages within an application, that is, pages that have the same application name. Because application variables are persistent, you easily can pass values between pages. You can use application variables for information including the application name, background color, data source names, or contact information.</p>
<p>You set the application name in the <a href="00000217.htm#1097308"><code>cfapplication</code></a> tag, normally on your application's Application.cfm page. The application name is stored in the <code>Application.applicationName</code> variable.</p>
<p>Unlike client and session variables, application variables do not require that a client name (client ID) be associated with them. They are available to any clients that use pages in the application.</p>
<p><strong>Caution: </strong>Put code that uses application variables inside <a href="00000285.htm#1100787"><code>cflock</code></a> tags in circumstances that might result in race conditions from multiple accesses to the same variable. For information on using <code>cflock</code> tags, see <a href="00001166.htm#1154837">Locking code with cflock</a>.</p><p>The following sections describe how to configure and use application variables.</p>
<h2><a name="wp1182506"></a>Configuring and enabling application variables</h2>
<p>To use application variables, do the following:</p>
<ul>
<li>
   Ensure that they are enabled in the ColdFusion&#160;MX Administrator. (They are enabled by default.) 
</li>
<li>
   Specify the application name by setting the This.name variable in the initialization code of the Application.cfc or by setting the <code>name</code> attribute of the <a href="00000217.htm#1097308"><code>cfapplication</code></a> tag for the current page. 
<p><strong>Note: </strong>ColdFusion supports unnamed applications for compatibility with J2EE applications. For more information, see <a href="00001564.htm#1165607">Unnamed ColdFusion Application and Session scopes</a>.</p></li>
</ul>
<p>The ColdFusion&#160;MX Administrator also lets you specify the following information: </p>
<ul>
<li>
   A default variable time-out. If all pages in an application are inactive for the time-out period, ColdFusion deletes all the application variables. The Application.cfc file or <code>cfapplication</code> tag can override this value for a specific application. The default value for this time-out is two days.
</li>
<li>
   A maximum time-out. The application code cannot set a time-out greater than this value. The default value for this time-out is two days.
</li>
</ul>
<p>You can set the time-out period for application variables within a specific application by using the This.applicationTimeout variable of Application.cfc or the <code>applicationTimeout</code> attribute of the <code>cfapplication</code> tag.</p>
<h2><a name="wp1154760"></a>Storing application data in application variables</h2>
<p>Application variables are a convenient place to store information that all pages of your application might need, no matter which client is running that application. Using application variables, an application could, for example, initialize itself when the first user accesses any page of that application. This information can then remain available indefinitely, thereby avoiding the overhead of repeated initialization.</p>
<p>Because the data stored in application variables is available to all pages of an application, and remains available until a specific period of inactivity passes or the ColdFusion server shuts down, application variables are convenient for application-global, persistent data. </p>
<p>However, because all clients running an application see the same set of application variables, these variables are not appropriate for client-specific or session-specific information. To target variables for specific clients, use client or session variables.</p>
<h2><a name="wp1168551"></a>Using application variables</h2>
<p>Generally, application variables should hold information that you write infrequently. In most cases, the values of these variables are set once, most often when an application first starts. Then the values of these variables are referenced many times throughout the life of the application or the course of a session.</p>
<p>In circumstances that might result in race conditions from multiple accesses to the same variable, put code that writes to Application scope variables or reads Application scope variables with data that can change inside <code>cflock</code> tags.</p>
<p>Because each Application scope variable is shared in memory by all requests in the application, these variables can become bottlenecks if used inappropriately. Whenever a request is reading or writing an Application scope variable, any other requests that use the variable must wait until the code accessing the variable completes. This problem is increased by the processing time required for locking. If many users access the application simultaneously and you use Application scope variables extensively, your application performance might degrade. If your application uses many application variables, consider whether the variables must be in the Application scope or whether they can be Session or Request scope variables.</p>
<p>The application scope has one built-in variable, <code>Application.applicationName</code>, which contains the application name you specify in the <a href="00000217.htm#1097308"><code>cfapplication</code></a> tag.</p>
<p>You access and manipulate application variables the same way you use session variables, except that you use the variable prefix Application, not Session, and specify Session as the lock scope. For examples of using session variables see <a href="00001161.htm#1168437">Creating and deleting session variables</a> and <a href="00001162.htm#1185183">Accessing and changing session variables</a>.</p>
<p>For information on locking write-once read-many application variables efficiently, see <a href="00001171.htm#1187801">Locking application variables efficiently</a></p>


<hr />
<p align="right"><p align="right"><a href="00001163.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001165.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001164.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



