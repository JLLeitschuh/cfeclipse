<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Handling errors in Application.cfc</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001120.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001122.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Handling errors in Application.cfc</h1>
<p>The following sections briefly describe how you can handle errors in Application.cfc. For more information on error pages and error handling, see <a href="00001130.htm#1220254">Handling Errors</a>. For details on implementing the <a href="00000697.htm#1188543"><code>onError</code></a> method, see <a href="00000697.htm#1188543"><code>onError</code></a> in <i>CFML Reference</i>.</p>
<h3><a name="wp1192987"></a>Application.cfc error handling techniques</h3>
<p>Application.cfc can handle errors in any combination of the following ways:</p>
<ul>
<li>
   You can use try/catch error handling in the event methods, such as <code>onApplicationStart</code> or <code>onRequestStart</code>, to handle exceptions that happen in the event methods.
</li>
<li>
   You can implement the <a href="00000697.htm#1188543"><code>onError</code></a> method. This method receives all exceptions that are not directly handled by try/catch handlers in CFML code. The method can use the <code>cfthrow</code> tag to pass any errors it does not handle to ColdFusion for handling.<code> </code>
</li>
<li>
   You can use <code>cferror</code> tags in the application initialization code following the <code>cfcomponent</code> tag, typically following the code that sets the application's This scope variables. These tags specify error processing if you do not implement an <code>onError</code> method, or if the <code>onError</code> method throws an error. You could implement an application-specific validation error handler, for example, by putting the following tag in the CFC initialization code:
<pre>
&lt;cferror type=&quot;VALIDATION&quot; template=&quot;validationerrorhandler.cfm&quot;&gt;
</pre>
</li>
<li>
   The ColdFusion&#160;MX default error mechanisms handle any errors that are not handled by the preceding techniques. These mechanisms include the site-wide error handler that you can specify in the ColdFusion MX Administrator and the built-in default error pages.
</li>
</ul>
<p>These techniques let you include application-specific information, such as contact information or application or version identifiers, in the error message, and let you display all error messages in the application in a consistent manner. You can use Application.cfc to develop sophisticated application-wide error-handling techniques, including error-handling methods that provide specific messages, or use structured error-handling techniques.</p>
<p><strong>Note: </strong>The <code>onError</code> method can catch errors that occur in the <code>onSessionEnd</code> and <code>onApplicationEnd</code> application event methods. It will not display messages to the user, however, because there is no request context. The <code>onError</code> function can log errors that occur when the session or application ends.</p><h3><a name="wp1192591"></a>Handling server-side validation errors in the onError method</h3>
<p>Server-side validation errors are actually ColdFusion exceptions; as a result, if your application uses an <code>onError</code> method, this method gets the error and must handle it or pass it on to ColdFusion for handling.</p>
<p>To identify a server-side validation error, search the Arguments.<i>Exception</i>.StackTrace field for coldfusion.filter.FormValidationException. You can then handle the error directly in your <code>onError</code> routine, or throw the error so that either the ColdFusion default validation error page or a page specified by an <code>cferror</code> tag in your Application.cfc initialization code handles it.</p>
<h3><a name="wp1195839"></a>Example: error Handling with the onError method</h3>
<p>The following Application.cfc file has an <code>onError</code> method that handles errors as follows:</p>
<ul>
<li>
   If the error is a server-side validation error, the <code>onError</code> method throws the error for handling by ColdFusion&#160;MX, which displays its standard validation error message.
</li>
<li>
   For any other type of exception, the <code>onError</code> method displays the name of the event method in which the error occurred and dumps the exception information. In this example, because you generate errors on the CFM page only, and not in a Application.cfc method, the event name is always the empty string.
</li>
</ul>
<pre>&lt;cfcomponent&gt;
&lt;cfset This.name = &quot;BugTestApplication&quot;&gt;
&lt;cffunction name=&quot;onError&quot;&gt;
   &lt;!--- The onError method gets two arguments:
         An exception structure, which is identical to a <code>cfcatch </code>variable.
         The name of the Application.cfc method, if any, in which the error
         happened.
   &lt;cfargument name=&quot;Except&quot; required=true/&gt;
   &lt;cfargument type=&quot;String&quot; name = &quot;EventName&quot; required=true/&gt;
   &lt;!--- Log all errors in an application-specific log file. ---&gt;
   &lt;cflog file=&quot;#This.Name#&quot; type=&quot;error&quot; text=&quot;Event Name: #Eventname#&quot; &gt;
   &lt;cflog file=&quot;#This.Name#&quot; type=&quot;error&quot; text=&quot;Message: #except.message#&quot;&gt;
   &lt;!--- Throw validation errors to ColdFusion for handling. ---&gt;
   &lt;cfif Find(&quot;coldfusion.filter.FormValidationException&quot;,
                Arguments.Except.StackTrace)&gt;
      &lt;cfthrow object=&quot;#except#&quot;&gt;
   &lt;cfelse&gt;
      &lt;!--- You can replace this cfoutput tag with application-specific 
            error-handling code. ---&gt;
      &lt;cfoutput&gt;
         &lt;p&gt;Error Event: #EventName#&lt;/p&gt;
         &lt;p&gt;Error details:&lt;br&gt;
         &lt;cfdump var=#except#&gt;&lt;/p&gt;
      &lt;/cfoutput&gt;
   &lt;/cfif&gt;
&lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre><p>To test this example, put a CFML page with the following code in the same page as the Application.cfc file, and enter valid and invalid text in the text input field.</p>
<pre>&lt;cfform&gt;
   This box does Integer validation: 
   &lt;cfinput name=&quot;intinput&quot; type=&quot;Text&quot; validate=&quot;integer&quot; validateat=&quot;onServer&quot;&gt;&lt;br&gt;
   Check this box to throw an error on the action page:
   &lt;cfinput type=&quot;Checkbox&quot; name=&quot;throwerror&quot;&gt;&lt;br&gt;
   &lt;cfinput type=&quot;submit&quot; name=&quot;submitit&quot;&gt;
 &lt;/cfform&gt;

&lt;cfif IsDefined(&quot;form.fieldnames&quot;)&gt;
   &lt;cfif IsDefined(&quot;form.throwerror&quot;)&gt;
      &lt;cfthrow type=&quot;ThrownError&quot; message=&quot;This error was thrown from the bugTest action page.&quot;&gt;
   &lt;cfelseif form.intinput NEQ &quot;&quot;&gt;
      &lt;h3&gt;You entered the following valid data in the field&lt;/h3&gt;
      &lt;cfoutput&gt;#form.intinput#&lt;/cfoutput&gt;
   &lt;/cfif&gt;
&lt;/cfif&gt;
</pre><p><strong>Note: </strong>For more information on server-side validation errors, see <a href="00001376.htm#1096836">Validating Data</a>.</p>

<hr />
<p align="right"><p align="right"><a href="00001120.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001122.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001121.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



