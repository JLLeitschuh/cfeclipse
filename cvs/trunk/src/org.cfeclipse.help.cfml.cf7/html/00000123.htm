<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Exercise 4: Writing structured, reusable code</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000122.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000124.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Exercise 4: Writing structured, reusable code</h1>
<p>Generally, it is good coding practice to separate business logic from the display. The ColdFusion page that you just created contains both business logic (the database query) and presentation (the output code block). To separate them, you put the query in a ColdFusion component (CFC). Doing so separates business logic from presentation; it also makes it easy to reuse the query anywhere in your application. For more information, see <a href="00001022.htm#1170255">Building and Using ColdFusion Components</a> in <i>ColdFusion MX Developer's Guide</i>.</p>
<h4>To move the query to a CFC:</h4>
<ol>
<li>
   Create the CFC file.
</li>
<li>
   Copy the query to the CFC.
</li>
<li>
   Call the method that contains the query.
</li>
</ol>
<h2><a name="wp1196172"></a>Creating the CFC file</h2>
<p>ColdFusion components (CFCs) are special files saved with the filename extension .cfc. They can contain data and functions. Within CFCs, functions are referred to as <i>methods</i>. Actions that you want ColdFusion to perform, such as querying a database, are contained in component methods. One CFC can contain many methods. Each method in a CFC can return only one variable. The following is the general syntax of a CFC:</p>
<pre>&lt;cfcomponent&gt;
   &lt;cffunction name=&quot;firstMethod&quot;&gt;
       &lt;!--- CFML code for this method goes here. ---&gt;
   &lt;/cffunction&gt;
   &lt;cffunction name=&quot;secondMethod&quot;&gt;
       &lt;!--- CFML code for this method goes here. ---&gt;
   &lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre><h4>To create the CFC file:</h4>
<ol>
<li>
   Create a directory named components as a subdirectory of the my_app directory.
</li>
<li>
   Open a new blank file.
<p><strong>Note: </strong>If you are using Dreamweaver, select Dynamic page in the Category list, and select ColdFusion Component in the Dynamic Page list.</p></li>
<li>
   Enter the following code, or do the steps listed in the <a href="00000123.htm#1196118">Let Dreamweaver do it</a> section.
<pre>
&lt;cfcomponent displayName=&quot;Get Trips&quot; hint=&quot;Get trip information&quot;&gt;
	&lt;cffunction name=&quot;basicList&quot; displayName=&quot;List all trips&quot; 
	hint=&quot;List trips in same order as in table&quot; access=&quot;public&quot;
	returnType=&quot;query&quot; output=&quot;false&quot;&gt;

		&lt;cfreturn&gt;
	&lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre>
</li>
<li>
   Save the file as gettrips.cfc in the components directory.
</li>
</ol>
<h4><a name="wp1196118"></a>Let Dreamweaver do it</h4>
<p>Dreamweaver lets you create a ColdFusion component without having to enter the code.</p>
<h4>To create a CFC in Dreamweaver:</h4>
<ol>
<li>
   Click the Components tab.
</li>
<li>
   Click the + button.
</li>
<li>
   In the Display name text box, enter <strong>Get Trips</strong>.
</li>
<li>
   In the Hint text box, enter <strong>Get trip information</strong>.
</li>
<li>
   In the Name text box, enter <strong>gettrips</strong>.
</li>
<li>
   Click the Browse button, and make the components directory the current directory.
</li>
<li>
   In the Section list, click Functions.
</li>
<li>
   Click the + button.
</li>
<li>
   In the Name text box, enter <strong>basicList</strong>.
</li>
<li>
   In the Display name text box, enter <strong>List all trips</strong>.
</li>
<li>
   In the Hint text box, enter <strong>List trips in same order as in the table</strong>.
</li>
<li>
   Select query as the Return type.
</li>
<li>
   Click OK.
</li>
<li>
   Save the file as gettrips.cfc in the components directory.
</li>
</ol>
<h2><a name="wp1195880"></a>Copying the query to the CFC</h2>
<p>To copy the query to the CFC, you copy the CFML to the CFC, between the opening and closing <code>cffunction</code> tags.</p>
<h4>To copy the query to the CFC:</h4>
<ol>
<li>
   Highlight the following code on the triplisting.cfm page:
<pre>
&lt;cfquery name=&quot;TripList&quot; datasource=&quot;CompassTravel&quot;&gt;
	SELECT trips.tripName FROM trips
&lt;/cfquery&gt;
</pre>
</li>
<li>
   Cut the highlighted code and copy it to the gettrips.cfc page so that it appears as follows:
<pre>
&lt;cfcomponent displayName=&quot;Get Trips&quot; hint=&quot;Get trip information&quot;&gt;
	&lt;cffunction name=&quot;basicList&quot; 
		displayName=&quot;List all trips&quot; hint=&quot;List trips in same order as in table&quot;
		access=&quot;public&quot; returnType=&quot;query&quot; output=&quot;false&quot;&gt;
		&lt;cfquery name=&quot;TripList&quot; datasource=&quot;CompassTravel&quot;&gt;
			SELECT trips.tripName FROM trips
		&lt;/cfquery&gt;
		&lt;cfreturn&gt;
	&lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre>
</li>
<li>
   Modify the code by adding the following text so that the method returns the results of the query to the triplisting.cfm page:
<pre>
&lt;cfreturn TripList&gt;
</pre>
</li>
<li>
   Save the gettrips.cfc file.
</li>
</ol>
<h2><a name="wp1196258"></a>Calling the query method</h2>
<p>To perform the query that is now in a method in a ColdFusion component, you have to call (invoke) the method. To do so, you can use the <a href="00000281.htm#2650065"><code>cfinvoke</code></a> tag. Within the <code>cfinvoke</code> tag, you specify the name of the ColdFusion component, the method to call, and the query to return to the calling page. The name of the component includes the package, &quot;cfdocs.getting_started.my_app.components.&quot; The package looks very similar to the path, except that it contains periods instead of slashes. Like a path, it specifies the location of the component.</p>
<h4>To invoke the method:</h4>
<ol>
<li>
   Go to the top of the triplisting.cfm file.
</li>
<li>
   Enter the following code, or do the steps listed in the <a href="00000123.htm#1196262">Let Dreamweaver do it</a> section.
<pre>
&lt;cfinvoke 
 component=&quot;cfdocs.getting_started.my_app.components.gettrips&quot;
 method=&quot;basicList&quot;
 returnvariable=&quot;TripList&quot;&gt;
&lt;/cfinvoke&gt;
</pre>
</li>
<li>
   Save the file.
</li>
<li>
   View the triplisting.cfm page in a browser and notice that the page lists the trip names, just as it did previously.
</li>
</ol>
<h4><a name="wp1196262"></a>Let Dreamweaver do it</h4>
<p>Dreamweaver lets you invoke a method in a CFC without having to write the code.</p>
<h4>To invoke the method using Dreamweaver:</h4>
<ol>
<li>
   Click the Components tab in the Application panel.
</li>
<li>
   Click the + button next to cfdocs.getting_started.my_app.components.
</li>
<li>
   Click the + button next to gettrips.
</li>
<li>
   Select query basicList() and drag it to the top of the triplisting.cfm file.
</li>
<li>
   Change the value of the <code>returnvariable</code> to be the name of the query, TripList, as follows:
<pre>
returnvariable=&quot;TripList&quot;
</pre>
</li>
<li>
   Return to Step 3 in the <a href="00000123.htm#1196372">To invoke the method:</a> procedure.
</li>
</ol>


<hr />
<p align="right"><p align="right"><a href="00000122.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000124.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000123.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



