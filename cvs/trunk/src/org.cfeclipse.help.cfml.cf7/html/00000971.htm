<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using CFScript statements</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000970.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000972.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using CFScript statements</h1>
<p>The following sections describe how to use these CFScript statements:</p>
<ul>
<li>
   <a href="00000971.htm#1114721">Using assignment statements and functions</a>
</li>
<li>
   <a href="00000971.htm#1112918">Using conditional processing statements</a>
</li>
<li>
   <a href="00000972.htm#1115722">Using looping statements</a>
</li>
</ul>
<h2><a name="wp1114721"></a>Using assignment statements and functions</h2>
<p>CFScript assignment statements are the equivalent of the <a href="00000334.htm#1103445"><code>cfset</code></a> tag. These statements have the following form:</p>
<pre>lval = expression;
</pre><p>lval is any ColdFusion variable reference; for example:</p>
<pre>x = &quot;positive&quot;;
y = x; 
a[3]=5; 
structure.member=10;
ArrayCopy=myArray;
</pre><p>You can use ColdFusion function calls, including UDFs, directly in CFScript. For example, the following line is a valid CFScript statement:</p>
<pre>StructInsert(employee,&quot;lastname&quot;,FORM.lastname);
</pre><h2><a name="wp1112918"></a>Using conditional processing statements</h2>
<p>CFScript includes the following conditional processing statements:</p>
<ul>
<li>
   <code>if</code> and <code>else</code> statements, which serve the same purpose as the <a href="00000274.htm#1100123"><code>cfif</code></a>, <a href="00000241.htm#2647667"><code>cfelseif</code></a>, and <a href="00000240.htm#3138301"><code>cfelse</code></a> tags
</li>
<li>
   <code>switch</code>, <code>case</code>, and <code>default</code> statements, which are the equivalents of the <a href="00000339.htm#1103819"><code>cfswitch</code></a>, <a href="00000224.htm#3798974"><code>cfcase</code></a>, and <a href="00000234.htm#2664493"><code>cfdefaultcase</code></a> tags
</li>
</ul>
<h3><a name="wp1096165"></a>Using if and else statements</h3>
<p>The <code>if</code> and <code>else</code> statements have the following syntax:</p>
<pre>if(expr) statement [else statement]
</pre><p>In its simplest form, an if statement looks like this:</p>
<pre>if(value EQ 2700)
   message = &quot;You've reached the maximum&quot;;
</pre><p>A simple if-else statement looks like the following:</p>
<pre>if(score GT 1)
   result = &quot;positive&quot;;
else
   result = &quot;negative&quot;;
</pre><p>CFScript does not include an elseif statement. However, you can use an <code>if</code> statement immediately after an <code>else</code> statement to create the equivalent of a <code>cfelseif</code> tag, as the following example shows:</p>
<pre>if(score GT 1)
   result = &quot;positive&quot;;
else if(score EQ 0)
   result = &quot;zero&quot;;
else
   result = &quot;negative&quot;;
</pre><p>As with all conditional processing statements, you can use curly braces to enclose multiple statements for each condition, as follows:</p>
<pre>if(score GT 1)&#160;{
   result = &quot;positive&quot;;
   message = &quot;The result was positive.&quot;;
   }
else&#160;{
   result = &quot;negative&quot;;
   message = &quot;The result was negative.&quot;;
   }
</pre><p><strong>Note: </strong>Often, you can make your code clearer by using braces even where they are not required.</p><h3><a name="wp1117610"></a>Using switch and case statements</h3>
<p>The <code>switch</code> statement and its dependent <code>case</code> and <code>default</code> statements have the following syntax:</p>
<pre>switch (expression) {<br />   case constant: [case constant:]... statement(s) break; <br />   [case constant: [case constant:]... statement(s) break;]... <br />   [default: statement(s)] }
</pre><p>Use the following rules and recommendations for <code>switch</code> statements:</p>
<ul>
<li>
   You cannot mix Boolean and numeric constant values in a <code>switch</code> statement.
</li>
<li>
   Each constant value must be a constant (that is, not a variable, a function, or other expression).
</li>
<li>
   Multiple <code>case</code> <i>constant:</i> statements can precede the statement or statements to execute if any of the cases are true. This lets you specify several matches for one code block.
</li>
<li>
   No two constant values can be the same.
</li>
<li>
   The statements following the colon in a <code>case</code> statement block do not have to be in braces. If a constant value equals the <code>switch</code> expression, ColdFusion executes all statements through the <code>break</code> statement.
</li>
<li>
   The <code>break</code> statement at the end of the <code>case</code> statement tells ColdFusion to exit the <code>switch</code> statement. ColdFusion does not generate an error message if you omit a <code>break</code> statement. However, if you omit it, ColdFusion executes all the statements in the following case statement, <i>even if that case is false</i>. In nearly all circumstances, this is not what you want to do.
</li>
<li>
   You can have only one <code>default</code> statement in a <code>switch</code> statement block. ColdFusion executes the statements in the <code>default</code> block if none of the <code>case</code> statement constants equals the expression value. 
</li>
<li>
   The <code>default</code> statement does not have to follow all <code>switch</code> statements, but it is good programming practice to do so. If any <code>switch</code> statements follow the <code>default</code> statement you must end the <code>default</code> block code with a <code>break</code> statement. 
</li>
<li>
   The <code>default</code> statement is not required. However, you should use one if the <code>case</code> constants do not include all possible values of the expression.
</li>
<li>
   The <code>default</code> statement does not have to follow all the <code>case</code> statements; however, it is good programming practice to put it there.
</li>
</ul>
<p>The following <code>switch</code> statement takes the value of a name variable: </p>
<ol>
<li>
   If the name is John or Robert, it sets both the male variable and the found variable to True. 
</li>
<li>
   If the name is Mary, it sets the male variable to False and the found variable to True. 
</li>
<li>
   Otherwise, it sets the found variable to False.
</li>
</ol>
<pre>switch(name)&#160;{
   case &quot;John&quot;: case &quot;Robert&quot;:
      male=True;
      found=True;
      break;
   case &quot;Mary&quot;:
      male=False;
      found=True;
      break;
   default:
      found=False;
} //end switch
</pre>

<hr />
<p align="right"><p align="right"><a href="00000970.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000972.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000971.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



