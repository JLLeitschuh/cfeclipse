<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Moving complex data across the web with WDDX</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001522.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001524.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Moving complex data across the web with WDDX</h1>
<p>WDDX is an XML vocabulary for describing a complex data structure, such as an array, associative array (such as a ColdFusion structure), or a recordset, in a generic fashion. It lets you use HTTP to move the data between different application server platforms and between application servers and browsers. Target platforms for WDDX include ColdFusion, Active Server Pages (ASP), JavaScript, Perl, Java, Python, COM, Macromedia Flash, and PHP.</p>
<p>The WDDX XML vocabulary consists of a document type definition (DTD) that describes the structure of standard data types and a set of components for each of the target platforms to do the following:</p>
<ul>
<li>
   <strong>Serialize</strong> the data from its native representation into a WDDX XML document or document fragment.
</li>
<li>
   <strong>Deserialize</strong> a WDDX XML document or document fragment into the native data representation, such as a CFML structure.
</li>
</ul>
<p>This vocabulary creates a way to move data, its associated data types, and descriptors that allow the data to be manipulated on a target system, between arbitrary application servers.</p>
<p><strong>Note: </strong>The WDDX DTD, which includes documentation, is located at <br /><a href="http://www.openwddx.org/downloads/dtd/wddx_dtd_10.txt" target="mm_window">www.openwddx.org/downloads/dtd/wddx_dtd_10.txt</a>.</p><p>WDDX is a valuable tool for ColdFusion developers, however, its usefulness is not limited to CFML. If you serialize a common programming data structure (such as an array, recordset, or structure) into WDDX format, you can use HTTP to transfer the data across a range of languages and platforms. Also, you can use WDDX to store complex data in a database, file, or even a client variable.</p>
<p>WDDX has two features that make it useful for transferring data in a web environment: </p>
<ul>
<li>
   It is lightweight. The JavaScript used to serialize and deserialize data, including a debugging function to dump WDDX data, occupies less than 22K.
</li>
<li>
   Unlike traditional client-server approaches, the source and target system can have minimal-to-no prior knowledge of each other. They only need to know the structure of the data that is being transferred.
</li>
</ul>
<p>WDDX was created in 1998, and many applications now expose WDDX capabilities. The best source of information about WDDX is <a href="http://www.openwddx.org" target="mm_window">www.openwddx.org</a>. This site offers free downloads of the WDDX DTD and SDK and a number of resources, including a WDDX FAQ, a developer forum, and links to additional sites that provide WDDX resources.</p>
<p>This section includes the following topics:</p>
<ul>
<li>
   <a href="00001523.htm#1127175">Uses of WDDX</a>
</li>
<li>
   <a href="00001523.htm#1105889">How WDDX works</a>
</li>
</ul>
<h2><a name="wp1127175"></a>Uses of WDDX</h2>
<p>WDDX is useful for transferring complex data between applications. For example, you can use it to exchange data between a CFML application and a CGI or PHP application. WDDX is also useful for transferring data between the server and client-side JavaScript.</p>
<h3><a name="wp1133602"></a>Exchanging data across application servers</h3>
<p>WDDX is useful for the transfer of complex, structured data seamlessly between different application server platforms. For example, an application based on ColdFusion at one business could use <a href="00000351.htm#2682044"><code>cfwddx</code></a> to convert a purchase order structure to WDDX. It could then use <code>cfhttp</code> to send the WDDX to a supplier running a CGI-based system. </p>
<p>The supplier could then deserialize the WDDX to its native data form, the extract information from the order, and pass it to a shipping company running an application based on ASP. </p>
<h3><a name="wp1096428"></a>Transferring data between the server and browser</h3>
<p>You can use WDDX for server-to-browser and browser-to-server data exchanges. You can transfer server data to the browser in WDDX format and convert it to JavaScript objects on the browser. Similarly, your application pages can serialize JavaScript data generated on the browser into WDDX format and transfer the data to the application server. You then deserialize the WDDX XML into CFML data on the server. </p>
<p>On the server you use the <a href="00000351.htm#2682044"><code>cfwddx</code></a> tag to serialize and deserialize WDDX data. On the browser, you use WddxSerializer and WddxRecordset JavaScript utility classes to serialize the JavaScript data to WDDX. (ColdFusion installs these utility classes on your server as webroot/CFIDE/scripts/wddx.js.)</p>
<h3><a name="wp1127133"></a>WDDX and web services</h3>
<p>WDDX does not compete with web services. It is a complementary technology focused on solving simple problems of application integration by sharing data on the web in a pragmatic, productive manner at very low cost.</p>
<p>WDDX offers the following advantages:</p>
<ul>
<li>
   It can be used by lightweight clients, such as browsers or the Macromedia Flash player.
</li>
<li>
   It can be used to store complex data structures in files and databases.
</li>
</ul>
<p>Applications that take advantage of WDDX can continue to do so if they start to use web services. These applications could also be converted to use web services standards exclusively; only the service and data interchange formats--not the application model--must change.</p>
<h2><a name="wp1105889"></a>How WDDX works</h2>
<p>The following example shows how WDDX works. A simple structure with two string variables might have the following form after it is serialized into a WDDX XML representation:</p>
<pre>&lt;var name=&#39;x&#39;&gt;
   &lt;struct&gt;

      &lt;var name=&#39;a&#39;&gt;
         &lt;string&gt;Property a&lt;/string&gt;
      &lt;/var&gt;
      &lt;var name=&#39;b&#39;&gt;
         &lt;string&gt;Property b&lt;/string&gt;
      &lt;/var&gt;
   &lt;/struct&gt;
&lt;/var&gt;
</pre><p>When you deserialize this XML into CFML or JavaScript, the result is a structure that is created by either of the following scripts:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
JavaScript
    </th>
    <th>
CFScript
    </th>
  </tr>
  <tr>
    <td>
<p>x = new Object();<br />x.a = &quot;Property a&quot;;<br />x.b = &quot;Property b&quot;;</p>
    </td>
    <td>
<p>x = structNew();<br />x.a = &quot;Property a&quot;;<br />x.b = &quot;Property b&quot;;</p>
    </td>
  </tr>
</table>

<p>Conversely, when you serialize the variable x produced by either of these scripts into WDDX, you generate the XML listed above.</p>
<p>ColdFusion provides a tag and JavaScript objects that convert between CFML, WDDX, and JavaScript. Serializers and deserializers for other data formats are available on the web. For more information, see <a href="http://www.openwddx.org" target="mm_window">www.openwddx.org</a>. </p>
<p><strong>Note: </strong>The <code>cfwddx</code> tag and the wddx.js JavaScript functions use UTF-8 encoding to represent data. Any tools that deserialize ColdFusion-generated WDDX must accept UTF-8 encoded characters. UTF-8 encoding is identical to the ASCII and ISO 8859 single-byte encodings for the standard 128 &quot;7-bit&quot; ASCII characters. However, UTF-8 uses a two-byte representation for &quot;high-ASCII&quot; ISO 8859 characters where the initial bit is 1.</p><h3><a name="wp1117919"></a>WDDX data type support</h3>
<p>The following sections describe the data types that WDDX supports. This information is a distillation of the description in the WDDX DTD. For more detailed information, see the DTD at www.openwddx.org.</p>
<h4><a name="wp1129188"></a>Basic data types</h4>
<p>WDDX can represent the following basic data types:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Data type
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>Null</p>
    </td>
    <td>
<p>Null values in WDDX are not associated with a type such as number or string. The <a href="00000351.htm#2682044"><code>cfwddx</code></a> tag converts WDDX Nulls to empty strings.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Numbers</p>
    </td>
    <td>
<p>WDDX documents use floating point numbers to represent all numbers. The range of numbers is restricted to +/-1.7E+/-308. The precision is restricted to 15 digits after the decimal point.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Date-time values</p>
    </td>
    <td>
<p>Date-time values are encoded according to the full form of ISO8601; for example, 2002-9-15T09:05:32+4:0. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Strings</p>
    </td>
    <td>
<p>Strings can be of arbitrary length and must not contain embedded nulls. Strings can be encoded using double-byte characters.</p>
    </td>
  </tr>
</table>

<h4><a name="wp1132333"></a>Complex data types</h4>
<p>WDDX can represent the following complex data types:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Data type
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>Array</p>
    </td>
    <td>
<p>Arrays are integer-indexed collections of objects of arbitrary type. Because most languages start array indexes at 0, while CFML array indexes start at 1, working with array indices can lead to nonportable data.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Structure</p>
    </td>
    <td>
<p>Structures are string-indexed collections of objects of arbitrary type, sometimes called associative arrays. Because some of the languages supported by WDDX are not case-sensitive, no two variable names in a structure can differ only in their case.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Recordset</p>
    </td>
    <td>
<p>Recordsets are tabular rows of named fields, corresponding to ColdFusion query objects. Only simple data types can be stored in recordsets. Because some of the languages supported by WDDX are not case-sensitive, no two field names in a recordset can differ only in their case. Field names must satisfy the regular expression [_A-Za-z][_.0-9A-Za-z]* where the period (.) stands for a literal period character, not &quot;any character&quot;.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Binary</p>
    </td>
    <td>
<p>The binary data type represents strings (blobs) of binary data. The data is encoded in MIME base64 format.</p>
    </td>
  </tr>
</table>

<h4><a name="wp1129952"></a>Data type comparisons</h4>
<p>The following table compares the basic WDDX data types with the data types to which they correspond in the languages and technologies commonly used on the web:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
WDDX
    </th>
    <th>
CFML
    </th>
    <th>
XML
Schema
    </th>
    <th>
Java
    </th>
    <th>
ECMAScript/
JavaScript
    </th>
    <th>
COM
    </th>
  </tr>
  <tr>
    <td>
<p>null</p>
    </td>
    <td>
<p>N/A</p>
    </td>
    <td>
<p>N/A</p>
    </td>
    <td>
<p>null</p>
    </td>
    <td>
<p>null</p>
    </td>
    <td>
<p>VT_NULL</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>boolean</p>
    </td>
    <td>
<p>Boolean</p>
    </td>
    <td>
<p>boolean</p>
    </td>
    <td>
<p>java.lang.Boolean</p>
    </td>
    <td>
<p>boolean</p>
    </td>
    <td>
<p>VT_BOOL</p>
    </td>
  </tr>
  <tr>
    <td>
<p>number</p>
    </td>
    <td>
<p>Number</p>
    </td>
    <td>
<p>number</p>
    </td>
    <td>
<p>java.lang.Double</p>
    </td>
    <td>
<p>number</p>
    </td>
    <td>
<p>VT_R8</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>dateTime</p>
    </td>
    <td>
<p>DateTime</p>
    </td>
    <td>
<p>dateTime</p>
    </td>
    <td>
<p>java.lang.Date</p>
    </td>
    <td>
<p>Date</p>
    </td>
    <td>
<p>VT_DATE</p>
    </td>
  </tr>
  <tr>
    <td>
<p>string</p>
    </td>
    <td>
<p>String</p>
    </td>
    <td>
<p>string</p>
    </td>
    <td>
<p>java.lang.String</p>
    </td>
    <td>
<p>string</p>
    </td>
    <td>
<p>VT_BSTR</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>array</p>
    </td>
    <td>
<p>Array</p>
    </td>
    <td>
<p>N/A</p>
    </td>
    <td>
<p>java.lang.Vector</p>
    </td>
    <td>
<p>Array</p>
    </td>
    <td>
<p>VT_ARRAY | VT_VARIANT</p>
    </td>
  </tr>
  <tr>
    <td>
<p>struct</p>
    </td>
    <td>
<p>Structure</p>
    </td>
    <td>
<p>N/A</p>
    </td>
    <td>
<p>java.lang.</p>
<p>Hashtable</p>
    </td>
    <td>
<p>Object</p>
    </td>
    <td>
<p>IWDDXStruct</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>recordset</p>
    </td>
    <td>
<p>Query object</p>
    </td>
    <td>
<p>N/A</p>
    </td>
    <td>
<p>coldfusion.run<br />time.QueryTable</p>
    </td>
    <td>
<p>WddxRecordset</p>
    </td>
    <td>
<p>IWDDXRecordset</p>
    </td>
  </tr>
  <tr>
    <td>
<p>binary</p>
    </td>
    <td>
<p>Binary</p>
    </td>
    <td>
<p>binary</p>
    </td>
    <td>
<p>byte[]</p>
    </td>
    <td>
<p>WddxBinary</p>
    </td>
    <td>
<p>V_ARRAY | UI1 </p>
    </td>
  </tr>
</table>

<h3><a name="wp1131206"></a>Time zone processing</h3>
<p>Producers and consumers of WDDX packets can be in geographically dispersed locations. Therefore, it is important to use time zone information when serializing and deserializing data, to ensure that date-time values are represented correctly.</p>
<p>The <a href="00000351.htm#2682044"><code>cfwddx</code></a> <code>action=cfml2wddx</code> tag <code>useTimezoneInfo</code> attribute specifies whether to use time zone information in serializing the date-time data. In the JavaScript implementation, <code>useTimezoneInfo</code> is a property of the <code>WddxSerializer</code> object. In both cases the default <code>useTimezoneInfo</code> value is <code>True</code>.</p>
<p>Date-time values in WDDX are represented using a subset of the ISO8601 format. Time zone information is represented as an hour/minute offset from Coordinated Universal Time (UTC); for example, &quot;2002-9-8T12:6:26-4:0&quot;.</p>
<p>When the <code>cfwddx</code> tag deserializes WDDX to CFML, it automatically uses available time zone information, and converts date-time values to local time. In this way, you do not need to worry about the details of time zone conversions.</p>
<p>However, when the JavaScript objects supplied with ColdFusion deserialize WDDX to JavaScript expressions, they do not use time zone information, because in JavaScript it is difficult to determine the time zone of the browser.</p>


<hr />
<p align="right"><p align="right"><a href="00001522.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001524.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001523.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



