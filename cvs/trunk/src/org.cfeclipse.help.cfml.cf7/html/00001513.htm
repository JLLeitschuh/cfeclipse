<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Creating and saving an XML document object</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001512.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001514.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Creating and saving an XML document object</h1>
<p>The following sections show the ways you can create and save an XML document object. The specific technique that you use will depend on the application and your coding style.</p>
<ul>
<li>
   <a href="00001513.htm#1127782">Creating a new XML document object using the cfxml tag</a>
</li>
<li>
   <a href="00001513.htm#1204405">Creating a new XML document object using the XmlNew function</a>
</li>
<li>
   <a href="00001513.htm#1120217">Creating an XML document object from existing XML</a>
</li>
</ul>
<h2><a name="wp1127782"></a>Creating a new XML document object using the cfxml tag</h2>
<p>The <a href="00000352.htm#2497244"><code>cfxml</code></a> tag creates an XML document object that consists of the XML markup in the tag body. The tag body can include CFML code. ColdFusion processes the CFML code and includes the resulting output in the XML. The following example shows a simple <code>cfxml</code> tag:</p>
<pre>&lt;cfset testVar = True&gt;
&lt;cfxml variable=&quot;MyDoc&quot;&gt;
   &lt;MyDoc&gt;
      &lt;cfif testVar IS True&gt;
         &lt;cfoutput&gt;The value of testVar is True.&lt;/cfoutput&gt;
      &lt;cfelse&gt;
         &lt;cfoutput&gt;The value of testVar is False.&lt;/cfoutput&gt;
      &lt;/cfif&gt;
      &lt;cfloop index = &quot;LoopCount&quot; from = &quot;1&quot; to = &quot;4&quot;&gt;
         &lt;childNode&gt;
            This is Child node &lt;cfoutput&gt;#LoopCount#.&lt;/cfoutput&gt;
         &lt;/childNode&gt;
      &lt;/cfloop&gt;
   &lt;/MyDoc&gt;
&lt;/cfxml&gt;
&lt;cfdump var=#MyDoc#&gt;
</pre><p>This example creates a document object with a root element MyDoc, which includes text that displays the value of the ColdFusion variable testVar. MyDoc has four nested child elements, which are generated by an indexed <a href="00000290.htm#3301338"><code>cfloop</code></a> tag. The <a href="00000239.htm#3765824"><code>cfdump</code></a> tag displays the resulting XML document object.</p>
<p><strong>Note: </strong>When you use the <code>cfxml</code> tag, do not include an &lt;?xml ?&gt; processing directive in the tag body. This directive is not required, and causes an error. To process XML text that includes the &lt;?xml ?&gt; directive, use the <a href="00000671.htm#139864"><code>XmlParse</code></a> function.</p><h2><a name="wp1204405"></a>Creating a new XML document object using the XmlNew function</h2>
<p>The <a href="00000670.htm#139785"><code>XmlNew</code></a> function creates a new XML document object, which you must then populate. For information on how to populate a new XML document, see <a href="00001517.htm#1152792">Adding, deleting, and modifying XML elements</a>.</p>
<p><strong>Note: </strong>You cannot set the <code>XmlDocType</code> property for an XML document object that you create with the <code>XmlNew</code> function.</p><p>The following example creates and displays the same ColdFusion document object as in <a href="00001513.htm#1127782">Creating a new XML document object using the cfxml tag</a>. </p>
<pre>&lt;cfset testVar = True&gt;
&lt;cfscript&gt;
   MyDoc = XmlNew();
   MyDoc.xmlRoot = XmlElemNew(MyDoc,&quot;MyRoot&quot;);
   if (testVar IS TRUE)
      MyDoc.MyRoot.XmlText = &quot;The value of testVar is True.&quot;;
   else 
      MyDoc.MyRoot.XmlText = &quot;The value of testVar is False.&quot;;
   for (i = 1; i LTE 4; i = i + 1)
      {
      MyDoc.MyRoot.XmlChildren[i] = XmlElemNew(MyDoc,&quot;childNode&quot;);
      MyDoc.MyRoot.XmlChildren[i].XmlText = &quot;This is Child node &quot; &amp; i &amp;&quot;.&quot;;
      }
&lt;/cfscript&gt;
&lt;cfdump var=#MyDoc#&gt;
</pre><h2><a name="wp1120217"></a>Creating an XML document object from existing XML</h2>
<p>The <a href="00000671.htm#139864"><code>XmlParse</code></a> function converts an XML document or document fragment represented as text into a ColdFusion document object. You can use a string variable containing the XML or the name or URL of a file that contains the text. For example, if your application uses <code>cfhttp action=&quot;get&quot;</code> to get the XML document, use the following line to create the XML document object:</p>
<pre>&lt;cfset myXMLDocument = XmlParse(cfhttp.fileContent)&gt;
</pre><p>The following example converts an XML text document is in a file to an XML document object:</p>
<pre>C:\temp\myxmldoc.xml&quot; variable=&quot;XMLFileText&quot;&gt;
&lt;cfset myXMLDocument=XmlParse(&quot;C:\temp\myxmldoc.xml&quot; variable=&quot;)&gt;
</pre><p>The <code>XmlParse</code> function takes a second, optional, attribute that specifies whether to maintain the case of the elements and attributes in the document object. The default is to have the document object be case-insensitive. For more information on case-sensitivity, see <a href="00001512.htm#1133173">Referencing the contents of an XML object</a>.</p>
<p>The <code>XmlParse</code> function also lets you specify a DTD or Schema to validate the XML text; if the XML is not valid, ColdFusion MX generates an error. You can specify the filename or URL of the validator, or the DTD or Schema can be in a CFML variable. You can also tell ColdFusion MX to use a DTD or Schema that is identified in the XML text. If you specify validation, you must also specify whether the document is be case-sensitive. The following example validates an XML document on file using a DTD that it specifies using a URL:</p>
<pre>myDoc=XMLParse(&quot;C:\CFusionMX7\wwwroot\examples\custorder.xml&quot;, false,
      &quot;http://localhost:8500/examples/custorder.dtd&quot;)&gt;
</pre><h2><a name="wp1182796"></a>Saving and exporting an XML document object</h2>
<p>The <a href="00000655.htm#138710"><code>ToString</code></a> function converts an XML document object to a text string. You can then use the string variable in any ColdFusion tag or function. </p>
<p>To save the XML document in a file, use the <code>ToString</code> function to convert the document object to a string variable, then use the <a href="00000245.htm#1098395"><code>cffile</code></a> tag to save the string as a file. For example, use the following code to save the XML document myXMLDocument in the file C:\temp\myxmldoc.xml:</p>
<pre>&lt;cfset XMLText=ToString(myXMLDocument)&gt;
&lt;cffile action=&quot;write&quot; file=&quot;C:\temp\myxmldoc.xml&quot; output=&quot;#XMLText#&quot;&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00001512.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001514.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001513.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



