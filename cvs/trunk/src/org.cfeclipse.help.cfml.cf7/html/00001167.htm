<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Sample locking scenarios</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001166.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001168.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Sample locking scenarios</h1>
<p>The following examples present scenarios in which you need to lock ColdFusion code. These scenarios show only two of the circumstances where locking is vital.</p>
<h4><a name="wp1170039"></a>Reading and writing a shared variable</h4>
<p>If you have an application-wide value, such as a counter of the total number of tickets sold, you might have code such as the following on a login page:</p>
<pre>&lt;cfset Application.totalTicketsSold = Application.totalTicketsSold + ticketOrder&gt;
</pre><p>When ColdFusion executes this code, it performs the following operations:</p>
<ol>
<li>
   Retrieves the current value of Application.totalTicketsSold from temporary storage.
</li>
<li>
   Increments this value.
</li>
<li>
   Stores the result back in the Application scope.
</li>
</ol>
<p>Suppose that ColdFusion processes two ticket orders at approximately the same time, and that the value of Application.totalTicketsSold is initially 160. The following sequence might happen:</p>
<ol>
<li>
   Order 1 reads the total tickets sold as 160.
</li>
<li>
   Order 2 reads the total tickets sold as 160.
</li>
<li>
   Order 1 adds an order of 5 tickets to 160 to get 165.
</li>
<li>
   Order 2 adds an order of 3 tickets to 160 to get 163.
</li>
<li>
   Order 1 saves the value 165 to Application.totalTicketsSold
</li>
<li>
   Order 2 saves the value 163 to Application.totalTicketsSold
</li>
</ol>
<p>The application now has an inaccurate count of the tickets sold, and is in danger of selling more tickets than the auditorium can hold.</p>
<p>To prevent this from happening, lock the code that increments the counter, as follows:</p>
<pre>&lt;cflock scope=&quot;Application&quot; timeout=&quot;10&quot; type=&quot;Exclusive&quot;&gt;
   &lt;cfset Application.totalTicketsSold = Application.totalTicketsSold + ticketOrder&gt;
&lt;/cflock&gt;
</pre><p>The <code>cflock</code> tag ensures that while ColdFusion performs the processing in the tag body, no other threads can access the Application scope. As a result, the second transaction is not processed until the first one completes. The processing sequence looks something like the following:</p>
<ol>
<li>
   Order 1 reaches the lock tag, which gets an Application scope lock.
</li>
<li>
   Order 1 reads the total tickets sold as 160.
</li>
<li>
   Order 2 reaches the lock tag. Because there is an active Application scope lock, ColdFusion waits for the lock to free.
</li>
<li>
   Order 1 adds an order of 5 tickets to 160 to get 165.
</li>
<li>
   Order 1 saves the value 165 to Application.totalTicketsSold.
</li>
<li>
   Order 1 exits the lock tag. The Application scope lock is now free.
</li>
<li>
   Order 2 gets the Application scope lock and can begin processing.
</li>
<li>
   Order 2 reads the total tickets sold as 165.
</li>
<li>
   Order 2 adds an order of 3 tickets to 165 to get 168.
</li>
<li>
   Order 2 saves the value 168 to Application.totalTicketsSold.
</li>
<li>
   Order 2 exits the lock tag, which frees the Application scope lock. ColdFusion can process another order.
</li>
</ol>
<p>The resulting Application.totalTickesSold value is now correct.</p>
<h4><a name="wp1170410"></a>Ensuring consistency of multiple variables</h4>
<p>Often an application sets multiple shared scope variables at one time, such as a number of values submitted by a user on a form. If the user submits the form, clicks the back button, and then resubmits the form with different data, the application might end up with a mixture of data from the two submissions, in much the same manner as shown in the previous section.</p>
<p>For example, an application might store information about order items in a Session scope shopping cart. If the user submits an item selection page with data specifying sage green size 36 shorts, and then resubmits the item specifying sea blue size 34 shorts, the application might end up with a mixture of information from the two orders, such as sage green size 34 shorts.</p>
<p>By putting the code that sets all of the related session variables in a single <code>cflock</code> tag, you ensure that all the variables get set together. In other words, setting all of the variables becomes an <strong>atomic</strong>, or single, operation. It is similar to a database transaction, where everything in the transaction happens, or nothing happens. In this example, the order details for the first order all get set, and then they are replaced with the details from the second order.</p>
<p>For more examples of using locking in applications, see <a href="00001172.htm#1155009">Examples of cflock</a>.</p>


<hr />
<p align="right"><p align="right"><a href="00001166.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001168.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001167.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



