<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>cfobject: COM object</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000302.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000304.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>cfobject: COM object</h1>
<h4><a name="wp1101490"></a>Description</h4>
<p>Creates and manipulates a Component Object Model (COM) object. Invokes a registered automation server object type. </p>
<p>For information on OLEView, and about COM and DCOM, see the Microsoft OLE Development website: <a href="http://www.microsoft.com" target="mm_window">www.microsoft.com</a>.</p>
<p>To use this tag, you must provide the object's program ID or filename, the methods and properties available through the IDispatch interface, and the arguments and return types of the object&#39;s methods. For most COM objects, you can get this information with the OLEView utility. </p>
<p><strong>Note: </strong>On UNIX, this tag does not support COM objects.</p><h4><a name="wp1101492"></a>Syntax</h4>
<pre>&lt;cfobject <br />   type = &quot;com&quot;<br />   action = &quot;action&quot;<br />   class = &quot;program_ID&quot;<br />   name = &quot;text&quot;<br />   context = &quot;context&quot;<br />   server = &quot;server_name&quot;&gt;
</pre><h4><a name="wp1956705"></a>See also</h4>
<p><a href="00000608.htm#135363">ReleaseComObject</a>, <a href="00000230.htm#1097667">cfcollection</a>, <a href="00000243.htm#1098198">cfexecute</a>; <a href="00001207.htm#1185165">COM</a> in <a href="00001195.htm#1141005">Developing Globalized Applications</a> in <i>ColdFusion MX Developer's Guide</i></p>
<h4><a name="wp2245698"></a>Attributes</h4>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Attribute
    </th>
    <th>
Req/Opt
    </th>
    <th>
Default
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>type</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Object type:</p>
<ul>
<li>
   com
</li>
<li>
   corba
</li>
<li>
   java
</li>
</ul>
<p>(The other object types do not take the <code>type</code> attribute.)</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>action</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<ul>
<li>
   create: instantiates a COM object (typically, a DLL) before invoking methods or properties.
</li>
<li>
   connect: connects to a COM object (typically, an EXE) running on server.
</li>
</ul>
    </td>
  </tr>
  <tr>
    <td>
<p>class</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Component ProgID for the object to invoke. When using Java stubs to connect to the COM object, the class must be the ProgID of the COM object.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>name</p>
    </td>
    <td>
<p>Required</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>String; name for the instantiated component.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>context</p>
    </td>
    <td>
<p>Optional</p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<ul>
<li>
   inproc
</li>
<li>
   local
</li>
<li>
   remote 
</li>
</ul>
<p>On Windows: If not specified, uses Registry setting. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>server</p>
    </td>
    <td>
<p>Required if <code>context = &quot;Remote&quot;</code></p>
    </td>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>Server name, using Universal Naming Convention (UNC) or Domain Name Serve (DNS) convention, in one of these forms: </p>
<ul>
<li>
   \\lanserver
</li>
<li>
   lanserver
</li>
<li>
   http://www.servername.com
</li>
<li>
   www.servername.com
</li>
<li>
   127.0.0.1
</li>
</ul>
    </td>
  </tr>
</table>

<h4><a name="wp1101511"></a>Example</h4>
<pre>&lt;h3&gt;cfobject (COM) Example&lt;/h3&gt;
&lt;!--- Create a COM object as an inproc server (DLL). (class = prog-id)---&gt;
&lt;cfobject action = &quot;Create&quot;
   type = &quot;COM&quot;
   class = Allaire.DocEx1.1
   name = &quot;obj&quot;&gt; 

&lt;!--- Call a method. Methods that expect no arguments should be called <br />using empty parentheses. ---&gt;
&lt;cfset obj.Init()&gt;

&lt;!--- This is a collection object. It should support, at a minimum:
   Property : Count
   Method : Item(inarg, outarg)
   and a special property called _NewEnum 
---&gt;
&lt;cfoutput&gt;
   This object has #obj.Count# items.
   &lt;br&gt; &lt;HR&gt;
&lt;/cfoutput&gt;

&lt;!--- Get the 3rd object in the collection. ---&gt;
&lt;cfset emp = obj.Item(3)&gt;
&lt;cfoutput&gt;
   The last name in the third item is #emp.lastname#.
   &lt;br&gt; &lt;HR&gt;
&lt;/cfoutput&gt;
&lt;!---Loop over all the objects in the collection.---&gt;
&lt;p&gt;Looping through all items in the collection:
&lt;br&gt;
&lt;cfloop 
   collection = #obj# 
   item = file2&gt;
   &lt;cfoutput&gt;Last name: #file2.lastname# &lt;br&gt;&lt;/cfoutput&gt;
&lt;/cfloop&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00000302.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000304.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000303.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



