<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using ColdFusion components to define data types for web services</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001548.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001550.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using ColdFusion components to define data types for web services</h1>
<p>ColdFusion lets you define components that contain only properties. Once defined, you can use components to define data types for web services. The following code defines a component in the file address.cfc that contains properties that represent a street address:</p>
<pre>&lt;cfcomponent&gt;
   &lt;cfproperty name=&quot;AddrNumber&quot; type=&quot;numeric&quot;&gt;
   &lt;cfproperty name=&quot;Street&quot; type=&quot;string&quot;&gt;
   &lt;cfproperty name=&quot;City&quot; type=&quot;string&quot;&gt;
   &lt;cfproperty name=&quot;State&quot; type=&quot;string&quot;&gt;
   &lt;cfproperty name=&quot;Country&quot; type=&quot;string&quot;&gt;
&lt;/cfcomponent&gt;
</pre><p>The following code defines a component in the file name.cfc that defines first and last name properties:</p>
<pre>&lt;cfcomponent&gt;
   &lt;cfproperty name=&quot;Firstname&quot; type=&quot;string&quot;&gt;
   &lt;cfproperty name=&quot;Lastname&quot; type=&quot;string&quot;&gt;
&lt;/cfcomponent&gt;
</pre><p>You can then use address and name to define data types in a ColdFusion component created to publish a web service, as the following example shows: </p>
<pre>&lt;cfcomponent&gt;
   &lt;cffunction 
&#160;&#160;&#160;&#160;&#160;name=&quot;echoName&quot; <code><strong>returnType=&quot;name&quot;</strong></code> access=&quot;remote&quot; output=&quot;false&quot;&gt;
         &lt;cfargument name=&quot;input&quot; <code><strong>type=&quot;name&quot;</strong></code>&gt;
         &lt;cfreturn #arguments.input#&gt;
   &lt;/cffunction&gt;

   &lt;cffunction 
&#160;&#160;&#160;&#160;&#160;name=&quot;echoAddress&quot; <code><strong>returnType=&quot;address&quot;</strong></code> access=&quot;remote&quot; output=&quot;false&quot;&gt;
         &lt;cfargument name=&quot;input&quot; <code><strong>type=&quot;address&quot;</strong></code>&gt;
         &lt;cfreturn #arguments.input#&gt;
   &lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre><p><strong>Note: </strong>If the component files are not in a directory under your web root, you must create a web server mapping to the directory that contains them. You cannot use ColdFusion mappings to access web services.</p><p>The WSDL file for the web service contains data definitions for the complex types name and address. Each definition consists of the elements that define the type as specified in the ColdFusion component file for that type. For example, the following example shows the definition for name: </p>
<pre>&lt;complexType name=&quot;name&quot;&gt;
&#160;&#160;&lt;sequence&gt;
&#160;&#160;&#160;&#160;&lt;element name=&quot;firstname&quot; nillable=&quot;true&quot; type=&quot;soapenc:string&quot;/&gt;
&#160;&#160;&#160;&#160;&lt;element name=&quot;lastname&quot; nillable=&quot;true&quot; type=&quot;soapenc:string&quot;/&gt;
&#160;&#160;&lt;/sequence&gt;
&lt;/complexType&gt;
</pre><p>You can also specify an array of CFCs in the <code>returnType</code> attribute, as the following example shows:</p>
<pre>&lt;cfcomponent&gt;
   &lt;cffunction 
     name=&quot;allNames&quot; <code><strong>returnType=&quot;name[]&quot;</strong></code> access=&quot;remote&quot; output=&quot;false&quot;&gt;
     &lt;cfset var returnarray = ArrayNew(1)&gt;
     &lt;cfset var temp = &quot;&quot;&gt;
     &lt;cfquery name=&quot;empinfo&quot; datasource=&quot;cfdocexamples&quot;&gt;
      SELECT firstname, lastname
      FROM employee
     &lt;/cfquery&gt;
     &lt;cfloop query=&quot;empinfo&quot; &gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;cfobject component=&quot;name&quot; name=&quot;tempname&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;cfset tempname.Firstname = #empinfo.firstname#&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;cfset tempname.Lastname = #empinfo.lastname#&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;cfset temp = ArrayAppend(returnarray, tempname)&gt;
&#160;&#160;&#160;&#160;&#160;&lt;/cfloop&gt;
&#160;&#160;&#160;&#160;&#160;&lt;cfreturn returnarray&gt;
   &lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre><p>When you invoke the web service, it returns an array of CFCs. Access the properties in the CFC by using dot notation, as the following example shows:</p>
<pre>&lt;cfinvoke webservice =&quot;http://localhost:8500/ws/cfcarray.cfc?wsdl&quot;
   method =&quot;allNames&quot;
   returnVariable=&quot;thearray&quot;&gt;

&lt;cfif IsArray(thearray)&gt;
  &lt;h1&gt;loop through the employees&lt;/h1&gt;
  &lt;p&gt;thearray has &lt;cfoutput&gt;#ArrayLen(thearray)#&lt;/cfoutput&gt; elements.&lt;/p&gt;
  &lt;cfloop index=&quot;i&quot; from=&quot;1&quot; to=&quot;#ArrayLen(thearray)#&quot;&gt;
   &lt;cfoutput&gt;#thearray[i].firstname#, #thearray[i].lastname# &lt;/cfoutput&gt;&lt;br&gt;
  &lt;/cfloop&gt;
&lt;cfelse&gt;
&#160;&#160;&lt;h1&gt;Error: thearray is not an array&lt;/h1&gt;
&lt;/cfif&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00001548.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001550.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001549.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



