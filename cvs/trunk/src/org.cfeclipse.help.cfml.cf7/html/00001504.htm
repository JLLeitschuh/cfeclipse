<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Using the CF.http function</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001503.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001505.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Using the CF.http function</h1>
<p>The CF.http function returns an object that contains properties, also known as attributes. You reference these attributes to access the contents of the file returned, header information, HTTP status codes, and so on. The following table shows the available properties:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Property
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>Text</p>
    </td>
    <td>
<p>A Boolean value indicating whether the specified URL location contains text data. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Charset</p>
    </td>
    <td>
<p>The charset used by the document specified in the URL. </p>
<p>HTTP servers normally provide this information, or the charset is specified in the charset parameter of the Content-Type header field of the HTTP protocol. For example, the following HTTP header announces that the character encoding is EUC-JP:</p>
<p>Content-Type: text/html; charset=EUC-JP</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Header</p>
    </td>
    <td>
<p>Raw response header. For example, macromedia.com returns the following header :</p>
<p>HTTP/1.1 200 OK</p>
<p>Date: Mon, 04 Mar 2002 17:27:44 GMT</p>
<p>Server: Apache/1.3.22 (Unix) mod_perl/1.26</p>
<p>Set-Cookie: MM_cookie=207.22.48.162.4731015262864476; </p>
<p>path=/; expires=Wed, 03-Mar-04 17:27:44 GMT; </p>
<p>domain=.macromedia.com</p>
<p>Connection: close</p>
<p>Content-Type: text/html</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>Filecontent</p>
    </td>
    <td>
<p>File contents, for text and MIME files.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Mimetype</p>
    </td>
    <td>
<p>MIME type. Examples of MIME types include text/html, image/png, image/gif, video/mpeg, text/css, and audio/basic. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>responseHeader</p>
    </td>
    <td>
<p>Response header. If there is one instance of a header key, this value can be accessed as a simple type. If there is more than one instance, values are put in an array in the responseHeader structure.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>Statuscode</p>
    </td>
    <td>
<p>HTTP error code and associated error string. Common HTTP status codes returned in the response header include the following:</p>
<p>400: Bad Request</p>
<p>401: Unauthorized</p>
<p>403: Forbidden</p>
<p>404: Not Found</p>
<p>405: Method Not Allowed</p>
    </td>
  </tr>
</table>

<h2><a name="wp1006278"></a>Referencing HTTP Post parameters in the CF.http function</h2>
<p>To pass HTTP <code>Post</code> parameters in the <code>CF.http</code> function, you must construct an array of objects and assign this array to a variable named <code>params</code>. The following arguments can only be passed as an array of objects in the <code>params</code> argument of the <code>CF.http</code> function: </p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Parameter
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<p>name</p>
    </td>
    <td>
<p>The variable name for data that is passed</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>type</p>
    </td>
    <td>
<p>Transaction type:</p>
<ul>
<li>
   URL
</li>
<li>
   FormField
</li>
<li>
   Cookie
</li>
<li>
   CGI
</li>
<li>
   File
</li>
</ul>
    </td>
  </tr>
  <tr>
    <td>
<p>value</p>
    </td>
    <td>
<p>Value of URL, FormField, Cookie, File, or CGI variables that are passed</p>
    </td>
  </tr>
</table>

<p>In the following example, the <code>CF.http</code> function passes HTTP <code>Post</code> parameters in an array of objects: </p>
<pre>function postWithParamsAndUser()
{
   // Set up the array of Post parameters. These are just like cfhttpparam tags.
   params = new Array();
   params[1] = {name:&quot;arg2&quot;, type:&quot;URL&quot;, value:&quot;value2&quot;};

   url = &quot;http://localhost:8500/&quot;;

   // Invoke with the method, url, params, username, and password
   result = CF.http(&quot;post&quot;, url, params, &quot;karl&quot;, &quot;salsa&quot;);
   return result.get(&quot;Filecontent&quot;);
}
</pre><h2><a name="wp1006319"></a>Using the CF.http Post method</h2>
<p>You use the <code>Post</code> method to send cookie, form field, CGI, URL, and file variables to a specified ColdFusion page or CGI program for processing. For POST operations, you must use the <code>params</code> argument for each variable that you post. The <code>Post</code> method passes data to a specified ColdFusion page or an executable that interprets the variables being sent, and returns data.</p>
<p>For example, when you build an HTML form using the <code>Post</code> method, you specify the name of the page to which form data is passed. You use the <code>Post</code> method in the <code>CF.http</code> function in a similar way. However, with the <code>CF.http</code> function, the page that receives the Post does not display anything. See the following example:</p>
<pre>function postWithParams()
{
   // Set up the array of Post parameters. These are just like cfhttpparam tags.
   // This example passes formfield data to a specified URL.
   params = new Array();
   params[1] = {name:&quot;Formfield1&quot;, type:&quot;FormField&quot;, value:&quot;George&quot;};
   params[2] = [name:&quot;Formfield2&quot;, type:&quot;FormField&quot;, value:&quot;Brown&quot;};

   url = &quot;http://localhost:8500/&quot;;

   // Invoke CF.http with the method, url, and params
   result = CF.http(&quot;post&quot;, url, params);
   return result.get(&quot;Filecontent&quot;);
}
</pre><h2><a name="wp1006340"></a>Using the CF.http Get method</h2>
<p>You use the <code>Get</code> method to retrieve files, including text and binary files, from a specified server. You reference properties of the object returned by the <code>CF.http</code> function to access things like file content, header information, MIME type, and so on. </p>
<p>The following example uses the <code>CF.http</code> function to show a common approach to retrieving data from the web: </p>
<pre>// Returns content of URL defined in url variable
// This example uses positional argument style
function get()
{
   url = &quot;http://www.macromedia.com/software/coldfusion/&quot;;

   //Invoke with just the url argument. Get is the default.
   result = CF.http(url);
   return result.get(&quot;Filecontent&quot;);
}
</pre><p>For more information about <code>CF.http</code> function properties, see <a href="00000858.htm#1001877"><code>CF.http</code></a> in <i>CFML Reference</i>. </p>
<p></p>


<hr />
<p align="right"><p align="right"><a href="00001503.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001505.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001504.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



