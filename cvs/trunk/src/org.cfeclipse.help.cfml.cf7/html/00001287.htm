<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Search filter</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001286.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001288.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Search filter</h1>
<p>The search filter syntax has the form attribute operator value. The default filter, objectclass=*, returns all entries in the scope.</p>
<p>The following table lists the filter operators:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Operator
    </th>
    <th>
Example
    </th>
    <th>
Matches
    </th>
  </tr>
  <tr>
    <td>
<p>=*</p>
    </td>
    <td>
<p>(mail=*)</p>
    </td>
    <td>
<p>All entries that contain a mail attribute.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>= </p>
    </td>
    <td>
<p>(o=macromedia)</p>
    </td>
    <td>
<p>Entries in which the organization name is macromedia.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>~= </p>
    </td>
    <td>
<p>(sn~=Hansen)</p>
    </td>
    <td>
<p>Entries with a surname that approximates Hansen. The matching rules for approximate matches vary among directory vendors, but anything that &quot;sounds like&quot; the search string should be matched. In this example, the directory server might return entries with the surnames Hansen and Hanson.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>&gt;= </p>
    </td>
    <td>
<p>(st&gt;=ma)</p>
    </td>
    <td>
<p>The name &quot;ma&quot; and names appearing after &quot;ma&quot; in an alphabetical state attribute list.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>&lt;= </p>
    </td>
    <td>
<p>(st&lt;=ma)</p>
    </td>
    <td>
<p>The name &quot;ma&quot; and names appearing before &quot;ma&quot; in an alphabetical state attribute list.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>*</p>
    </td>
    <td>
<p>(o=macro*)</p>
    </td>
    <td>
<p>Organization names that start with &quot;macro&quot;.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>(o=*media)</p>
    </td>
    <td>
<p>Organization names that end with &quot;media&quot;.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>(o=mac*ia)</p>
    </td>
    <td>
<p>Organization names that start with &quot;mac&quot; and end with &quot;ia&quot;. You can use more than one * operator in a string; for example, m*ro*dia.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>&#160;</p>
    </td>
    <td>
<p>(o=*med*)</p>
    </td>
    <td>
<p>Organization names that contain the string &quot;med&quot;, including the exact string match &quot;med&quot;.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>&amp;</p>
    </td>
    <td>
<p>(&amp;(o=macromedia)<br />(co=usa))</p>
    </td>
    <td>
<p>Entries in which the organization name is &quot;macromedia&quot; and the country is &quot;usa&quot;.</p>
    </td>
  </tr>
  <tr>
    <td>
<p>| </p>
    </td>
    <td>
<p>(|(o=macromedia)<br />(sn=macromedia)<br />(cn=macromedia))</p>
    </td>
    <td>
<p>Entries in which the organization name is &quot;macromedia&quot; or the surname is &quot;macromedia&quot;, or the common name is &quot;macromedia&quot;.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>!</p>
    </td>
    <td>
<p>(!(STREET=*))</p>
    </td>
    <td>
<p>Entries that do not contain a StreetAddress attribute.</p>
    </td>
  </tr>
</table>

<p>The Boolean operators <code>&amp;</code> and <code>|</code> can operate on more than two attributes and precede all of the attributes on which they operate. You surround a filter with parentheses and use parentheses to group conditions.</p>
<p>If the pattern that you are matching contains an asterisk, left parenthesis, right parenthesis, backslash, or NUL character, you must use the following three-character escape sequence in place of the character:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Character
    </th>
    <th>
Escape sequence
    </th>
  </tr>
  <tr>
    <td>
<p>*</p>
    </td>
    <td>
<p>\2A</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>(</p>
    </td>
    <td>
<p>\28</p>
    </td>
  </tr>
  <tr>
    <td>
<p>)</p>
    </td>
    <td>
<p>\29</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<p>\</p>
    </td>
    <td>
<p>\5C</p>
    </td>
  </tr>
  <tr>
    <td>
<p>NUL</p>
    </td>
    <td>
<p>\00</p>
    </td>
  </tr>
</table>

<p>For example, to match the common name St*r Industries, use the filter <br />(cn=St\2Ar Industries).</p>
<p>LDAP v3 supports an extensible match filter that permits server-specific matching rules. For more information on using extensible match filters, see your LDAP server documentation.</p>
<h4><a name="wp1126888"></a>Searching and sorting notes</h4>
<ul>
<li>
   To search for multiple values of a multivalued attribute type, use the &amp; operator to combine expressions for each attribute value. For example, to search for an entry in which cn=Robert Jones and cn=Bobby Jones, specify the following filter:
<pre>
filter=&quot;(&amp;(cn=Robert Jones)(cn=Bobby Jones))&quot;
</pre>
</li>
<li>
   You can use object classes as search filter attributes; for example, you can use the following search filter:
<pre>
filter=&quot;(objectclass=inetorgperson)&quot;
</pre>
</li>
<li>
   To specify how query results are sorted, use the <code>sort</code> field to identify the attribute(s) to sort. By default, ColdFusion returns sorted results in case-sensitive ascending order. To specify descending order, case-insensitive sorting, or both, use the <code>sortControl</code> attribute. 
</li>
<li>
   ColdFusion requests the LDAP server to do the sorting. This can have the following effects:
<ul><li>The sort order might differ between ColdFusion&#160;MX and previous versions.</li>
<li>If you specify sorting and the LDAP server does not support sorting, ColdFusion generates an error. To sort results from servers that do not support sorting, use a query of queries on the results.</li>
</ul></li>
<li>
   If you use filter operators to construct sophisticated search criteria, performance might degrade if the LDAP server is slow to process the synchronous search routines that <code>cfldap</code> supports. You can use the <code>cfldap</code> tag <code>timeout</code> and <code>maxRows</code> attributes to control the apparent performance of pages that perform queries, by limiting the number of entries and by exiting the query if the server does not respond in a specified time.
</li>
</ul>


<hr />
<p align="right"><p align="right"><a href="00001286.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001288.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001287.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



