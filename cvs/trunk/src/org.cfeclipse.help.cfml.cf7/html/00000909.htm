<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Evaluation and type conversion issues</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000908.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000910.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Evaluation and type conversion issues</h1>
<p>The following sections explain several issues that you might encounter with type evaluation and conversion.</p>
<h4><a name="wp1191784"></a>Comparing variables to True or False</h4>
<p>You might expect the following two <a href="00000274.htm#1100123"><code>cfif</code></a> tag examples to produce the same results:</p>
<pre>&lt;cfif myVariable&gt;
   &lt;cfoutput&gt;myVariable equals #myVariable# and is True 
   &lt;/cfoutput&gt;
&lt;/cfif&gt;
&lt;cfif myVariable IS True&gt;
   &lt;cfoutput&gt;myVariable equals #myVariable# and is True 
   &lt;/cfoutput&gt;
&lt;/cfif&gt;
</pre><p>However, if myVariable has a numeric value such as 12, only the first example produces a result. In the second case, the value of myVariable is not converted to a Boolean data type, because the IS operator does not require a specific data type and just tests the two values for identity. Therefore, ColdFusion compares the value 12 with the constant True. The two are not equal, so nothing is printed. If myVariable is 1, &quot;Yes&quot;, or True, however, both examples print the same result, because ColdFusion considers these to be identical to Boolean True.</p>
<p>If you use the following code, the output statement does display, because the value of the variable, 12, is not equal to the Boolean value False:</p>
<pre>&lt;cfif myVariable IS NOT False&gt;<br />&lt;cfoutput&gt;myVariable equals #myVariable# and IS NOT False<br />&lt;/cfoutput&gt;
&lt;/cfif&gt;
</pre><p>As a result, you should use the test <code>&lt;cfif </code><code><i>testvariable</i></code><code>&gt;</code>, and not use the <code>IS</code> comparison operator when testing whether a variable is True or False. This issue is a case of the more general problem of ambiguous type expression evaluation, described in the following section.</p>
<h4><a name="wp1141465"></a>Ambiguous type expressions and strings</h4>
<p>When ColdFusion evaluates an expression that does not require strings, including all comparison operations, such as <code>IS</code> or <code>GT</code>, it checks whether it can convert each string value to a number or date-time object. If so, ColdFusion converts it to the corresponding number or date-time value (which is stored as a number). It then uses the number in the expression.</p>
<p>Short strings, such as 1a and 2P, can produce unexpected results. ColdFusion can interpret a single &quot;a&quot; as AM and a single &quot;P&quot; as PM. This can cause ColdFusion to interpret strings as date-time values in cases where this was not intended. </p>
<p>Similarly, if the strings can be interpreted as numbers, you might get unexpected results.</p>
<p>For example, ColdFusion interprets the following expressions as shown:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Expression
    </th>
    <th>
Interpretation
    </th>
  </tr>
  <tr>
    <td>
<pre>&lt;cfif &quot;1a&quot; EQ &quot;01:00&quot;&gt; 
</pre>    </td>
    <td>
<p>If 1:00am is 1:00am.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cfif &quot;1P&quot; GT &quot;2A&quot;&gt;
</pre>    </td>
    <td>
<p>If 1:00pm is later than 2:00am.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>&lt;cfset age=&quot;4a&quot;&gt;
&lt;cfset age=age + 7&gt;
</pre>    </td>
    <td>
<p>Treat the variable age as 4:00 am, convert it to the date-time value 0.16666666667, and add 7 to make it 7.16666666667.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cfif &quot;0.0&quot; is &quot;0&quot;&gt;
</pre>    </td>
    <td>
<p>If 0 is 0.</p>
    </td>
  </tr>
</table>

<p>To prevent such ambiguities when you compare strings, use the ColdFusion string comparison functions <a href="00000419.htm#1101820"><code>Compare</code></a> and <a href="00000420.htm#1101887"><code>CompareNoCase</code></a>, instead of the comparison operators.</p>
<p>You can also use the <a href="00000518.htm#4758075"><code>IsDate</code></a> function to determine whether a string can be interpreted as a date-time value, or to add characters to a string before comparison to avoid incorrect interpretation.</p>
<h4><a name="wp1134378"></a>Date-time functions and queries when ODBC is not supported</h4>
<p>Many CFML functions, including the <a href="00000590.htm#134078"><code>Now</code></a>, <a href="00000422.htm#4731550"><code>CreateDate</code></a>, <a href="00000434.htm#1102639"><code>CreateTime</code></a>, and <a href="00000423.htm#1224498"><code>CreateDateTime</code></a> functions, return date-time objects. ColdFusion creates Open Database Connectivity (ODBC) timestamp values when it converts date-time objects to strings. As a result, you might get unexpected results when using dates with a database driver that does not support ODBC escape sequences, or when you use SQL in a query of queries.</p>
<p>If you use SQL to insert data into a database or in a WHERE clause to select data from a database, and the database driver does not support ODBC-formatted dates, use the <code>DateFormat</code> function to convert the date-time value to a valid format for the driver. This rule also applies to queries of queries. </p>
<p>For example, the following SQL statement uses the <a href="00000441.htm#1103264"><code>DateFormat</code></a> function in a query of queries to select rows that have MyDate values in the future:</p>
<pre>&lt;cfquery name=&quot;MyQofQQ&quot; dbtype=&quot;query&quot;&gt;
SELECT * 
FROM DateQuery
WHERE MyDate &gt;= &#39;#DateFormat(Now())#&#39;
&lt;/cfquery&gt;
</pre><p>The following query of queries fails with the error message &quot;Error: {ts is not a valid date,&quot; because the ColdFusion <code>Now</code> function returns an ODBC timestamp: </p>
<pre>&lt;cfquery name=&quot;MyQofQQ&quot; dbtype=&quot;query&quot;&gt;
SELECT * 
FROM DateQuery
WHERE MyDate &gt;= &#39;#now()#&#39;
&lt;/cfquery&gt;
</pre><h4><a name="wp1125354"></a>Using JavaCast with overloaded Java methods</h4>
<p>You can overload Java methods so a class can have several identically named methods that differ only in parameter data types. At runtime, the Java virtual machine attempts to resolve the specific method to use, based on the types of the parameters passed in the call. Because ColdFusion does not use explicit types, you cannot predict which version of the method the virtual machine will use.</p>
<p>The ColdFusion <a href="00000542.htm#1106957"><code>JavaCast</code></a> function helps you ensure that the right method executes by specifying the Java type of a variable, as in the following example: </p>
<pre>&lt;cfset emp.SetJobGrade(JavaCast(&quot;int&quot;, JobGrade))&gt;
</pre><p>The <code>JavaCast</code> function takes two parameters: a string representing the Java data type and the variable whose type you are setting. You can specify the following Java data types: bool, int, long, float, double, and String.</p>
<p>For more information on the <code>JavaCast</code> function, see <i>CFML Reference.</i></p>
<h4><a name="wp1124918"></a>Using quotation marks</h4>
<p>To ensure that ColdFusion properly interprets string data, surround strings in single- or double-quotation marks. For example, ColdFusion evaluates &quot;10/2/2001&quot; as a string that can be converted into a date-time object. However, it evaluates 10/2/2001 as a mathematical expression, 5/2001, which evaluates to 0.00249875062469.</p>


<hr />
<p align="right"><p align="right"><a href="00000908.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000910.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000909.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



