<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Working with structures and queries</title>
</head>
<body>
<p align="right"><p align="right"><a href="00000899.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000901.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Working with structures and queries</h1>
<p>Because structure variables and query variables are references to objects, the rules in the following sections apply to both types of data.</p>
<h4><a name="wp1122386"></a>Multiple references to an object</h4>
<p>When multiple variables refer to a structure or query object, the object continues to exist as long as at least one reference to the object exists. The following example shows how this works: </p>
<pre>&lt;cfscript&gt; depts = structnew();&lt;/cfscript&gt;
&lt;cfset newStructure=depts&gt;
&lt;cfset depts.John=&quot;Sales&quot;&gt;
&lt;cfset depts=0&gt;
&lt;cfoutput&gt;
   #newStructure.John#&lt;br&gt;
   #depts#
&lt;/cfoutput&gt;
</pre><p>This example displays the following output:</p>
<p>Sales<br />0 </p>
<p>After the <code>&lt;cfset depts=0&gt;</code> tag executes, the depts variable does not refer to a structure; it is a simple variable with the value 0. However, the variable newStructure still refers to the original structure object.</p>
<h4><a name="wp1129108"></a>Assigning objects to scopes</h4>
<p>You can give a query or structure a different scope by assigning it to a new variable in the other scope. For example, the following line creates a server variable, Server.SScopeQuery, using the local myquery variable:</p>
<pre>&lt;cfset Server.SScopeQuery = myquery&gt;
</pre><p>To clear the server scope query variable, reassign the query object, as follows:</p>
<pre>&lt;cfset Server.SScopeQuery = 0&gt;
</pre><p>This deletes the reference to the object from the server scope, but does not remove any other references that might exist.</p>
<h4><a name="wp1122457"></a>Copying and duplicating objects</h4>
<p>You can use the <a href="00000456.htm#1104156"><code>Duplicate</code></a> function to make a true copy of a structure or query object. Changes to the copy do not affect the original.</p>
<h4><a name="wp1190169"></a>Using a query column</h4>
<p>When you are not inside a <a href="00000290.htm#3301338"><code>cfloop</code></a>, <a href="00000309.htm#1101659"><code>cfoutput</code></a>, or <a href="00000297.htm#2355015"><code>cfmail</code></a> tag that has a <code>query</code> attribute, you can treat a query column as an array. However, query column references do not always behave as you might expect. This section explains the behavior of references to query columns using the results of the following <a href="00000316.htm#1102316"><code>cfquery</code></a> tag in its examples:</p>
<pre>&lt;cfquery dataSource=&quot;cfdocexamples&quot; name=&quot;myQuery&quot;&gt;
   SELECT FirstName, LastName
   FROM Employee
&lt;/cfquery&gt;
</pre><p>To reference elements in a query column, use the row number as an array index. For example, both of the following lines display the word &quot;ben&quot;:</p>
<pre>&lt;cfoutput&gt; #myQuery.Firstname[1]# &lt;/cfoutput&gt;&lt;br&gt;
&lt;cfoutput&gt; #myQuery[&quot;Firstname&quot;][1]# &lt;/cfoutput&gt;&lt;br&gt;
</pre><p>ColdFusion behavior is less straightforward, however, when you use the query column references myQuery.Firstname and myQuery[&quot;Firstname&quot;] without using an array index. The two reference formats produce different results. </p>
<p>If you refer to myQuery.Firstname, ColdFusion automatically converts it to the first row in the column. For example, the following lines print the word &quot;ben&quot;:</p>
<pre>&lt;cfset myCol = myQuery.Firstname &gt;
&lt;cfoutput&gt;#mycol#&lt;/cfoutput&gt;
</pre><p>But the following lines display an error message:</p>
<pre>&lt;cfset myCol = myQuery.Firstname &gt;
&lt;cfoutput&gt;#mycol[1]#&lt;/cfoutput&gt;&lt;br&gt;
</pre><p>If you refer to <code>Query[&quot;Firstname&quot;]</code>, ColdFusion does not automatically convert it to the first row of the column. For example, the following line results in an error message indicating that ColdFusion cannot convert a complex type to a simple value:</p>
<pre>&lt;cfoutput&gt; #myQuery[&#39;Firstname&#39;]# &lt;/cfoutput&gt;&lt;br&gt;
</pre><p>Similarly, the following lines print the name &quot;marjorie&quot;, the value of the second row in the column:</p>
<pre>&lt;cfset myCol = myQuery[&quot;Firstname&quot;]&gt;
&lt;cfoutput&gt;#mycol[2]#&lt;/cfoutput&gt;&lt;br&gt;
</pre><p>However, when you make an assignment that requires a simple value, ColdFusion automatically converts the query column to the value of the first row. For example, the following lines display the name &quot;ben&quot; twice:</p>
<pre>&lt;cfoutput&gt; #myQuery.Firstname# &lt;/cfoutput&gt;&lt;br&gt;
&lt;cfset myVar= myQuery[&#39;Firstname&#39;]&gt;
&lt;cfoutput&gt; #myVar# &lt;/cfoutput&gt;&lt;br&gt;
</pre>

<hr />
<p align="right"><p align="right"><a href="00000899.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00000901.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00000900.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



