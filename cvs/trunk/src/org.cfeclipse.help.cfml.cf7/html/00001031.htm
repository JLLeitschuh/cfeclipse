<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Defining and using method parameters</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001030.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001032.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Defining and using method parameters</h1>
<p>You pass data to a method by using parameters. To define a component method parameter, use the <a href="00000218.htm#2855190"><code>cfargument</code></a> tag in the <a href="00000263.htm#2852457"><code>cffunction</code></a> tag body. To define multiple parameters, use multiple <code>cfargument</code> tags. The tag names a parameter and lets you specify the following:</p>
<ul>
<li>
   Whether the parameter is required
</li>
<li>
   The type of data that is required
</li>
<li>
   A default argument value
</li>
<li>
   Display name and hint metadata for CFC introspection
</li>
</ul>
<p><strong>Note: </strong>You can create CFC methods that do not use <code>cfargument</code> tags, for example, if you use positional parameters in your methods. However, most CFC methods use the <code>cfargument</code> tag.</p><h4><a name="wp1213574"></a>Example: convertTemp.cfc</h4>
<p>The convertTemp.cfc file consists of the following:</p>
<pre>&lt;cfcomponent&gt;
   &lt;!--- Celsius to Fahrenheit conversion method. ---&gt;
   &lt;cffunction name=&quot;ctof&quot; output=&quot;false&quot;&gt;
      &lt;cfargument name=&quot;temp&quot; required=&quot;yes&quot; type=&quot;numeric&quot;&gt;
      &lt;cfreturn ((temp*9)/5)+32&gt;
   &lt;/cffunction&gt;

   &lt;!--- Fahrenheit to Celsius conversion method. ---&gt;
   &lt;cffunction name=&quot;ftoc&quot; output=&quot;false&quot;&gt;
      &lt;cfargument name=&quot;temp&quot; required=&quot;yes&quot; type=&quot;numeric&quot;&gt;
      &lt;cfreturn ((temp-32)*5/9)&gt;
   &lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre><h4><a name="wp1213850"></a>Reviewing the code</h4>
<p>The convertTemp CFC contains two methods that convert temperature. The following table describes the code and its function:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Code
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<pre>&lt;cfcomponent&gt;
</pre>    </td>
    <td>
<p>Defines the component.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cffunction name=&quot;ctof&quot; output=&quot;false&quot;&gt;
</pre>    </td>
    <td>
<p>Defines the <code>ctof</code> method.</p>
<p>Indicates that this method does not display output.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>&lt;cfargument name=&quot;temp&quot; required=&quot;yes&quot; type=&quot;numeric&quot;&gt;
</pre>    </td>
    <td>
<p>Creates the <code>temp</code> parameter of the <code>ctof</code> method. Indicates that it is required and that the expected value is <code>numeric</code>. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cfreturn ((temp*9)/5)+32&gt;
</pre>    </td>
    <td>
<p>Defines the value that the method returns.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>&lt;/cffunction&gt;
</pre>    </td>
    <td>
<p>Ends the method definition.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cffunction name=&quot;ftoc&quot; output=&quot;false&quot;&gt;
</pre>    </td>
    <td>
<p>Defines the <code>ftoc</code> method.</p>
<p>Indicates that this method does not display output.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>&lt;cfargument name=&quot;temp&quot; required=&quot;yes&quot; type=&quot;numeric&quot;&gt;
</pre>    </td>
    <td>
<p>Creates the <code>temp</code> parameter of the <code>ftoc</code> method. Indicates that it is required and that the expected value is <code>numeric</code>. </p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cfreturn ((temp-32)*5/9)&gt;
</pre>    </td>
    <td>
<p>Defines the value that the method returns.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>&lt;/cffunction&gt;
</pre>    </td>
    <td>
<p>Ends the method definition.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;/cfcomponent&gt;
</pre>    </td>
    <td>
<p>Ends the component definition.</p>
    </td>
  </tr>
</table>

<h4><a name="wp1213895"></a>Example: tempConversion.cfm</h4>
<p>The ColdFusion page tempConversion.cfm is an HTML form in which the user enters the temperature to convert, and selects the type of conversion to perform. When the user clicks the Submit button, ColdFusion performs the actions on the processForm.cfm page. The file tempConversion.cfm, which should be in the same directory as convertTemp.cfc, consists of the following:</p>
<pre>
&lt;cfform action=&quot;processForm.cfm&quot; method=&quot;POST&quot;&gt;
	Enter the temperature:
		&lt;input name=&quot;temperature&quot; type=&quot;text&quot;&gt;&lt;br&gt;&lt;br&gt;
	Select the type of conversion:&lt;br&gt;
		&lt;select name=&quot;conversionType&quot;&gt;
			&lt;option value=&quot;CtoF&quot;&gt;Celsius to Farenheit&lt;/option&gt;
			&lt;option value=&quot;FtoC&quot;&gt;Farenheit to Celsius&lt;/option&gt;
		&lt;/select&gt;&lt;br&gt;&lt;br&gt;
	&lt;input name=&quot;submitform&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;
&lt;/cfform&gt;
</pre>
<h4><a name="wp1213732"></a>Example: processForm.cfm</h4>
<p>The ColdFusion page processForm.cfm calls the appropriate component method, based on what the user entered in the form on the tempConversion.cfm page. It should be in the same directory as convertTemp.cfc.</p>
<pre>
&lt;cfif #form.conversionType# is &quot;CtoF&quot;&gt;
	&lt;cfinvoke component=&quot;convertTemp&quot; method=&quot;ctof&quot; returnvariable=&quot;newtemp&quot;
		temp=#form.temperature#&gt;
	&lt;cfoutput&gt;#form.temperature# degrees Celsius is #newtemp# degrees
		Farenheit.&lt;/cfoutput&gt;
	&lt;cfelseif #form.conversionType# is &quot;FtoC&quot;&gt;
		&lt;cfinvoke component=&quot;convertTemp&quot; method=&quot;ftoc&quot;
			returnvariable=&quot;newtemp&quot; temp=#form.temperature#&gt;
		&lt;cfoutput&gt;#form.temperature# degrees Fahrenheit is #newtemp# degrees
			Celsius.&lt;/cfoutput&gt;
&lt;/cfif&gt;
</pre>
<h4><a name="wp1213790"></a>Reviewing the code</h4>
<p>The file processForm.cfm invokes the appropriate component method. The following table describes the code and its function:</p>
<table border="0" cellpadding="0" cellspacing="0">
  <tr>
    <th>
Code
    </th>
    <th>
Description
    </th>
  </tr>
  <tr>
    <td>
<pre>&lt;cfif form.conversionType is &quot;CtoF&quot;&gt;
</pre>    </td>
    <td>
<p>Executes the code in the <a href="00000274.htm#1100123"><code>cfif</code></a> block if the user selected Celsius to Fahrenheit as the conversion type in the form on the tempConversion.cfm page.</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cfinvoke component=&quot;convertTemp&quot; method=&quot;ctof&quot; returnvariable=&quot;newtemp&quot; arguments.temp=&quot;#form.temperature#&quot;&gt;
</pre>    </td>
    <td>
<p>Invokes the <code>ctof</code> method of the <code>convertTemp</code> component, without creating an instance of the <code>convertTemp</code> component. Specifies <code>newtemp</code> as the result variable for the method. Assigns the temperature value that the user entered in the form to the variable <code>temp</code>, which is specified in the <code>cfargument</code> tag of the <code>ctof</code> method. When invoking the <code>ctof</code> method, the <code>temp</code> variable is assigned to the Arguments scope. For more information about variables and scope, see <a href="00001054.htm#1214875">CFC variables and scope</a>.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>&lt;cfoutput&gt;#form.temperature# degrees Celsius is #newtemp# degrees Fahrenheit.&lt;/cfoutput&gt;
</pre>    </td>
    <td>
<p>Displays the temperature that the user entered in the form, the text &quot;degrees Celsius is,&quot; the new temperature value that results from the <code>ctof</code> method, and the text &quot;degrees Fahrenheit.&quot;</p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cfelseif #form.conversionType# is &quot;FtoC&quot;&gt;
</pre>    </td>
    <td>
<p>Executes the code in the <a href="00000241.htm#2647667"><code>cfelseif</code></a> block if the user selected Fahrenheit to Celsius as the conversion type in the form on the tempConversion.cfm page.</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>&lt;cfinvoke component=&quot;converttemp&quot; method=&quot;ftoc&quot; returnvariable=&quot;newtemp&quot; temp=#form.temperature#&gt;
</pre>    </td>
    <td>
<p>Invokes the <code>ftoc</code> method of the <code>convertTemp</code> component, without creating an instance of the <code>convertTemp</code> component. Specifies <code>newtemp</code> as the result variable for the method. Assigns the temperature value that the user entered in the form to the variable <code>temp</code>, which is specified in the <code>cfargument</code> tag of the <code>ftoc</code> method. When invoking the <code>ftoc</code> method, the <code>temp</code> variable is assigned to the Arguments scope. For more information about variables and scope, see <a href="00001054.htm#1214875">CFC variables and scope</a></p>
    </td>
  </tr>
  <tr bgcolor="#F8F8F8">
    <td>
<pre>&lt;cfoutput&gt;#form.temperature# degrees Fahrenheit is #newtemp# degrees Celsius.&lt;/cfoutput&gt;
</pre>    </td>
    <td>
<p>Displays the temperature that the user entered in the form, the text &quot;degrees Fahrenheit is,&quot; the new temperature value that results from the <code>ftoc</code> method, and the text &quot;degrees Celsius.&quot;</p>
    </td>
  </tr>
  <tr>
    <td>
<pre>&lt;/cfif&gt;
</pre>    </td>
    <td>
<p>Closes the <code>cfif</code> block.</p>
    </td>
  </tr>
</table>

<p>To run the example, display the tempConversion.cfm page in your browser. When you enter a value in the text box of the form, the value is stored in the <code>form.temperature</code> variable. Processing is then performed on the processForm.cfm page, which refers to the value as <code>form.temperature</code>. When you invoke either method, the <a href="00000281.htm#2650065"><code>cfinvoke</code></a> tag assigns the value <code>form.temperature</code> to <code>temp</code>; <code>temp</code> is the argument specified in the <code>cfargument</code> tag of the appropriate method. The appropriate method in the <code>convertTemp</code> component performs the necessary calculations and returns the new value as <code>newtemp</code>.</p>
<p>For detailed reference information on the <code>cfargument</code> tag, see <i>CFML Reference</i>.</p>
<p>To access the parameter values in the component method definition, use structure- or array-like notation with the Arguments scope. The following example refers to the <code>lastName</code> argument as <code>Arguments.lastname</code>; it could also refer to it as <code>Arguments[1]</code>. In addition, you can access arguments directly using number (#) signs, such as <code>#lastname#</code>; however, it is better programming practice to identify the scope (for example, <code>#Arguments.lastname#)</code>. Also, you can use Array- or structure-like notation, which lets you loop over multiple parameters. </p>
<p>For more information on the Arguments scope, see <a href="00001056.htm#1214938">The Arguments scope</a>.</p>
<h4>To define parameters in the component method definition:</h4>
<ul>
<li>
   Create a new component with the following contents, and save it as corpQuery.cfc in a directory under your web root directory:
<pre>
&lt;cfcomponent&gt;
	&lt;cffunction name=&quot;getEmp&quot;&gt;
		&lt;cfargument name=&quot;lastName&quot; type=&quot;string&quot; required=&quot;true&quot; 
				hint=&quot;Employee last name&quot;&gt;
		&lt;cfset var empQuery=&quot;&quot;&gt;
		 &lt;cfquery name=&quot;empQuery&quot; datasource=&quot;cfdocexamples&quot;&gt;
		 	SELECT LASTNAME, FIRSTNAME, EMAIL
		 	FROM tblEmployees
			WHERE LASTNAME LIKE &#39;#Arguments.lastName#&#39;
		 &lt;/cfquery&gt;
			&lt;!--- Use cfdump for debugging purposes. ---&gt;
		 &lt;cfdump var=#empQuery#&gt;
	&lt;/cffunction&gt;
	&lt;cffunction name=&quot;getCat&quot; hint=&quot;Get items below specified cost&quot;&gt;
	&lt;cfargument name=&quot;cost&quot; type=&quot;numeric&quot; required=&quot;true&quot;&gt;
		&lt;cfset var catQuery=&quot;&quot;&gt;
		&lt;cfquery name=&quot;catQuery&quot; datasource=&quot;cfdocexamples&quot;&gt;
		 	SELECT ItemName, ItemDescription, ItemCost
		 	FROM tblItems
			WHERE ItemCost &lt;= #Arguments.cost#
		 &lt;/cfquery&gt;
			&lt;!--- Use cfdump for debugging purposes. ---&gt;
		 &lt;cfdump var=#catQuery#&gt;
	&lt;/cffunction&gt;
&lt;/cfcomponent&gt;
</pre>
</li>
</ul>
<p>In the example, the <code>cfargument</code> attributes specify the following:</p>
<ul>
<li>
   The <code>name</code> attributes define the parameter names.
</li>
<li>
   The <code>type</code> attribute for the <code>lastName</code> argument specifies that the parameter must be a text string. The <code>type</code> attribute for the <code>cost</code> argument specifies that the parameter must be a numeric value. These attributes validate the data before it is submitted to the database.
</li>
<li>
   The <code>required</code> attributes indicate that the parameters are required or an exception will be thrown. 
</li>
<li>
   The Arguments scope provides access to the parameter values.
</li>
</ul>


<hr />
<p align="right"><p align="right"><a href="00001030.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001032.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001031.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



