<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="Content-Style-Type" content="text/css">
   <script src="pages.js" type="text/javascript" language="Javascript1.2" charset="UTF-8"></script>
   <title>Accessing Complex COM Objects using Java proxies</title>
</head>
<body>
<p align="right"><p align="right"><a href="00001581.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001583.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<hr />
<h1>Accessing Complex COM Objects using Java proxies</h1>
<p>ColdFusion&#160;MX supports Java proxies to access COM objects. If you do not create Java proxies in advance, ColdFusion must dynamically discover the COM interface. This technique can have two disadvantages:</p>
<ul>
<li>
   Dynamic discovery takes time and can reduce server performance with frequently used complex COM objects.
</li>
<li>
   Dynamic discovery uses the IDispatcher interface to determine the COM object features, and might not handle some complex COM interfaces.
</li>
</ul>
<p>To overcome these problems, ColdFusion&#160;MX includes a utility, com2java.exe, that creates static Java stub proxy classes for COM objects. ColdFusion can use these Java stubs to access COM objects more efficiently than when it creates the proxies dynamically. Additionally, the com2java.exe utility can create stubs for features that the dynamic proxy generator might miss.</p>
<p>ColdFusion&#160;MX ships with pregenerated stubs for the Windows XP, Windows 2000, and Windows 97 editions of Microsoft Excel, Microsoft Word, and Microsoft Access. ColdFusion&#160;MX is configured to automatically use these stubs.</p>
<p>If you create Java stub files for a COM object, you continue to use the <code>cfobject</code> tag with a <code>type</code> attribute value of <code>COM</code>, or the <code>CreateObject</code> function with a first argument of <code>COM</code>, and you access the object properties and methods as you normally do for COM objects in ColdFusion.</p>
<p>Use the following steps to use the com2java.exe utility. This procedure uses Microsoft Outlook as an example. </p>
<h4>To create Java stub files for COM objects:</h4>
<ol>
<li>
   Configure your system as follows: 
<ol><li>Ensure that a JDK (Java Development Kit) is correctly installed, including proper configuration of the CLASSPATH and the command prompt PATH variable.</li><li>Add CF_root\lib\jintegra.jar to your CLASSPATH. </li></ol></li>
<li>
   Make a new directory for the Java stub files; for example:
<pre>
mkdir C:\src\outlookXP
</pre>
<p>This directory can be temporary. You add files from the directory to a ColdFusion JAR file.</p>
</li>
<li>
   Run the CF_root\Jintegra\bin\com2java.exe program from a command line or the Windows Start Menu. A window appears.
<ol><li>If a COM class implements multiple interfaces that define methods with the same names, click the Options button and clear the Implement interfaces that may conflict option. The generated Java stub classes do not implement the additional, conflicting, interfaces. You can still access the interfaces using the getAs<i>XXX</i> method that is generated. See the generated comments in the Java files.</li><li>Click on the <code>Select</code> button.</li><li>Select your COM object's Type Library or DLL. For Microsoft Outlook in Windows XP, it is normally Program Files\Microsoft Office\Office10\MSOUTL.OLB.</li><li>Enter a package name (for example, <i>outlookXP</i>) in the Java package field in the com2java dialog box. This package will contain all the classes for the Java stubs for the COM object. </li><p><strong>Note: </strong>Macromedia uses a package name that starts with <i>coldfusion.runtime.com.com2java</i> for the packages that contain the preinstalled Java stubs for Microsoft Excel, Microsoft Word, and Microsoft Access. For example, the name for the package containing the Microsoft Word XP Java stub classes is <i>coldfusion.runtime.com.com2java.wordXP</i>. This package name hierarchy results in the wordXP classes having a path inside the msapps.jar file of coldfusion\runtime\<br />com\com2java\wordXP\className.class. Although this naming convention is not necessary, consider using a similar package naming convention for clarity, if you use many COM objects.</p><li>Click the Generate Proxies button to display the File browser. Select the directory you created in <a href="00001582.htm#1148550">step 2.</a>, and click the file browser OK button to generate the stub files.</li><li>Click Close to close the com2java.exe utility.</li><p>The files generated in your directory include the following: </p>
</ol><ul><li>A Java interface and proxy class for each COM interface</li>
<li>A Java class for each COM class</li>
<li>A Java interface for each ENUM (a set of constant definitions)</li>
</ul></li>
<li>
   Compile your Java code. In a command prompt, do the following: 
<ol><li>Make the directory that contains the Java stubs (in this example, C:\src\outlookXP) your working directory.</li><li>Enter the following line:</li><pre>
javac -J-mx100m -J-ms100m *.java
<p>The compiler switches ensure that you have enough memory to compile all the necessary files. </p>
<p><strong>Note: </strong>If you did not put jintegra.jar on your CLASSPATH in step 1b, add the switch <br /><code>-classpath:/</code><code><i>cf_root</i></code><code>/lib/jintegra.jar</code>, where <code><i>cf_root</i></code> is the directory where ColdFusion is installed, to the command.</p></pre>
</ol></li>
<li>
   Ensure that the ColdFusion server is not running. To stop the ColdFusion server, open the Services control panel, select ColdFusion MX application server, and click Stop.
</li>
<li>
   Add your .class files to the ColdFusion Microsoft application Java stubs file by doing the following: 
<ol><li>In the Windows Command prompt, make the parent directory of the directory that contains your class files your working directory. In this example, make c:\src your working director by entering <strong>cd ..</strong> in the Command prompt from <a href="00001582.htm#1148565">step 4.</a></li><li>Enter the following command:</li><pre>
	jar -uvf cf_root\lib\msapps.jar directoryName\*.class
<p>Where <i>cf_root</i> is the directory where ColdFusion MX is installed and <i>directoryName</i> is the name of the directory that contains the class files. For the OutlookXP example, enter the following line:</p>
	jar -uvf C:\CFusionMX7\lib\msapps.jar outlookXP\*.class
</pre>
</ol></li>
<li>
   Update the <i>cf_root</i> /lib/neo-comobjmap.xml file by appending your object definition to the list. The object definition consists of the following lines:
<pre>
&lt;var name=&quot;progID&quot;&gt;
&lt;string&gt;PackageName.mainClass&lt;/string&gt; 
&lt;/var&gt;
</pre>
<p>Use the following values in these lines:</p>
<p><strong>ProgID</strong>&#160;The COM object's ProgID, as displayed in the OLE/COM object viewer.</p>
<p><strong>PackageName</strong><i>&#160;</i>The package name you specified in step 3c.</p>
<p><strong>mainClass</strong>&#160;The main class of the COM object. The main class contains the methods you invoke. For many Microsoft applications, this class is Application. In general, the largest class file created in <a href="00001582.htm#1148565">step 4.</a> is the main class. </p>
<p>For example, to add outlookXP to neo-comobjmap.xml, add the lines in bold text above the <br /><code>&lt;/struct&gt;</code> end tag:</p>
<pre>
&lt;var name=&quot;access.application.9&quot;&gt;
&lt;string&gt;coldfusion.runtime.com.com2java.access2k.Application&lt;/string&gt; 
&lt;/var&gt;
&lt;var name=&quot;outlook.application.10&quot;&gt;
&lt;string&gt;outlookXP.Application&lt;/string&gt;
&lt;/var&gt;
&lt;/struct&gt;
</pre>
<p>In this example,<code> </code><i>outlook.application.10</i> is the ProgID of the Outlook COM object, <i>outlookXP</i> is the package name you specified in step 3c, and <i>Application</i> is the COM object's main class.</p>
</li>
<li>
   Restart the ColdFusion server: Open the Services control panel, select ColdFusion MX application server, and click the Start button.
</li>
<li>
   After you have installed the stubs, you can delete the directory you created in <a href="00001582.htm#1148550">step 2.</a>, including all its contents.
</li>
</ol>


<hr />
<p align="right"><p align="right"><a href="00001581.htm"><img src="images/previous.gif" width="9" height="14" border="0" alt="Previous"></a>&nbsp;&nbsp;<a href="00001583.htm"><img src="images/next.gif" width="9" height="14" border="0" alt="Next"></a>
</p></p>
<p><a href="http://livedocs.macromedia.com/coldfusion/7/htmldocs/00001582.htm" target="mm_window">View comments in LiveDocs</a></p>
 </body>
</html>



